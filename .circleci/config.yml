version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  opensuse:
    docker:
      - image: lawmurray/birch-circleci:opensuse
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j2"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=2 --enable-verbose"
      MODE_FLAGS: "--disable-debug --enable-test --enable-release"
      SMOKE: test  # BIRCH_MODE for running smoke.sh scripts
      TEST: release  # BIRCH_MODE for running test.sh scripts
      MONGODB: 1  # upload test results to MongoDB atlas
      CODECOV: 1  # upload coverage results to Codecov
    working_directory: /root/project/opensuse
    # ^ can't use ~/ or $HOME here, won't expand in $CIRCLE_WORKING_DIRECTORY

  ubuntu:
    docker:
      - image: lawmurray/birch-circleci:ubuntu
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j2"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=2 --enable-verbose"
      MODE_FLAGS: "--enable-debug --disable-test --disable-release"
      SMOKE: debug
    working_directory: /root/project/ubuntu

  debian:
    docker:
      - image: lawmurray/birch-circleci:debian
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j2"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=2 --enable-verbose"
      MODE_FLAGS: "--enable-debug --disable-test --disable-release"
      SMOKE: debug
    working_directory: /root/project/debian

  fedora:
    docker:
      - image: lawmurray/birch-circleci:fedora
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j2"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=2 --enable-verbose"
      MODE_FLAGS: "--enable-debug --disable-test --disable-release"
      SMOKE: debug
    working_directory: /root/project/fedora

  alpine:
    docker:
      - image: lawmurray/birch-circleci:alpine
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j2"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=2 --enable-verbose"
      MODE_FLAGS: "--enable-debug --disable-test --disable-release"
      SMOKE: debug
    working_directory: /root/project/alpine

  mac:
    macos:
      xcode: 12.4.0
    environment:
      OMP_NUM_THREADS: 4
      MAKE_FLAGS: "-j8"
      BIRCH_FLAGS: "--unit=unity --arch=native --jobs=4 --enable-verbose"
      MODE_FLAGS: "--enable-debug --disable-test --enable-release"
      LIB_FLAGS: "--disable-openmp"
      SMOKE: debug
      TEST: release
    working_directory: /Users/distiller/project/mac
    # ^ hard-coding different home directory for Mac, discovered with SSH

commands:

  environment:
    description: Preparing environment
    parameters: 
      os:
        type: string
    steps:
      - when:
          condition:
            equal: [ mac, << parameters.os >> ]
          steps:
            - restore_cache:
                key: homebrew
            - run:
                name: Homebrew
                command: |
                    HOMEBREW_NO_AUTO_UPDATE=1 brew remove --force --ignore-dependencies node node@14 tcl-tk  # avoids these being unnecessarily updated as dependents later
                    HOMEBREW_NO_AUTO_UPDATE=1 brew unlink parallel  # conflicts with moreutils
                    HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils moreutils gnu-time libtool flex boost eigen libomp cairo
                    echo "export PATH=/usr/local/opt/gnu-time/libexec/gnubin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
                    echo "export CPPFLAGS=\"-Xpreprocessor -fopenmp\"" >> $BASH_ENV
            - save_cache:
                key: homebrew
                paths:
                  - /Users/distiller/Library/Caches/Homebrew
      - run:
          name: Environment variables
          command: |
              echo "export VERSION=`(git describe --long || echo) | sed -E 's/v([0-9]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'`" >> $BASH_ENV
              echo "export VERSION_LONG=`git describe --long || echo`" >> $BASH_ENV
              echo "export PREFIX=$CIRCLE_WORKING_DIRECTORY" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV

  end_if_pull_request:
    description: End early with success if a pull request
    steps:
      - run:
          name: End early with success if a pull request
          when: always
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              circleci step halt
            fi

  slack:
    description: Send Slack message on failure
    steps:
      - slack/status:
          fail_only: true

  codecov:
    description: Upload test coverage to Codecov
    steps:
      - run:
          name: Upload test coverage to Codecov
          when: on_success
          command: |
            if [[ -n "$CODECOV" ]]
            then
              curl -s https://codecov.io/bash > codecov
              VERSION=$(grep 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
              for i in 1 256 512
              do
                curl -s https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM | grep codecov | shasum -a $i -c
              done
              bash codecov
            fi

  driver:
    description: Build driver
    steps:
      - run:
          name: Build driver
          command: |
              cd driver
              cat configure.ac | sed -E "s/unversioned/$VERSION/" | sponge configure.ac
              ./bootstrap
              ./configure --prefix="$PREFIX" CXXFLAGS="-Wall -Wno-overloaded-virtual -g -O0 -fno-inline --coverage" || cat config.log
              make $MAKE_FLAGS
              make install
      - run:
          name: Smoke test driver
          command: |
            if [[ -n "$SMOKE" ]]
            then
              cd driver
              env BIRCH_MODE=$SMOKE ./smoke.sh
            fi

  build_library:
    description: Build a C++ library
    parameters:
      package:
        description: Name of the library
        type: string
    steps:
      - run:
          name: Build << parameters.package >>
          command: |
              cd << parameters.package >>
              cat configure.ac | sed -E "s/unversioned/$VERSION/" | sponge configure.ac
              ./bootstrap
              ./configure --prefix="$PREFIX" $MODE_FLAGS $LIB_FLAGS || cat config.log
              make $MAKE_FLAGS
              make install

  build_package:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
      package:
        description: Name of package (e.g. Standard)
        type: string
      extra:
        description: Extra build flags for birch
        type: string
        default: ""
    steps:
      - run:
          name: Build << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              echo "version: $VERSION" | cat - birch.yml | sponge birch.yml
              birch install --prefix=$PREFIX $MODE_FLAGS $BIRCH_FLAGS << parameters.extra >>
          no_output_timeout: 20m
      - run:
          name: Smoke test << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              if [[ -n "$SMOKE" && -e smoke.sh ]]
              then
                env BIRCH_MODE=$SMOKE ./smoke.sh
              fi
      - run:
          name: Document << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              birch docs

  test_package:
    description: Test a Birch package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
      package:
        description: Name of package (e.g. Standard)
        type: string
    steps:
      - run:
          name: Unit test << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              if [[ -n "$TEST" && -e test.sh ]]
              then
                env BIRCH_MODE=$TEST time --format="$FORMAT" --output=/tmp/time.txt ./test.sh
                # ^ env time to use GNU time, not Bash built-in time
              fi
      - run:
          name: Upload  << parameters.package >> results to MongoDB Atlas
          command: |
              if [[ -n "$MONGODB" && -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" && -n "$VERSION_LONG" ]]
              then
                cd << parameters.dir >>/<< parameters.package >>
                if [[ -e output/test.json ]]
                then
                  echo '{ "output": ' > /tmp/mongodb.json
                  cat output/test.json >> /tmp/mongodb.json
                  if [[ -e /tmp/time.txt ]]
                  then
                    cat /tmp/time.txt >> /tmp/mongodb.json
                  fi
                  echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> /tmp/mongodb.json
                  echo ", \"version\": \"$VERSION_LONG\"" >> /tmp/mongodb.json
                  echo '}' >> /tmp/mongodb.json
                  mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection << parameters.package >> --file /tmp/mongodb.json
                fi
              fi

  osc_identity:
    description: Configure OSC
    steps:
      - run:
          name: Configure OSC
          command: |
              if [[ -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                mkdir -p ~/.config/osc
                echo [general]                          > ~/.config/osc/oscrc
                echo apiurl = https://api.opensuse.org >> ~/.config/osc/oscrc
                echo [https://api.opensuse.org]        >> ~/.config/osc/oscrc
                echo user = $OSC_USERNAME              >> ~/.config/osc/oscrc
                echo pass = $OSC_PASSWORD              >> ~/.config/osc/oscrc
              fi

  deploy_obs_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
    steps:
      - run:
          name: Open Build Service package for << parameters.package >>
          command: |
              shopt -s extglob
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                TARNAME=<< parameters.package >>
                if [[ "$TARNAME" = "driver" ]]; then
                  TARNAME=birch
                elif [[ "$TARNAME" != "libbirch" && "$TARNAME" != "numbirch" ]]; then
                  TARNAME=birch-${TARNAME,,}
                fi
                osc checkout $OSC_PROJECT $TARNAME
                cd << parameters.dir >>/<< parameters.package >>
                make dist
                cp $TARNAME-$VERSION.tar.gz $CIRCLE_WORKING_DIRECTORY/$OSC_PROJECT/$TARNAME/.
                cd $CIRCLE_WORKING_DIRECTORY/$OSC_PROJECT/$TARNAME
                osc delete $TARNAME-!($VERSION).tar.gz
                osc add $TARNAME-$VERSION.tar.gz
                for file in $TARNAME.spec $TARNAME.dsc debian.control PKGBUILD
                do
                  cat $file |
                    sed -E "s/-[0-9]+\.[0-9]+\.tar\.gz/-$VERSION.tar.gz/g" |
                    sed -E "s/\%\{name\}-[0-9]+\.[0-9]+/\%\{name\}-$VERSION/g" |
                    sed -E "s/Version: [0-9]+\.[0-9]+/Version: $VERSION/g" |
                    sed -E "s/pkgver=[0-9]+\.[0-9]+/pkgver=$VERSION/g" |
                    sed -E "s/pkgname-[0-9]+\.[0-9]+/pkgname-$VERSION/g" |
                    sed -E "s/>=( ?)[0-9]+\.[0-9]+/>=\\1$VERSION/g" |
                    sponge $file
                done
                osc commit -m "Updated to version $VERSION."
              fi

  git_identity:
    description: Configure Git
    steps:
      - run:
          name: Configure Git
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  brew_checkout:
    description: Checkout Homebrew tap
    steps:
      - run:
          name: Checkout Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/homebrew-birch.git
                cd homebrew-birch
                git rm *.tar.gz
              fi

  deploy_brew_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.package >>
          command: |
              shopt -s extglob
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                TARNAME=<< parameters.package >>
                if [[ "$TARNAME" = "driver" ]]; then
                  TARNAME=birch
                elif [[ "$TARNAME" != "libbirch" && "$TARNAME" != "numbirch" ]]; then
                  TARNAME=birch-${TARNAME,,}
                fi
                cd << parameters.dir >>/<< parameters.package >>
                make dist
                cp $TARNAME-$VERSION.tar.gz $CIRCLE_WORKING_DIRECTORY/homebrew-birch/.
                cd $CIRCLE_WORKING_DIRECTORY/homebrew-birch
                SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
                cat $TARNAME.rb |
                  sed -E "s/-[0-9]+\.[0-9]+\.tar\.gz/-$VERSION.tar.gz/g" |
                  sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" |
                  sed -E "s/version \"[0-9]+\.[0-9]+\"/version \"$VERSION\"/g" |
                  sed -E "s/=> \"[0-9]+\.[0-9]+\"/=> \"$VERSION\"/g" |
                  sponge $TARNAME.rb
              fi

  brew_commit:
    description: Commit Homebrew tap
    steps:
      - git_identity
      - run:
          name: Commit Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd homebrew-birch
                git add *.tar.gz
                git add -u
                git commit -m "Updated to version $VERSION."
                git push origin master
              fi

  deploy_website:
    description: Deploy website
    steps:
      - run:
          name: Deploy website
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/docs.birch.sh.git
                make -f mkdocs.makefile
                cp -r mkdocs.yml docs docs.birch.sh/.
                cd docs.birch.sh
                mkdocs gh-deploy
              fi

jobs:
  build:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - environment:
          os: << parameters.os >>
      - driver
      - build_library:
          package: numbirch
      - build_library:
          package: libbirch
      - build_package:
          dir: libraries
          package: Standard
      - build_package:
          dir: libraries
          package: StandardTest
          extra: --jobs=1  # needed to avoid exhausting memory
      - build_package:
          dir: libraries
          package: Cairo
      - build_package:
          dir: libraries
          package: SQLite
      - when:
          condition:
            or:
              - equal: [ opensuse, << parameters.os >> ]
              - equal: [ mac, << parameters.os >> ]
          steps:
            - persist_to_workspace:
                root: ..
                paths:
                  - << parameters.os >>
      - end_if_pull_request
      - codecov
      - slack

  test:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: ..
      - environment:
          os: << parameters.os >>
      - test_package:
          dir: libraries
          package: StandardTest
      - end_if_pull_request
      - slack

  example:
    parameters: 
      os:
        type: string
      package:
        description: Name of package (e.g. LinearRegression)
        type: string
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: ..
      - environment:
          os: << parameters.os >>
      - build_package:
          dir: examples
          package: << parameters.package >>
      - test_package:
          dir: examples
          package: << parameters.package >>
      - end_if_pull_request
      - codecov
      - slack

  deploy:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: ..
      - environment:
          os: << parameters.os >>
      - git_identity
      - osc_identity
      - deploy_obs_package:
          package: driver
      - deploy_obs_package:
          package: numbirch
      - deploy_obs_package:
          package: libbirch
      - deploy_obs_package:
          dir: libraries
          package: Standard
      - deploy_obs_package:
          dir: libraries
          package: Cairo
      - deploy_obs_package:
          dir: libraries
          package: SQLite
      - brew_checkout
      - deploy_brew_package:
          package: driver
      - deploy_brew_package:
          package: numbirch
      - deploy_brew_package:
          package: libbirch
      - deploy_brew_package:
          dir: libraries
          package: Standard
      - deploy_brew_package:
          dir: libraries
          package: Cairo
      - deploy_brew_package:
          dir: libraries
          package: SQLite
      - brew_commit
      - deploy_website
      - codecov
      - slack

workflows:
  version: 2
  all:
    jobs:
      - build:
          matrix:
            parameters:
              os: [opensuse,debian,fedora,alpine,mac]

      - test:
          matrix:
            parameters:
              os: [opensuse,mac]
          requires:
            - build-<< matrix.os >>

      - example:
          matrix:
            parameters:
              os: [opensuse,mac]
              package: [Ecology,LinearGaussian,LinearRegression,MixedGaussian,MultiObjectTracking,PoissonGaussian,SIR,VectorBorneDisease]
          requires:
            - test-<< matrix.os >>

      - deploy:
          os: opensuse
          filters:
            branches:
              only:
                - master
          requires:
            - example
            - build-debian
            - build-fedora
            - build-alpine
