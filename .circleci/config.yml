version: 2.1

orbs:
  codecov: codecov/codecov@3.2

executors:
  opensuse-bench:
    docker:
      - image: lawmurray/birch-circleci:opensuse
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O3 -march=native -flto -Wall"
      MAKEFLAGS: "-j8"
      CONFIGURE_FLAGS: "--disable-assert"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=1 --enable-verbose --disable-assert --disable-debug --disable-static --disable-single"
      # ^ --unit here also affects source tarballs deployed to packages
    working_directory: /root/opensuse-bench

  opensuse-cover:
    docker:
      - image: lawmurray/birch-circleci:opensuse
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -g -Wall -fno-inline --coverage"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --enable-coverage --disable-optimize --disable-static --disable-single"
    working_directory: /root/opensuse-cover

  alpine:
    docker:
      - image: lawmurray/birch-circleci:alpine
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/alpine

  archlinux:
    docker:
      - image: lawmurray/birch-circleci:archlinux
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/archlinux

  debian:
    docker:
      - image: lawmurray/birch-circleci:debian
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/debian

  fedora:
    docker:
      - image: lawmurray/birch-circleci:fedora
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/fedora

  ubuntu:
    docker:
      - image: lawmurray/birch-circleci:ubuntu
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/ubuntu

  project:
    docker:
      - image: lawmurray/birch-circleci:opensuse
    resource_class: large
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /root/project

  mac:
    macos:
      xcode: 13.4.1
    environment:
      OMP_NUM_THREADS: 4
      CXXFLAGS: "-O0 -Wall"
      MAKEFLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single"
    working_directory: /Users/distiller/mac

commands:

  environment:
    parameters: 
      os:
        description: Name of the executor or docker image for which to establish the environment
        type: string
        default: project
    steps:
      - when:
          condition:
            equal: [ mac, << parameters.os >> ]
          steps:
            - restore_cache:
                key: homebrew
            - run:
                name: Homebrew
                command: |
                    HOMEBREW_NO_AUTO_UPDATE=1 brew remove --force --ignore-dependencies node node@14 tcl-tk  # avoids these being unnecessarily updated as dependents later
                    HOMEBREW_NO_AUTO_UPDATE=1 brew unlink parallel  # conflicts with moreutils
                    HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils moreutils gnu-time libtool flex boost eigen libomp cairo
                    echo "export PATH=/usr/local/opt/gnu-time/libexec/gnubin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
            - save_cache:
                key: homebrew
                paths:
                  - /Users/distiller/Library/Caches/Homebrew
      - when:
          condition:
            matches:
              pattern: '^.*(debian|ubuntu).*:.*$'
              value: << parameters.os >>
          steps:
            - run:
                name: Install dependencies
                command: |
                    apt-get update
                    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                      git \
                      ssh \
                      gpg \
                      gpg-agent \
                      rename \
                      tar \
                      gzip \
                      curl \
                      ca-certificates \
                      binutils \
                      elfutils \
                      make \
                      autoconf \
                      automake \
                      flex \
                      bison \
                      g++ \
                      libtool \
                      libjemalloc-dev \
                      libeigen3-dev \
                      libyaml-dev \
                      libboost-math-dev \
                      libsqlite3-dev \
                      libcairo2-dev \
                      build-essential \
                      apt-utils \
                      dpkg \
                      dpkg-dev \
                      devscripts \
                      debhelper \
                      fakeroot \
                      lintian \
                      reprepro
      - when:
          condition:
            matches:
              pattern: '^.*opensuse/(leap:.*|tumbleweed)$'
              value: << parameters.os >>
          steps:
            - run:
                name: Install dependencies
                command: |
                    zypper --non-interactive update
                    zypper --non-interactive install --no-recommends \
                      git \
                      openssh \
                      gpg \
                      distribution-gpg-keys \
                      tar \
                      gzip \
                      bzip2 \
                      xz \
                      zstd \
                      curl \
                      ca-certificates \
                      make \
                      flex \
                      bison \
                      gcc-c++ \
                      autoconf \
                      automake \
                      libtool \
                      libyaml-devel \
                      jemalloc-devel \
                      boost-devel \
                      eigen3-devel \
                      cairo-devel \
                      sqlite3-devel \
                      rpmlint \
                      rpm-build \
                      rpm-config-SUSE \
                      createrepo_c
      - when:
          condition:
            matches:
              pattern: '^.*fedora.*:.*$'
              value: << parameters.os >>
          steps:
            - run:
                name: Install dependencies
                command: |
                    yum -y update
                    yum -y install \
                      git \
                      openssh \
                      gpg \
                      distribution-gpg-keys \
                      tar \
                      gzip \
                      bzip2 \
                      xz \
                      zstd \
                      curl \
                      ca-certificates \
                      make \
                      flex \
                      bison \
                      gcc-c++ \
                      autoconf \
                      automake \
                      libtool \
                      libyaml-devel \
                      jemalloc-devel \
                      boost-devel \
                      eigen3-devel \
                      cairo-devel \
                      sqlite-devel \
                      rpm \
                      rpmlint \
                      rpm-build \
                      rpm-sign \
                      redhat-rpm-config \
                      createrepo_c
      - when:
          condition:
            matches:
              pattern: '^.*mageia.*:.*$'
              value: << parameters.os >>
          steps:
            - run:
                name: Install dependencies
                command: |
                    urpmi --auto-update
                    urpmi --force --auto --no-recommends \
                      git \
                      openssh \
                      gnupg2 \
                      distribution-gpg-keys \
                      tar \
                      gzip \
                      bzip2 \
                      xz \
                      zstd \
                      curl \
                      ca-certificates \
                      make \
                      flex \
                      bison \
                      gcc-c++ \
                      autoconf \
                      automake \
                      libtool \
                      yaml-devel \
                      jemalloc-devel \
                      boost-devel \
                      eigen3-devel \
                      cairo-devel \
                      sqlite3-devel \
                      rpm \
                      rpmlint \
                      rpm-build \
                      rpm-sign \
                      rpm-mageia-setup \
                      rpm-mageia-setup-build \
                      createrepo_c
      - run:
          name: Environment variables
          command: |
              echo "export VERSION_LONG=`git describe --long || echo`" >> $BASH_ENV
              echo "export VERSION=\`echo \$VERSION_LONG | sed -E 's/v([0-9.]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'\`" >> $BASH_ENV
              echo "export VERSION_SAFE=\`echo \$VERSION | sed -E 's/\./_/g'\`" >> $BASH_ENV
              echo "export PREFIX=$CIRCLE_WORKING_DIRECTORY" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:/usr/local/cuda/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:/usr/local/cuda/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
              echo "export CODENAME=\`echo << parameters.os >> | sed -E 's/registry.\w+.org\///' | sed -E 's/fedora:([0-9A_Za-z]+)/Fedora_\1/' | sed -E 's/opensuse\/leap:([0-9]+)\.([0-9]+)/openSUSE_Leap_\1.\2/' | sed -E 's/opensuse\/tumbleweed/openSUSE_Tumbleweed/' | sed -E 's/mageia:([0-9A_Za-z]+)/Mageia_\1/' | sed -E 's/^(debian|ubuntu)://'\`" >> $BASH_ENV
      - run:
          name: GPG keys
          command: |
              echo $GPG_PUBLIC_KEY | base32 -d > public.key
              echo $GPG_SIGNING_KEY | base32 -d > signing.key
              echo %_gpg_name $GPG_NAME > /root/.rpmmacros
              unset GPG_PUBLIC_KEY GPG_SIGNING_KEY GPG_NAME
              gpg --import public.key signing.key
              rm public.key signing.key

  install_cuda_prereq:
    steps:
      - run:
          name: Install prerequisites for NumBirch CUDA backend
          command: cd /root && ./install_cuda_prereq

  end_if_pull_request:
    steps:
      - run: 
         name: End early if pull request
         command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]
            then
              circleci step halt
            fi
  codecov:
    parameters: 
      os:
        type: string
        default: project
    steps:
      - when:
          condition:
            matches:
              pattern: "^.+-cover$"
              value: << parameters.os >>
          steps:
            - run:
                name: Produce coverage report
                command: lcov --directory . --no-external --capture -o cov.info
            - codecov/upload:
                file: cov.info

  version:
    parameters:
      dir:
        description: Directory in which to update version number
        type: string
    steps:
      - run:
          name: Update version number
          command: |
              cd << parameters.dir >>
              for file in birch.yml configure.ac Makefile.am Makefile *.spec debian/changelog debian/control debian/*.install debian/*.links PKGBUILD
                do
                  if [[ -e $file ]]
                  then
                    cat $file | sed -E "s/0\.0\.0/$VERSION/g" | sed -E "s/0_0_0/$VERSION_SAFE/g" | sponge $file
                    rename 0.0.0 $VERSION $file || echo
                  fi
                done

  build_cpp:
    description: Build a C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --prefix="$PREFIX" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make install
      - run:
          name: Smoke test << parameters.dir >>
          command: |
            cd << parameters.dir >>
            if [[ -e smoke.sh ]]
            then
              ./smoke.sh
            fi

  build_birch:
    description: Build a Birch package
    parameters:
      os:
        type: string
        default: project
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch install --prefix="$PREFIX" $BIRCH_FLAGS || (cat config.log && exit 1)
          no_output_timeout: 30m
      - when:
          condition:
            not:
              matches:
                pattern: "^.+-bench$"
                value: << parameters.os >>
          steps:
            - run:
                name: Smoke test << parameters.dir >>
                command: |
                    cd << parameters.dir >>
                    birch docs
                    if [[ -e smoke.sh ]]
                    then
                      ./smoke.sh
                    fi
      - when:
          condition:
            matches:
              pattern: "^.+-bench$"
              value: << parameters.os >>
          steps:
            - run:
                name: Unit test << parameters.dir >>
                command: |
                    cd << parameters.dir >>
                    if [[ -e test.sh ]]
                    then
                      env time --format="$FORMAT" --output=time.txt ./test.sh
                      # ^ env time to use GNU time, not Bash built-in time
                    fi
            - run:
                name: Upload test results of << parameters.dir >> to MongoDB Atlas
                command: |
                    if [[ -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" && -n "$VERSION_LONG" ]]
                    then
                      cd << parameters.dir >>
                      if [[ -e output/test.json ]]
                      then
                        echo '{ "output": ' > mongodb.json
                        cat output/test.json >> mongodb.json
                        if [[ -e time.txt ]]
                        then
                          cat time.txt >> mongodb.json
                        fi
                        echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> mongodb.json
                        echo ", \"version\": \"$VERSION_LONG\"" >> mongodb.json
                        echo '}' >> mongodb.json
                        mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection `echo << parameters.dir >> | sed 's/^.*\///' --file mongodb.json
                      fi
                    fi

  source_cpp:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --disable-checks --prefix="$PREFIX" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist
              mkdir -p /root/source
              mv *-$VERSION.tar.gz /root/source/.

  source_birch:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch bootstrap
              ./configure --disable-checks --prefix="$PREFIX" || (cat config.log && exit 1)
              make dist
              mkdir -p /root/source
              mv *-$VERSION.tar.gz /root/source/.

  brew_identity:
    steps:
      - run:
          name: Configure Homebrew
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  osc_identity:
    steps:
      - run:
          name: Configure OSC
          command: |
              if [[ -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                mkdir -p ~/.config/osc
                echo [general]                          > ~/.config/osc/oscrc
                echo apiurl = https://api.opensuse.org >> ~/.config/osc/oscrc
                echo [https://api.opensuse.org]        >> ~/.config/osc/oscrc
                echo user = $OSC_USERNAME              >> ~/.config/osc/oscrc
                echo pass = $OSC_PASSWORD              >> ~/.config/osc/oscrc
              fi

  osc_checkout:
    steps:
      - run:
          name: Checkout Open Build Service repo
          command: |
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                osc checkout $OSC_PROJECT
              fi

  osc_commit:
    steps:
      - run:
          name: Commit Open Build Service repo
          command: |
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                cd $OSC_PROJECT
                osc commit -m "Updated to version $VERSION."
              fi

  brew_checkout:
    steps:
      - run:
          name: Checkout Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/homebrew-birch.git
                cd homebrew-birch
              fi

  brew_commit:
    steps:
      - run:
          name: Commit Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd homebrew-birch
                git add -u
                git commit -m "Updated to version $VERSION."
                git push origin master
              fi

  deploy_deb:
    parameters:
      package:
        description: Name of the package
        type: string
    steps:
      - run:
          name: Build Debian package << parameters.package >>
          command: |
              if [[ '<< parameters.package >>' = 'birch-standard' ]]
              then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.package >>' = 'numbirch' ]]
              then
                export JOBS=6
              else
                export JOBS=8
              fi
              cp /root/source/<< parameters.package >>-[0-9]*.tar.gz .
              rename .tar.gz .orig.tar.gz << parameters.package >>-*.tar.gz
              tar xzf << parameters.package >>-*.orig.tar.gz
              cd << parameters.package >>-*
              debuild -eDEB_BUILD_OPTIONS=noddebs -j$JOBS
              cd ..
      - run:
          name: Install Debian package << parameters.package >>
          command: |
              apt install ./*.deb  # must specify ./ to find packages
      - run:
          name: Deploy Debian package << parameters.package >>
          command: |
              reprepro -b /root/deb/$CODENAME --ignore=wrongdistribution include $CODENAME *.changes

  deploy_rpm:
    parameters:
      package:
        description: Name of the package
        type: string
    steps:
      - run:
          name: Build RPM package << parameters.package >>
          command: |
              if [[ '<< parameters.package >>' = 'birch-standard' ]]
              then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.package >>' = 'numbirch' ]]
              then
                export JOBS=6
              else
                export JOBS=8
              fi
              rpmbuild --define='_topdir /root/rpmbuild' --define="_smp_mflags -j$JOBS" --define="debug_package %{nil}" -ta /root/source/<< parameters.package >>-[0-9]*.tar.gz
      - run:
          name: Sign RPM package << parameters.package >>
          command: |
              rpmsign --addsign /root/rpmbuild/RPMS/x86_64/*.rpm
      - run:
          name: Install RPM package << parameters.package >>
          command: |
              rpm --install --nodeps /root/rpmbuild/RPMS/x86_64/*.rpm  # establish dependencies as we go
      - run:
          name: Deploy RPM package << parameters.package >>
          command: |
              mv /root/rpmbuild/RPMS/x86_64/*.rpm /root/rpm/$CODENAME/x86_64/.
              mv /root/rpmbuild/SRPMS/*.rpm /root/rpm/$CODENAME/src/.

  deploy_obs:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Open Build Service package for << parameters.dir >>
          command: |
              shopt -s extglob
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                cd << parameters.dir >>
                make dist
                TARNAME=`ls *.tar.gz | sed -E s/-$VERSION\.tar\.gz$//`
                mv $TARNAME-$VERSION.tar.gz $CIRCLE_WORKING_DIRECTORY/$OSC_PROJECT/$TARNAME/.
                cd $CIRCLE_WORKING_DIRECTORY/$OSC_PROJECT/$TARNAME
                if ls $TARNAME-!($VERSION).tar.gz > /dev/null
                then
                  osc delete $TARNAME-!($VERSION).tar.gz
                fi
                osc add $TARNAME-$VERSION.tar.gz
                for file in PKGBUILD $TARNAME.spec $TARNAME.dsc debian.control debian.$TARNAME.install debian.$TARNAME-dev.install
                do
                  if [[ -e $file ]]
                  then
                    cat $file |
                      sed -E "s/-[0-9]+\.[0-9.]+?(\.tar\.gz|\.so)/-$VERSION\1/g" |
                      sed -E "s/\%\{name\}-[0-9]+_[0-9_]+/\%\{name\}-$VERSION_SAFE/g" |
                      sed -E "s/Version: [0-9]+\.[0-9.]+/Version: $VERSION/g" |
                      sed -E "s/pkgver=[0-9]+\.[0-9.]+/pkgver=$VERSION/g" |
                      sed -E "s/>= *[0-9]+\.[0-9.]+/>= $VERSION/g" |
                      sed -E "s/== *[0-9]+\.[0-9.]+/== $VERSION/g" |
                      sponge $file
                  fi
                done
              fi

  deploy_brew:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.dir >>
          command: |
              shopt -s extglob
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd << parameters.dir >>
                make dist
                TARNAME=`ls *.tar.gz | sed -E s/-$VERSION\.tar\.gz$//`
                mv $TARNAME-$VERSION.tar.gz $CIRCLE_WORKING_DIRECTORY/homebrew-birch/.
                cd $CIRCLE_WORKING_DIRECTORY/homebrew-birch
                if ls $TARNAME-!($VERSION).tar.gz > /dev/null
                then
                  git rm $TARNAME-!($VERSION).tar.gz
                fi
                git add $TARNAME-$VERSION.tar.gz
                SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
                cat $TARNAME.rb |
                  sed -E "s/-[0-9]+\.[0-9.]+\.tar\.gz/-$VERSION.tar.gz/g" |
                  sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" |
                  sed -E "s/version \"[0-9]+\.[0-9.]+\"/version \"$VERSION\"/g" |
                  sed -E "s/=> \"[0-9]+\.[0-9.]+\"/=> \"$VERSION\"/g" |
                  sponge $TARNAME.rb
              fi

  deploy_website:
    steps:
      - run:
          name: Deploy website
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/docs.birch.sh.git
                make -f mkdocs.makefile
                cp -r mkdocs.yml docs docs.birch.sh/.
                cd docs.birch.sh
                mkdocs gh-deploy
              fi

jobs:
  build:
    parameters: 
      os:
        type: string
        default: project
    executor: << parameters.os >>
    steps:
      - checkout
      - environment:
          os: << parameters.os >>
      - build_cpp:
          dir: numbirch
      - build_cpp:
          dir: membirch
      - build_cpp:
          dir: birch
      - build_birch:
          os: << parameters.os >>
          dir: libraries/Standard
      - build_birch:
          os: << parameters.os >>
          dir: libraries/Cairo
      - build_birch:
          os: << parameters.os >>
          dir: libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - << parameters.os >>
      - codecov:
          os: << parameters.os >>
      - end_if_pull_request

  test:
    parameters: 
      os:
        type: string
        default: project
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: ..
      - environment:
          os: << parameters.os >>
      - build_birch:
          os: << parameters.os >>
          dir: tests/Test
      - codecov:
          os: << parameters.os >>
      - end_if_pull_request

  example:
    parameters: 
      os:
        type: string
        default: project
      dir:
        description: Directory containing the package
        type: string
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: ..
      - environment:
          os: << parameters.os >>
      - build_birch:
          os: << parameters.os >>
          dir: << parameters.dir >>
      - codecov:
          os: << parameters.os >>
      - end_if_pull_request

  deploy:
    executor: project
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: ..
      - environment

      - osc_identity
      - osc_checkout
      - deploy_obs:
          dir: numbirch
      - deploy_obs:
          dir: membirch
      - deploy_obs:
          dir: birch
      - deploy_obs:
          dir: libraries/Standard
      - deploy_obs:
          dir: libraries/Cairo
      - deploy_obs:
          dir: libraries/SQLite
      - osc_commit

      - brew_identity
      - brew_checkout
      - deploy_brew:
          dir: numbirch
      - deploy_brew:
          dir: membirch
      - deploy_brew:
          dir: birch
      - deploy_brew:
          dir: libraries/Standard
      - deploy_brew:
          dir: libraries/Cairo
      - deploy_brew:
          dir: libraries/SQLite
      - brew_commit

      - deploy_website
    
  source:
    executor: project
    steps:
      - end_if_pull_request
      - checkout
      - environment
      - build_cpp:
          dir: birch  # needed for source_birch
      - source_cpp:
          dir: numbirch
      - source_cpp:
          dir: membirch
      - source_cpp:
          dir: birch
      - source_birch:
          dir: libraries/Standard
      - source_birch:
          dir: libraries/Cairo
      - source_birch:
          dir: libraries/SQLite
      - run:
          name: Copy install_cuda_prereq
          command: cp numbirch/install_cuda_prereq numbirch/nvcc_wrapper /root/.
      - persist_to_workspace:
          root: /root
          paths:
            - source
            - install_cuda_prereq
            - nvcc_wrapper

  deb:
    parameters: 
      image:
        type: string
    docker:
      - image: << parameters.image >>
    resource_class: large
    steps:
      - end_if_pull_request
      - environment:
          os: << parameters.image >>
      - attach_workspace:
          at: /root
      - install_cuda_prereq
      - run:
          name: Initialize repository
          command: |
              mkdir -p /root/deb/$CODENAME/conf
              printf "Codename: $CODENAME\nComponents: main\nArchitectures: source amd64\nSignWith: default\n" > /root/deb/$CODENAME/conf/distributions
      - deploy_deb:
          package: numbirch
      - deploy_deb:
          package: membirch
      - deploy_deb:
          package: birch
      - deploy_deb:
          package: birch-standard
      - deploy_deb:
          package: birch-cairo
      - deploy_deb:
          package: birch-sqlite
      - run:
          name: Finalize repository
          command: |
              gpg --export --armor > /root/deb/$CODENAME/dists/$CODENAME/Release.key
      - persist_to_workspace:
          root: /root
          paths:
            - deb

  rpm:
    parameters: 
      image:
        type: string
    docker:
      - image: << parameters.image >>
    resource_class: large
    steps:
      - end_if_pull_request
      - environment:
          os: << parameters.image >>
      - attach_workspace:
          at: /root
      - install_cuda_prereq
      - run:
          name: Initialize repository
          command: |
              mkdir -p /root/rpm/$CODENAME/{x86_64,src}
              gpg --export --armor > public.key
              rpm --import public.key
              rm public.key
      - deploy_rpm:
          package: numbirch
      - deploy_rpm:
          package: membirch
      - deploy_rpm:
          package: birch
      - deploy_rpm:
          package: birch-standard
      - deploy_rpm:
          package: birch-cairo
      - deploy_rpm:
          package: birch-sqlite
      - run:
          name: Finalize repository
          command: |
              cd /root/rpm/$CODENAME
              createrepo .
              gpg --detach-sign --armor repodata/repomd.xml
              gpg --export --armor > repomd.xml.key
      - persist_to_workspace:
          root: /root
          paths:
            - rpm

  repo:
    executor: project
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: ..
      - environment
      - run:
          command: cd /root && tar cfJ repo.tar.xz source deb rpm
      - store_artifacts:
          path: /root/repo.tar.xz

workflows:
  all:
    when: false
    jobs:
      - build:
          matrix:
            parameters:
              os:
                - opensuse-bench
                - opensuse-cover
                - alpine
                - archlinux
                - debian
                - fedora
                - ubuntu
                - mac

      - test:
          matrix:
            parameters:
              os:
                - opensuse-bench
                - opensuse-cover
                - alpine
                - archlinux
                - debian
                - fedora
                - ubuntu
                - mac
          requires:
            - build-<< matrix.os >>

      - example:
          matrix:
            parameters:
              os:
                - opensuse-bench
                - opensuse-cover
              dir:
                - examples/Ecology
                - examples/LinearGaussian
                - examples/LinearRegression
                - examples/MixedGaussian
                - examples/MultiObjectTracking
                - examples/PoissonGaussian
                - examples/SIR
                - examples/VectorBorneDisease
          requires:
            - test-<< matrix.os >>

      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - example
            - test

  package:
    jobs:
      - source
      - deb:
          matrix:
            parameters:
              image:
                - debian:buster
                - debian:bullseye
                - ubuntu:focal
                - ubuntu:jammy
                - ubuntu:kinetic
          requires:
            - source
      - rpm:
          matrix:
            parameters:
              image:
                - registry.opensuse.org/opensuse/leap:15.4
                - registry.opensuse.org/opensuse/tumbleweed
                - registry.fedoraproject.org/fedora:35
                - registry.fedoraproject.org/fedora:36
                - registry.fedoraproject.org/fedora:37
                - mageia:8
          requires:
            - source

      - repo:
          requires:
            - deb
            - rpm
