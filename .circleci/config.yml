version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1
  slack: circleci/slack@3.4.2

executors:
  linux:
    docker:
      - image: lawmurray/birch-circleci:opensuse-tumbleweed

  mac:
    macos:
      xcode: "12.0.0"

commands:

  git_identity:
    description: Setting Git identity
    steps:
      - run:
          name: Git identity
          description: Set Git identity
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  linux_environment:
    description: Preparing Linux environment
    steps:
      - run:
          name: Environment
          description: Set environment variables for builds
          command: |
              echo "export VERSION=`(git describe --long || echo) | sed -E 's/v([0-9]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'`" >> $BASH_ENV
              echo "export VERSION_LONG=`git describe --long || echo`" >> $BASH_ENV
              echo "export PREFIX=~/project" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib:$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export MAKE_FLAGS='-j4'" >> $BASH_ENV
              echo "export OMP_NUM_THREADS=2" >> $BASH_ENV
              echo "export BIRCH_FLAGS='--unit=dir --arch=native --jobs=2 --enable-verbose'" >> $BASH_ENV
              echo "export MODE_FLAGS='--disable-debug --enable-test --enable-release'" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
          # BIRCH_FLAGS uses only two parallel jobs to avoid exhausting memory

  mac_environment:
    description: Preparing macOS environment
    steps:
      - run:
          name: Dependencies
          description: Install dependencies from Homebrew
          command: |
              HOMEBREW_NO_AUTO_UPDATE=1 brew unlink parallel  # conflicts with moreutils
              HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils moreutils autoconf automake libtool flex bison boost eigen libyaml libomp sqlite cairo
      - run:
          name: Environment
          description: Set environment variables for builds
          command: |
              echo "export VERSION=`(git describe --long || echo) | sed -E 's/v([0-9]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'`" >> $BASH_ENV
              echo "export VERSION_LONG=`git describe --long || echo`" >> $BASH_ENV
              echo "export PREFIX=~/project" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib:$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export MAKE_FLAGS='-j8'" >> $BASH_ENV
              echo "export OMP_NUM_THREADS=4" >> $BASH_ENV
              echo "export BIRCH_FLAGS='--unit=dir --arch=native --jobs=4 --enable-verbose'" >> $BASH_ENV
              echo "export MODE_FLAGS='--disable-debug --enable-test --disable-release'" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
          # BIRCH_FLAGS uses only four parallel jobs to avoid exhausting memory

  end_if_pull_request:
    description: End early with success if a pull request
    steps:
      - run:
          name: End early with success if a pull request
          when: always
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              circleci step halt
            fi

  slack:
    description: Send Slack message on failure
    steps:
      - slack/status:
          fail_only: true

  codecov:
    description: Upload test coverage to Codecov
    steps:
      - codecov/upload:
          when: on_success

  driver:
    description: Build driver
    steps:
      - run:
          name: Build driver
          command: |
              cd driver
              ./bootstrap
              ./configure --prefix="$PREFIX" CXXFLAGS="-Wall -Wno-overloaded-virtual -g -O0 -fno-inline --coverage" || cat config.log
              make $MAKE_FLAGS
              make install
      - run:
          name: Test driver
          command: |
              mkdir hello
              cd hello
              birch help
              birch init
              birch audit
              birch dist
              birch clean

  library:
    description: Build a C++ library
    parameters:
      package:
        description: Name of the library
        type: string
    steps:
      - run:
          name: Build << parameters.package >> C++ library
          command: |
              cd << parameters.package >>
              ./bootstrap
              ./configure --prefix="$PREFIX" $MODE_FLAGS || cat config.log
              make $MAKE_FLAGS
              make install

  package:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
      package:
        description: Name of package (e.g. Standard)
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard)
        type: string
      smoke:
        description: Run smoke tests?
        type: boolean
        default: false
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload output to MongoDB Atlas?
        type: boolean
        default: false
    steps:
      - run:
          name: Build << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              birch build --prefix=$PREFIX $MODE_FLAGS $BIRCH_FLAGS
              birch install
      - when:
          condition: << parameters.smoke >>
          steps:
            - run:
                name: Smoke test << parameters.package >> package
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    env BIRCH_MODE=test ./smoke.sh
      - when:
          condition: << parameters.unit >>
          steps:
            - run:
                name: Unit test << parameters.package >> package
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    env BIRCH_MODE=release time --format="$FORMAT" --output=/tmp/time.txt ./test.sh
                # ^ env time to use GNU time, not Bash built-in time
      - when:
          condition: << parameters.mongodb >>
          steps:
            - run:
                name: Upload  << parameters.package >> results to MongoDB Atlas
                command: |
                    if [[ -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" && -n "$VERSION_LONG" ]]
                    then
                      cd << parameters.dir >>/<< parameters.package >>
                      echo '{ "output": ' > /tmp/mongodb.json
                      cat output/test.json >> /tmp/mongodb.json
                      if [[ -e /tmp/time.txt ]]
                      then
                        cat /tmp/time.txt >> /tmp/mongodb.json
                      fi
                      echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> /tmp/mongodb.json
                      echo ", \"version\": \"$VERSION_LONG\"" >> /tmp/mongodb.json
                      echo '}' >> /tmp/mongodb.json
                      mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection << parameters.package >> --file /tmp/mongodb.json
                    fi

  configure_osc:
    description: Configure Open Build Service command-line interface
    steps:
      - run:
          name: Configure OSC
          command: |
              if [[ -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                mkdir -p ~/.config/osc
                echo [general]                          > ~/.config/osc/oscrc
                echo apiurl = https://api.opensuse.org >> ~/.config/osc/oscrc
                echo [https://api.opensuse.org]        >> ~/.config/osc/oscrc
                echo user = $OSC_USERNAME              >> ~/.config/osc/oscrc
                echo pass = $OSC_PASSWORD              >> ~/.config/osc/oscrc
              fi

  checkout_brew:
    description: Checkout Homebrew tap
    steps:
      - git_identity
      - run:
          name: Checkout Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/homebrew-birch.git
              fi

  commit_brew:
    description: Commit Homebrew tap
    steps:
      - git_identity
      - run:
          name: Commit Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd ~/project/homebrew-birch
                git add -u
                git commit -m "Updated to version $VERSION."
                git push origin master
              fi

  linux_deploy_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard)
        type: string
    steps:
      - run:
          name: Open Build Service package for << parameters.package >>
          command: |
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                osc checkout $OSC_PROJECT << parameters.tar >>
                cd << parameters.dir >>/<< parameters.package >>
                make dist
                cp << parameters.tar >>-unversioned.tar.gz ~/project/$OSC_PROJECT/<< parameters.tar >>/.
                cd ~/project/$OSC_PROJECT/<< parameters.tar >>
                for file in << parameters.tar >>.spec << parameters.tar >>.dsc debian.control PKGBUILD
                do
                  cat $file |
                    sed -E "s/Version: v?[0-9]+(.[0-9]+)?/Version: $VERSION/g" |
                    sed -E "s/pkgver=v?[0-9]+(.[0-9]+)?/pkgver=$VERSION/g" |
                    sed -E "s/>=( ?)v?[0-9]+(.[0-9]+)?/>=\\1$VERSION/g" |
                    sponge $file
                done
                osc commit -m "Updated to version $VERSION."
              fi

  mac_deploy_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard)
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.package >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd << parameters.dir >>/<< parameters.package >>
                make dist
                cp << parameters.tar >>-unversioned.tar.gz ~/project/homebrew-birch/.
                cd ~/project/homebrew-birch
                SHA256=($(sha256sum << parameters.tar >>-unversioned.tar.gz))
                cat << parameters.tar >>.rb |
                  sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" |
                  sed -E "s/version \"v?[0-9]+(.[0-9]+)?\"/version \"$VERSION\"/g" |
                  sed -E "s/=> \"v?[0-9]+(.[0-9]+)?\"/=> \"$VERSION\"/g" |
                  sponge << parameters.tar >>.rb
              fi

jobs:
  linux:
    executor: linux
    steps:
      - checkout
      - linux_environment
      - driver
      - library:
          package: libbirch
      - package:
          dir: libraries
          package: Standard
          tar: birch-standard
          smoke: true
          unit: true
      - package:
          dir: libraries
          package: Cairo
          tar: birch-cairo
      - package:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
      - persist_to_workspace:
          root: .
          paths:
            - '*'
            - .*
      - end_if_pull_request
      - codecov
      - slack

  linux_LinearGaussian:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: LinearGaussian
          tar: birch-lineargaussian
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_LinearRegression:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: LinearRegression
          tar: birch-linearregression
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_MixedGaussian:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: MixedGaussian
          tar: birch-mixedgaussian
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_MultiObjectTracking:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: MultiObjectTracking
          tar: birch-multiobjecttracking
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_PoissonGaussian:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: PoissonGaussian
          tar: birch-poissongaussian
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_SIR:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: SIR
          tar: birch-sir
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_VectorBorneDisease:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - linux_environment
      - package:
          dir: examples
          package: VectorBorneDisease
          tar: birch-vectorbornedisease
          smoke: true
          unit: true
          mongodb: true
      - end_if_pull_request
      - codecov
      - slack

  linux_deploy:
    executor: linux
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: .
      - linux_environment
      - configure_osc
      - linux_deploy_package:
          package: driver
          tar: birch
      - linux_deploy_package:
          package: libbirch
          tar: libbirch
      - linux_deploy_package:
          dir: libraries
          package: Standard
          tar: birch-standard
      - linux_deploy_package:
          dir: libraries
          package: Cairo
          tar: birch-cairo
      - linux_deploy_package:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
      - slack

  mac:
    executor: mac
    steps:
      - checkout
      - mac_environment
      - driver
      - library:
          package: libbirch
      - package:
          dir: libraries
          package: Standard
          tar: birch-standard
          smoke: true
      - package:
          dir: libraries
          package: Cairo
          tar: birch-cairo
      - package:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
      - persist_to_workspace:
          root: .
          paths:
            - '*'
            - .*
      - end_if_pull_request
      - codecov
      - slack

  mac_LinearGaussian:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: LinearGaussian
          tar: birch-lineargaussian
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_LinearRegression:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: LinearRegression
          tar: birch-linearregression
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_MixedGaussian:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: MixedGaussian
          tar: birch-mixedgaussian
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_MultiObjectTracking:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: MultiObjectTracking
          tar: birch-multiobjecttracking
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_PoissonGaussian:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: PoissonGaussian
          tar: birch-poissongaussian
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_SIR:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: SIR
          tar: birch-sir
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_VectorBorneDisease:
    executor: mac
    steps:
      - attach_workspace:
          at: .
      - mac_environment
      - package:
          dir: examples
          package: VectorBorneDisease
          tar: birch-vectorbornedisease
          smoke: true
      - end_if_pull_request
      - codecov
      - slack

  mac_deploy:
    executor: mac
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: .
      - mac_environment
      - checkout_brew
      - mac_deploy_package:
          package: driver
          tar: birch
      - mac_deploy_package:
          package: libbirch
          tar: libbirch
      - mac_deploy_package:
          dir: libraries
          package: Standard
          tar: birch-standard
      - mac_deploy_package:
          dir: libraries
          package: Cairo
          tar: birch-cairo
      - mac_deploy_package:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
      - commit_brew
      - slack

  website_deploy:
    executor: linux
    steps:
      - end_if_pull_request
      - attach_workspace:
          at: .
      - linux_environment
      - git_identity
      - run:
          name: Commit website
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/docs.birch.sh.git
                make -f mkdocs.makefile
                cp -r mkdocs.yml docs docs.birch.sh/.
                cd docs.birch.sh
                mkdocs gh-deploy
              fi
      - codecov
      - slack

workflows:
  version: 2

  linux:
    jobs:
      - linux

      - linux_LinearGaussian:
          requires:
            - linux

      - linux_LinearRegression:
          requires:
            - linux

      - linux_MixedGaussian:
          requires:
            - linux

      - linux_PoissonGaussian:
          requires:
            - linux

      - linux_SIR:
          requires:
            - linux

      - linux_MultiObjectTracking:
          requires:
            - linux

      - linux_VectorBorneDisease:
          requires:
            - linux

      - linux_deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - linux_LinearGaussian
            - linux_LinearRegression
            - linux_MixedGaussian
            - linux_PoissonGaussian
            - linux_SIR
            - linux_MultiObjectTracking
            - linux_VectorBorneDisease

      - website_deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - linux_deploy

  mac:
    jobs:
      - mac

      - mac_LinearGaussian:
          requires:
            - mac

      - mac_LinearRegression:
          requires:
            - mac

      - mac_MixedGaussian:
          requires:
            - mac

      - mac_PoissonGaussian:
          requires:
            - mac

      - mac_SIR:
          requires:
            - mac

      - mac_MultiObjectTracking:
          requires:
            - mac

      - mac_VectorBorneDisease:
          requires:
            - mac

      - mac_deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - mac_LinearGaussian
            - mac_LinearRegression
            - mac_MixedGaussian
            - mac_PoissonGaussian
            - mac_SIR
            - mac_MultiObjectTracking
            - mac_VectorBorneDisease
