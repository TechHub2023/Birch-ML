version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1
  slack: circleci/slack@3.4.2

executors:
  opensuse:
    docker:
      - image: lawmurray/birch-circleci:opensuse
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j4"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=4 --enable-verbose"
      MODE_FLAGS: "--disable-debug --enable-test --enable-release"

  debian:
    docker:
      - image: lawmurray/birch-circleci:debian
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j4"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=4 --enable-verbose"
      MODE_FLAGS: "--disable-debug --enable-test --disable-release"

  fedora:
    docker:
      - image: lawmurray/birch-circleci:fedora
    environment:
      OMP_NUM_THREADS: 2
      MAKE_FLAGS: "-j4"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=4 --enable-verbose"
      MODE_FLAGS: "--disable-debug --enable-test --disable-release"

  mac:
    macos:
      xcode: 12.2.0
    environment:
      OMP_NUM_THREADS: 4
      MAKE_FLAGS: "-j8"
      BIRCH_FLAGS: "--unit=dir --arch=native --jobs=8 --enable-verbose"
      MODE_FLAGS: "--disable-debug --enable-test --disable-release"
      HOMEBREW: 1

commands:

  environment:
    description: Preparing environment
    steps:
      - run:
          name: Environment
          description: Set environment variables for builds
          command: |
              if [[ -n "$HOMEBREW" ]]
              then
                HOMEBREW_NO_AUTO_UPDATE=1 brew unlink parallel  # conflicts with moreutils
                HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils moreutils autoconf automake libtool flex bison boost eigen libyaml libomp sqlite cairo
                echo "export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
              fi
              echo "export VERSION=`(git describe --long || echo) | sed -E 's/v([0-9]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'`" >> $BASH_ENV
              echo "export VERSION_LONG=`git describe --long || echo`" >> $BASH_ENV
              echo "export PREFIX=~/project" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV

  end_if_pull_request:
    description: End early with success if a pull request
    steps:
      - run:
          name: End early with success if a pull request
          when: always
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              circleci step halt
            fi

  slack:
    description: Send Slack message on failure
    steps:
      - slack/status:
          fail_only: true

  codecov:
    description: Upload test coverage to Codecov
    steps:
      - codecov/upload:
          when: on_success

  driver:
    description: Build driver
    steps:
      - run:
          name: Build driver
          command: |
              cd driver
              ./bootstrap
              ./configure --prefix="$PREFIX" CXXFLAGS="-Wall -Wno-overloaded-virtual -g -O0 -fno-inline --coverage" || cat config.log
              make $MAKE_FLAGS
              make install
      - run:
          name: Test driver
          command: |
              mkdir hello
              cd hello
              birch help
              birch init
              birch audit
              birch dist
              birch clean

  library:
    description: Build a C++ library
    parameters:
      package:
        description: Name of the library
        type: string
    steps:
      - run:
          name: Build << parameters.package >>
          command: |
              cd << parameters.package >>
              ./bootstrap
              ./configure --prefix="$PREFIX" $MODE_FLAGS || cat config.log
              make $MAKE_FLAGS
              make install

  package:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
      package:
        description: Name of package (e.g. Standard)
        type: string
      smoke:
        description: Run smoke tests?
        type: boolean
        default: true
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload output to MongoDB Atlas?
        type: boolean
        default: false
    steps:
      - run:
          name: Build << parameters.package >> package
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              birch build --prefix=$PREFIX $MODE_FLAGS $BIRCH_FLAGS
              birch install
      - when:
          condition: << parameters.smoke >>
          steps:
            - run:
                name: Smoke test << parameters.package >> package
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    env BIRCH_MODE=test ./smoke.sh
      - when:
          condition: << parameters.unit >>
          steps:
            - run:
                name: Unit test << parameters.package >> package
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    env BIRCH_MODE=release time --format="$FORMAT" --output=/tmp/time.txt ./test.sh
                # ^ env time to use GNU time, not Bash built-in time
      - when:
          condition: << parameters.mongodb >>
          steps:
            - run:
                name: Upload  << parameters.package >> results to MongoDB Atlas
                command: |
                    if [[ -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" && -n "$VERSION_LONG" ]]
                    then
                      cd << parameters.dir >>/<< parameters.package >>
                      echo '{ "output": ' > /tmp/mongodb.json
                      cat output/test.json >> /tmp/mongodb.json
                      if [[ -e /tmp/time.txt ]]
                      then
                        cat /tmp/time.txt >> /tmp/mongodb.json
                      fi
                      echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> /tmp/mongodb.json
                      echo ", \"version\": \"$VERSION_LONG\"" >> /tmp/mongodb.json
                      echo '}' >> /tmp/mongodb.json
                      mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection << parameters.package >> --file /tmp/mongodb.json
                    fi

  osc_identity:
    description: Configure OSC
    steps:
      - run:
          name: Configure OSC
          command: |
              if [[ -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                mkdir -p ~/.config/osc
                echo [general]                          > ~/.config/osc/oscrc
                echo apiurl = https://api.opensuse.org >> ~/.config/osc/oscrc
                echo [https://api.opensuse.org]        >> ~/.config/osc/oscrc
                echo user = $OSC_USERNAME              >> ~/.config/osc/oscrc
                echo pass = $OSC_PASSWORD              >> ~/.config/osc/oscrc
              fi

  git_identity:
    description: Configure Git
    steps:
      - run:
          name: Configure Git
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  brew_checkout:
    description: Checkout Homebrew tap
    steps:
      - run:
          name: Checkout Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/homebrew-birch.git
                cd ~/project/homebrew-birch
                git rm *.tar.gz
              fi

  brew_commit:
    description: Commit Homebrew tap
    steps:
      - git_identity
      - run:
          name: Commit Homebrew tap
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                cd ~/project/homebrew-birch
                git add *.tar.gz
                git add -u
                git commit -m "Updated to version $VERSION."
                git push origin master
              fi

  deploy_obs_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
    steps:
      - run:
          name: Open Build Service package for << parameters.package >>
          command: |
              shopt -s extglob
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                TARNAME=<< parameters.package >>
                if [[ "$TARNAME" = "driver" ]]
                then
                  TARNAME=birch
                elif [[ "$TARNAME" != "libbirch" ]]
                then
                  TARNAME=birch-${TARNAME,,}
                fi
                osc checkout $OSC_PROJECT $TARNAME
                cd << parameters.dir >>/<< parameters.package >>
                birch bootstrap 2> /dev/null || echo  # in case a birch package
                cat configure.ac | sed -E "s/unversioned/$VERSION/" | sponge configure.ac
                ./bootstrap
                ./configure
                make dist
                cp $TARNAME-$VERSION.tar.gz ~/project/$OSC_PROJECT/$TARNAME/.
                cd ~/project/$OSC_PROJECT/$TARNAME
                osc delete $TARNAME-!($VERSION).tar.gz
                osc add $TARNAME-$VERSION.tar.gz
                for file in $TARNAME.spec $TARNAME.dsc debian.control PKGBUILD
                do
                  cat $file |
                    sed -E "s/-[0-9]+\.[0-9]+\.tar\.gz/-$VERSION.tar.gz/g" |
                    sed -E "s/\%\{name\}-[0-9]+\.[0-9]+/\%\{name\}-$VERSION/g" |
                    sed -E "s/Version: [0-9]+\.[0-9]+/Version: $VERSION/g" |
                    sed -E "s/pkgver=[0-9]+\.[0-9]+/pkgver=$VERSION/g" |
                    sed -E "s/pkgname-[0-9]+\.[0-9]+/pkgname-$VERSION/g" |
                    sed -E "s/>=( ?)[0-9]+\.[0-9]+/>=\\1$VERSION/g" |
                    sponge $file
                done
                osc commit -m "Updated to version $VERSION."
              fi

  deploy_brew_package:
    description: Deploy package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries)
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard)
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.package >>
          command: |
              shopt -s extglob
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]
              then
                TARNAME=<< parameters.package >>
                if [[ "$TARNAME" = "driver" ]]
                then
                  TARNAME=birch
                elif [[ "$TARNAME" != "libbirch" ]]
                then
                  TARNAME=birch-${TARNAME,,}
                fi
                cd << parameters.dir >>/<< parameters.package >>
                birch bootstrap 2> /dev/null || echo  # in case a birch package
                cat configure.ac | sed -E "s/unversioned/$VERSION/" | sponge configure.ac
                ./bootstrap
                ./configure
                make dist
                cp $TARNAME-$VERSION.tar.gz ~/project/homebrew-birch/.
                cd ~/project/homebrew-birch
                SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
                cat $TARNAME.rb |
                  sed -E "s/-[0-9]+\.[0-9]+\.tar\.gz/-$VERSION.tar.gz/g" |
                  sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" |
                  sed -E "s/version \"[0-9]+\.[0-9]+\"/version \"$VERSION\"/g" |
                  sed -E "s/=> \"[0-9]+\.[0-9]+\"/=> \"$VERSION\"/g" |
                  sponge $TARNAME.rb
              fi

  deploy_website:
    description: Deploy website
    steps:
      - run:
          name: Deploy website
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]
              then
                git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/docs.birch.sh.git
                make -f mkdocs.makefile
                cp -r mkdocs.yml docs docs.birch.sh/.
                cd docs.birch.sh
                mkdocs gh-deploy
              fi

jobs:
  main:
    parameters: 
      os:
        type: executor
      smoke:
        description: Run smoke tests?
        type: boolean
        default: true
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload output to MongoDB Atlas?
        type: boolean
        default: false
    executor: << parameters.os >>
    steps:
      - checkout
      - environment
      - driver
      - library:
          package: libbirch
      - package:
          dir: libraries
          package: Standard
          smoke: << parameters.smoke >>
          unit: << parameters.unit >>
          mongodb: << parameters.mongodb >>
      - package:
          dir: libraries
          package: Cairo
          smoke: false
      - package:
          dir: libraries
          package: SQLite
          smoke: false
      - persist_to_workspace:
          root: .
          paths:
            - '*'
            - .*
      - end_if_pull_request
      - codecov
      - slack

  example:
    parameters: 
      os:
        type: executor
      package:
        description: Name of package (e.g. Standard)
        type: string
      smoke:
        description: Run smoke tests?
        type: boolean
        default: false
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload output to MongoDB Atlas?
        type: boolean
        default: false
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: .
      - environment
      - package:
          dir: examples
          package: << parameters.package >>
          smoke: << parameters.smoke >>
          unit: << parameters.unit >>
          mongodb: << parameters.mongodb >>
      - end_if_pull_request
      - codecov
      - slack

  deploy:
    executor: opensuse
    steps:
      - end_if_pull_request
      - checkout
      - environment
      - git_identity
      - osc_identity
      - driver
      - deploy_obs_package:
          package: driver
      - deploy_obs_package:
          package: libbirch
      - deploy_obs_package:
          dir: libraries
          package: Standard
      - deploy_obs_package:
          dir: libraries
          package: Cairo
      - deploy_obs_package:
          dir: libraries
          package: SQLite
      - brew_checkout
      - deploy_brew_package:
          package: driver
      - deploy_brew_package:
          package: libbirch
      - deploy_brew_package:
          dir: libraries
          package: Standard
      - deploy_brew_package:
          dir: libraries
          package: Cairo
      - deploy_brew_package:
          dir: libraries
          package: SQLite
      - brew_commit
      - deploy_website
      - codecov
      - slack

workflows:
  version: 2
  all:
    jobs:
      - main:
          os: opensuse
          name: main-opensuse
          unit: true

      - main:
          matrix:
            parameters:
              os: [debian,fedora,mac]

      - example:
          matrix:
            parameters:
              os: [opensuse]
              package: [LinearGaussian,LinearRegression,MixedGaussian,PoissonGaussian,SIR,MultiObjectTracking,VectorBorneDisease]
          unit: true
          mongodb: true
          requires:
            - main-opensuse

      - example:
          matrix:
            parameters:
              os: [debian,fedora,mac]
              package: [LinearGaussian,LinearRegression,MixedGaussian,PoissonGaussian,SIR,MultiObjectTracking,VectorBorneDisease]
          requires:
            - main-<< matrix.os >>

      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - example-opensuse-LinearGaussian
            - example-opensuse-LinearRegression
            - example-opensuse-MixedGaussian
            - example-opensuse-PoissonGaussian
            - example-opensuse-SIR
            - example-opensuse-MultiObjectTracking
            - example-opensuse-VectorBorneDisease
            - example-debian-LinearGaussian
            - example-debian-LinearRegression
            - example-debian-MixedGaussian
            - example-debian-PoissonGaussian
            - example-debian-SIR
            - example-debian-MultiObjectTracking
            - example-debian-VectorBorneDisease
            - example-fedora-LinearGaussian
            - example-fedora-LinearRegression
            - example-fedora-MixedGaussian
            - example-fedora-PoissonGaussian
            - example-fedora-SIR
            - example-fedora-MultiObjectTracking
            - example-fedora-VectorBorneDisease
            - example-mac-LinearGaussian
            - example-mac-LinearRegression
            - example-mac-MixedGaussian
            - example-mac-PoissonGaussian
            - example-mac-SIR
            - example-mac-MultiObjectTracking
            - example-mac-VectorBorneDisease
