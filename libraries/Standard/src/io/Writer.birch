/**
 * Write data to a file.
 *
 * ```mermaid
 * classDiagram
 *    Writer <|-- YAMLWriter
 *    YAMLWriter <|-- JSONWriter
 *    link Writer "../Writer/"
 *    link YAMLWriter "../YAMLWriter/"
 *    link JSONWriter "../JSONWriter/"
 * ```
 *
 * Typical use is to use the `Writer` factory function to instantiate an
 * object of an appropriate derived class based on the file extension of the
 * given path:
 *
 *     let writer <- Writer(path);
 *
 * The whole contents of the file can be written at once with:
 *
 *     writer.dump(buffer);
 *
 * Alternatively, where the root element of the file is an array, the contents
 * may be written sequentially, one element at a time:
 *
 *     writer.push(buffer1);
 *     writer.push(buffer2);
 *     writer.push(buffer3);
 *
 * Finally, close the file:
 *
 *     writer.close();
 *
 * A file may not be valid for reading until the writer is closed, depending
 * on the file format.
 */
abstract class Writer {
  /**
   * Open a file.
   *
   * - path : Path of the file.
   */
  abstract function open(path:String);
  
  /**
   * Write the whole contents of a buffer into the file.
   *
   * - buffer: Buffer to write.
   */
  abstract function dump(buffer:Buffer);

  /**
   * Write a buffer to the file. This allows for sequential writing of the
   * file, where the root element is an array. It avoids holding the entire
   * file in memory at once.
   *
   * - buffer: Buffer to write.
   */
  abstract function push(buffer:Buffer);

  /**
   * Flush accumulated writes to the file.
   */
  abstract function flush();
  
  /**
   * Close the file.
   */
  abstract function close();

  abstract function visit(value:ObjectValue);
  abstract function visit(value:ArrayValue);
  abstract function visit(value:NilValue);
  abstract function visit(value:BooleanValue);
  abstract function visit(value:IntegerValue);
  abstract function visit(value:RealValue);
  abstract function visit(value:StringValue);
  abstract function visit(value:BooleanVectorValue);
  abstract function visit(value:IntegerVectorValue);
  abstract function visit(value:RealVectorValue);
}

/**
 * Create a writer for a file.
 *
 * - path: Path of the file.
 *
 * Returns: the writer.
 *
 * The file extension of `path` is used to determine the precise type of the
 * returned object. Supported file extension are `.json` and `.yml`.
 */
function Writer(path:String) -> Writer {
  let ext <- extension(path);
  result:Writer?;
  if ext == ".json" {
    writer:JSONWriter;
    writer.open(path);
    result <- writer;
  } else if ext == ".yml" {
    writer:YAMLWriter;
    writer.open(path);
    result <- writer;
  }
  if !result? {
    error("unrecognized file extension '" + ext + "' in path '" + path +
        "'; supported extensions are '.json' and '.yml'.");
  }
  return result!;
}

/**
 * Write the whole contents of a buffer into a file.
 *
 * - path: Path of the file.
 * - buffer: The contents.
 */
function dump(path:String, buffer:Buffer) {
  let writer <- Writer(path);
  writer.dump(buffer);
  writer.close();
}
