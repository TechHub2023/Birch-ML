/**
 * Read data from a file.
 *
 * ```mermaid
 * classDiagram
 *   class Iterator~Buffer~ {
 *     hasNext() Boolean
 *     next() Buffer
 *   }
 *   Iterator~Buffer~ <|-- Reader
 *   Reader <|-- YAMLReader
 *   Reader <|-- JSONReader
 *   YAMLReader -- JSONReader
 *   link Iterator "../Iterator/"
 *   link Reader "../Reader/"
 *   link YAMLReader "../YAMLReader/"
 *   link JSONReader "../JSONReader/"
 * ```
 *
 * Typical use is to use the `Reader` factory function to instantiate an
 * object of an appropriate derived class based on the file extension of the
 * given path:
 *
 *     let reader <- Reader(path);
 *
 * The whole contents of the file can be read at once with:
 *
 *     let buffer <- reader.slurp();
 *
 * Alternatively, where the root element of the file is an array, the contents
 * may be read sequentially, one element at a time, using the
 * [Iterator](../Iterator/) interface, from which `Reader` derives.
 *
 * Finally, close the file:
 *
 *     reader.close();
 */
abstract class Reader < Iterator<Buffer> {
  /**
   * Open a file.
   *
   * - path: Path of the file.
   */
  abstract function open(path:String);
  
  /**
   * Read the whole contents of the file into a buffer.
   *
   * Returns: Buffer with the file contents.
   */
  abstract function slurp() -> Buffer;
 
  /**
   * Close the file.
   */
  abstract function close();
}

/**
 * Create a reader for a file.
 *
 * - path: Path of the file.
 *
 * Returns: the reader.
 *
 * The file extension of `path` is used to determine the precise type of the
 * returned object. Supported file extension are `.json`, `.yml`, and `.yaml`.
 */
function Reader(path:String) -> Reader {
  let ext <- extension(path);
  result:Reader?;
  if ext == ".json" {
    reader:JSONReader;
    reader.open(path);
    result <- reader;
  } else if ext == ".yml" || ext == ".yaml" {
    reader:YAMLReader;
    reader.open(path);
    result <- reader;
  }
  if !result? {
    error("unrecognized file extension '" + ext + "' in path '" + path +
        "'; supported extensions are '.json', '.yml' and '.yaml'.");
  }
  return result!;
}

/**
 * Read the whole contents of a file into a buffer.
 *
 * - path: Path of the file.
 *
 * Returns: the contents.
 */
function slurp(path:String) -> Buffer {
  let reader <- Reader(path);
  let buffer <- reader.slurp();
  reader.close();
  return buffer;
}
