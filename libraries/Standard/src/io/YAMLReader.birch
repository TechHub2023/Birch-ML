hpp{{
#include <yaml.h>
}}

/**
 * Reader for YAML files.
 */
class YAMLReader < Reader {
  /**
   * The file.
   */
  file:File;

  hpp{{
  yaml_parser_t parser;
  yaml_event_t event;
  }}

  function open(path:String) {
    file <- fopen(path, READ);
  }

  function scan() -> Buffer {
    buffer:Buffer;
    cpp{{
    yaml_parser_initialize(&this->parser);
    yaml_parser_set_input_file(&this->parser, this->file);
    int done = 0;
    while (!done) {
      if (!yaml_parser_parse(&this->parser, &this->event)) {
        error("parse error");
      }
      if (this->event.type == YAML_SEQUENCE_START_EVENT) {
        this->parseSequence(buffer);
      } else if (this->event.type == YAML_MAPPING_START_EVENT) {
        this->parseMapping(buffer);
      } else {
        done = this->event.type == YAML_STREAM_END_EVENT;
        yaml_event_delete(&this->event);
      }
    }
    yaml_parser_delete(&this->parser);
    }}
    return buffer;
  }

  function walk() {
    cpp{{
    bool done = false;
    yaml_parser_initialize(&this->parser);
    yaml_parser_set_input_file(&this->parser, this->file);
    }}
  }

  function hasNext() -> Boolean {
    cpp{{
    bool repeat = false, eof = false;
    do {
      if (!yaml_parser_parse(&this->parser, &this->event)) {
        error("parse error");
      }
      switch (this->event.type) {
        case YAML_SCALAR_EVENT:
        case YAML_SEQUENCE_START_EVENT:
        case YAML_MAPPING_START_EVENT:
          break;
        case YAML_STREAM_END_EVENT:
          eof = true;
          break;
        default:
          yaml_event_delete(&this->event);
          repeat = true;
          break;
      }
    } while (repeat);
    return !eof;
    }}
  }

  function next() -> Buffer {
    buffer:Buffer;
    cpp{{
    switch (this->event.type) {
      case YAML_SCALAR_EVENT:
        this->parseValue(buffer);
        break;
      case YAML_SEQUENCE_START_EVENT:
        this->parseSequence(buffer);
        break;
      case YAML_MAPPING_START_EVENT:
        this->parseMapping(buffer);
        break;
      default:
        /* hasNext() should have dealt with all other events */
        assert(false);
    }
    }}
    return buffer;
  }

  function close() {
    fclose(file);
  }
  
  function parseMapping(buffer:Buffer) {
    cpp{{
    yaml_event_delete(&this->event);
    int done = 0;
    while (!done) {
      /* read one name/value pair on each iteration */
      if (!yaml_parser_parse(&this->parser, &this->event)) {
        error("parse error");
      }
      if (this->event.type == YAML_SCALAR_EVENT) {
        /* key */
        char* data = (char*)this->event.data.scalar.value;
        size_t length = this->event.data.scalar.length;
        std::string key(data, length);
        yaml_event_delete(&this->event);
        
        /* value */
        if (!yaml_parser_parse(&this->parser, &this->event)) {
          error("parse error");
        }
        auto value = birch::Buffer();
        buffer->insert(key, value);
        if (this->event.type == YAML_SCALAR_EVENT) {
          this->parseValue(value);
        } else if (this->event.type == YAML_SEQUENCE_START_EVENT) {
          this->parseSequence(value);
        } else if (this->event.type == YAML_MAPPING_START_EVENT) {
          this->parseMapping(value);
        } else {
          yaml_event_delete(&this->event);
        }
      } else {
        done = this->event.type == YAML_MAPPING_END_EVENT;
        yaml_event_delete(&this->event);
      }
    }
    }}
  }
  
  function parseSequence(buffer:Buffer) {
    cpp{{
    yaml_event_delete(&this->event);
    int done = 0;
    while (!done) {
      if (!yaml_parser_parse(&this->parser, &this->event)) {
        error("parse error");
      }
      if (this->event.type == YAML_SCALAR_EVENT) {
        this->parseElement(buffer);
      } else if (this->event.type == YAML_SEQUENCE_START_EVENT) {
        auto element = birch::Buffer();
        buffer->insert(element);
        this->parseSequence(element);
      } else if (this->event.type == YAML_MAPPING_START_EVENT) {
        auto element = birch::Buffer();
        buffer->insert(element);
        this->parseMapping(element);
      } else {
        done = this->event.type == YAML_SEQUENCE_END_EVENT;
        yaml_event_delete(&this->event);
      }
    }
    }}
  }
  
  function parseValue(buffer:Buffer) {
    cpp{{
    auto data = (char*)this->event.data.scalar.value;
    auto length = this->event.data.scalar.length;
    auto endptr = data;
    auto intValue = int64_t(std::strtoll(data, &endptr, 10));
    if (endptr == data + length) {
      buffer->set(intValue);
    } else {
      auto realValue = std::strtod(data, &endptr);
      if (endptr == data + length) {
        buffer->set(realValue);
      } else if (std::strcmp(data, "true") == 0) {
        buffer->set(true);
      } else if (std::strcmp(data, "false") == 0) {
        buffer->set(false);
      } else if (std::strcmp(data, "null") == 0) {
        buffer->setNil();
      } else if (std::strcmp(data, "Infinity") == 0) {
        buffer->set(std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "-Infinity") == 0) {
        buffer->set(-std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "NaN") == 0) {
        buffer->set(std::numeric_limits<Real>::quiet_NaN());
      } else {
        buffer->set(std::string(data, length));
      }
    }
    yaml_event_delete(&this->event);
    }}
  }

  function parseElement(buffer:Buffer) {
    cpp{{
    auto data = (char*)this->event.data.scalar.value;
    auto length = this->event.data.scalar.length;
    auto endptr = data;
    auto intValue = int64_t(std::strtoll(data, &endptr, 10));
    if (endptr == data + length) {
      buffer->push(intValue);
    } else {
      auto realValue = std::strtod(data, &endptr);
      if (endptr == data + length) {
        buffer->push(realValue);
      } else if (std::strcmp(data, "true") == 0) {
        buffer->push(true);
      } else if (std::strcmp(data, "false") == 0) {
        buffer->push(false);
      } else if (std::strcmp(data, "null") == 0) {
        buffer->pushNil();
      } else if (std::strcmp(data, "Infinity") == 0) {
        buffer->push(std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "-Infinity") == 0) {
        buffer->push(-std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "NaN") == 0) {
        buffer->push(std::numeric_limits<Real>::quiet_NaN());
      } else {
        buffer->push(std::string(data, length));
      }
    }
    yaml_event_delete(&this->event);
    }}
  }
}
