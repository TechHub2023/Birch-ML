/**
 * Input stream. Supports sequential reading only, ignoring white space.
 */
class InputStream {
  /**
   * File handle.
   */
  file:File?;

  /**
   * Open file.
   *
   *   - path: Path.
   *   - mode: Mode. 
   */
  function open(path:String, mode:Integer) {
    assert !(file?);
    file <- fopen(path, mode);
  }

  /**
   * Open file with default mode.
   *
   *   - path: Path.
   */
  function open(path:String) {
    open(path, READ);
  }

  /**
   * Close file.
   */
  function close() {
    assert file?;
    cpp{{
    fclose(file.value());
    }}
    file <- nil;
  }

  /**
   * Check for end-of-file.
   */
  function eof() -> Boolean {
    assert file?;
    cpp{{
    return feof(file.value());
    }}
  }

  /**
   * Read integer.
   */
  function scanInteger() -> Integer? {
    assert file?;
    x:Integer?;
    cpp{{
    long long int y;  // ensure fscanf gets exactly the type it expects
    auto res = ::fscanf(this->file.value(), "%lld", &y);
    if (res == 1) {
      x = (Integer)y;
    } 
    }}
    return x;
  }

  /**
   * Read real.
   */
  function scanReal() -> Real? {
    assert file?;
    x:Real?;
    y:Real;
    cpp{{
    #ifdef BIRCH_SINGLE
    auto res = ::fscanf(this->file.value(), "%f", &y);
    #else
    auto res = ::fscanf(this->file.value(), "%lf", &y);
    #endif
    if (res == 1) {
      x = y;
    } 
    }}
    return x;
  }
}

/**
 * Create an input stream from an already-open file.
 */
function make_input_stream(file:File) -> InputStream {
  o:InputStream;
  o.file <- file;
  return o;
}
