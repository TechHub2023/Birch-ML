/**
 * Random variate.
 *
 * - Value: Value type.
 *
 * Random objects, like all [Expression](../../classes/Expression/) objects,
 * are stateful. Random objects in the pilot state are considered
 * *variables*, meaning that a call to `grad()` will compute gradients with
 * respect to them, and a further call to `move()` will apply a Markov kernel
 * to update their value. Random objects in the value state are considered
 * *constants*.
 */
final class Random<Value> < Expression<Value>(nil, false) {  
  /**
   * Value assignment.
   */
  operator <- x:Value! {
    assert !this.hasValue();
    prune();
    this.x <- x;
    if this.child? {
      handle_delay_observe(this);
    }
    this.constant();
  }

  /**
   * Value assignment.
   */
  function set(x:Value!) {
    assert !this.hasValue();
    this.x <- x;
    this.g <- nil;
  }

  override function isRandom() -> Boolean {
    return true;
  }

  override function doEval() {
    assert !this.x?;
    prune();
    handle_delay_simulate(this);
    assert this.x?;
  }

  override function doMove(visitor:MoveVisitor) {
    assert this.x?;
    visitor.visit(this);
  }

  override function doArgs(visitor:ArgsVisitor) {
    visitor.visit(this);
  }

  override function prune() -> Delay {
    if this.isInternal() {
      let p <- this.child!.prune();
      this.graft(p);
      p.graft(this);
      if this.partner? {
        /* restore the $M$-path between this and the partner */
        this.partner!.graft(p);
        this.partner!.partner <- nil;
        this.partner <- nil;
      }
    } else if this.partner? {
      /* defer to partner */
      this.partner!.prune();
    }
    assert !this.partner?;
    return this;
  }

  /**
   * Does this have a distribution?
   */
  function hasDistribution() -> Boolean {
    return this.child?;
  }

  /**
   * Get the distribution.
   */
  function getDistribution() -> Distribution<Value> {
    assert this.child?;
    prune();
    let p <- Distribution<Value>?(this.child);
    assert p?;
    return p!;
  }

  function hasGaussian() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isGaussian();
  }

  function getGaussian() -> (Expression<Real>, Expression<Real>) {
    return this.getDistribution().getGaussian()!;
  }

  function hasBeta() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isBeta();
  }

  function getBeta() -> (Expression<Real>, Expression<Real>) {
    return this.getDistribution().getBeta()!;
  }

  function hasGamma() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isGamma();
  }

  function getGamma() -> (Expression<Real>, Expression<Real>) {
    return this.getDistribution().getGamma()!;
  }

  function hasInverseGamma() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isInverseGamma();
  } 

  function getInverseGamma() -> (Expression<Real>, Expression<Real>) {
    return this.getDistribution().getInverseGamma()!;
  }

  function hasInverseWishart() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isInverseWishart();
  } 

  function getInverseWishart() -> (Expression<Real[_,_]>, Expression<Real>) {
    return this.getDistribution().getInverseWishart()!;
  } 

  function hasNormalInverseGamma() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isNormalInverseGamma();
  }

  function getNormalInverseGamma() -> (Expression<Real>, Expression<Real>,
      Expression<Real>, Expression<Real>) {
    return this.getDistribution().getNormalInverseGamma()!;
  }

  function hasDirichlet() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isDirichlet();
  }

  function getDirichlet() -> Expression<Real[_]> {
    return this.getDistribution().getDirichlet()!;
  }

  function hasRestaurant() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isRestaurant();
  }

  function getRestaurant() -> (Expression<Real>, Expression<Real>,
      Expression<Integer[_]>) {
    return this.getDistribution().getRestaurant()!;
  }

  function hasMultivariateGaussian() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isMultivariateGaussian();
  }

  function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>) {
    return this.getDistribution().getMultivariateGaussian()!;
  }

  function hasMultivariateNormalInverseGamma() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isMultivariateNormalInverseGamma();
  }

  function getMultivariateNormalInverseGamma() -> (Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real>, Expression<Real>) {
    return this.getDistribution().getMultivariateNormalInverseGamma()!;
  }

  function hasMultivariateNormalInverseWishart() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isMultivariateNormalInverseWishart();
  }

  function getMultivariateNormalInverseWishart() -> (Expression<Real[_]>,
      Expression<Real>, Expression<Real[_,_]>, Expression<Real>) {
    return this.getDistribution().getMultivariateNormalInverseWishart()!;
  }

  function hasMatrixGaussian() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isMatrixGaussian();
  }

  function getMatrixGaussian() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>) {
    return this.getDistribution().getMatrixGaussian()!;
  }

  function hasMatrixNormalInverseWishart() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isMatrixNormalInverseWishart();
  }

  function getMatrixNormalInverseWishart() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>) {
    return this.getDistribution().getMatrixNormalInverseWishart()!;
  }

  function hasDiscrete() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isDiscrete();
  }

  function getDiscrete() -> DiscreteDistribution {
    return this.getDistribution().getDiscrete()!;
  }

  function hasBoundedDiscrete() -> Boolean {
    return !this.hasValue() && this.hasDistribution() &&
        this.getDistribution().isBoundedDiscrete();
  }

  function getBoundedDiscrete() -> BoundedDiscreteDistribution {
    return this.getDistribution().getBoundedDiscrete()!;
  }

  override function read(buffer:Buffer) {
    this <-? buffer.get<Value>();
  }

  override function write(buffer:Buffer) {
    if this.hasValue() || this.hasDistribution() {
      buffer.set(this.value()!);
    } else {
      buffer.setNil();
    }
  }
}

/**
 * Create a Random.
 */
function make_random<Value>() -> Random<Value> {
  o:Random<Value>;
  return o;
}

/**
 * Box a value in a Random.
 *
 * - x: Value to assign.
 */
function make_random<Value>(x:Value) -> Random<Value> {
  o:Random<Value>;
  o <- x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * - x: Value to assign.
 */
function make_random<Value>(x:Value?) -> Random<Value> {
  o:Random<Value>;
  o <-? x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * - x: Value to assign.
 */
function make_random<Value>(x:Value!) -> Random<Value> {
  o:Random<Value>;
  o <- x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * - x: Optional value to assign.
 */
function make_random<Value>(x:Value!?) -> Random<Value> {
  o:Random<Value>;
  if x? {
    o <- x!;
  }
  return o;
}

/**
 * Box a value in a Random (identity operation).
 *
 * - x: Existing object.
 */
function make_random<Value>(x:Random<Value>) -> Random<Value> {
  return x;
}
