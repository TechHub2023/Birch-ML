/**
 * Random variate.
 *
 * - Value: Value type.
 *
 * Random objects, like all [Expression](../../classes/Expression/) objects,
 * are stateful. Random objects in the pilot state are considered
 * *variables*, meaning that a call to `grad()` will compute gradients with
 * respect to them, and a further call to `move()` will apply a Markov kernel
 * to update their value. Random objects in the value state are considered
 * *constants*.
 */
final class Random<Value> < Expression<Value> {  
  /**
   * Associated distribution.
   */
  p:Distribution<Value>?;
  
  /**
   * Accumulated gradient.
   */
  d:Value?;

  /**
   * Value assignment.
   */
  operator <- x:Value {
    assert !this.p?;
    setValue(x);
  }

  override function isRandom() -> Boolean {
    return true;
  }

  /**
   * Does this have a distribution?
   */
  function hasDistribution() -> Boolean {
    return p?;
  }

  /**
   * Get the distribution.
   */
  function getDistribution() -> Distribution<Value> {
    return p!;
  }

  /**
   * Does this have a gradient?
   */
  function hasGradient() -> Boolean {
    return d?;
  }

  /**
   * Get the gradient of an evaluated function with respect to this random
   * variable at its current value.
   */
  function getGradient() -> Value {
    return d!;
  }

  /**
   * Assume the distribution for the random variate. When a value for the
   * random variate is required, it will be simulated from this distribution
   * and trigger an *update* on the delayed sampling graph.
   *
   * - p: The distribution.
   */
  function assume(p:Distribution<Value>) {
    assert !this.p?;
    assert !this.x?;
    p.assume(this);
    this.p <- p;
  }

  override function doDepth() -> Integer {
    return 1;
  }
  
  override function doRows() -> Integer {
    return p!.rows();
  }

  override function doColumns() -> Integer {
    return p!.columns();
  }

  override function doValue() {
    //
  }

  override function doEval(gen:Integer) {
    //
  }

  override function doReval(gen:Integer) {
    //
  }

  override function doCompute() {
    if !hasValue() {
      x <- handle_realize(p!);
    }
  }

  function doAccumulateGrad(d:Value) {
    // ^ override is omitted from the declaration as Value is not necessarily
    //   one of the supported gradient types in Expression (and need not be
    //   for this to work correctly)
    if this.d? {
      this.d <- this.d! + d;
    } else {
      this.d <- d;
    }
  }

  override function doGrad(gen:Integer) {
    //  
  }

  override function doClearGrad() {
    d <- nil;
  }
  
  override function doConstant() {
    p <- nil;
  }

  override function graftGaussian() -> Gaussian? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftGaussian();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }
    
  override function graftBeta() -> Beta? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftBeta();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }
  
  override function graftGamma() -> Gamma? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftGamma();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }
  
  override function graftInverseGamma() -> InverseGamma? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftInverseGamma();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  } 

  override function graftInverseWishart() -> InverseWishart? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftInverseWishart();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  } 
  
  override function graftNormalInverseGamma(compare:Distribution<Real>) -> NormalInverseGamma? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftNormalInverseGamma(compare);
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }
  
  override function graftDirichlet() -> Dirichlet? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftDirichlet();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftRestaurant() -> Restaurant? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftRestaurant();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftMultivariateGaussian() -> MultivariateGaussian? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftMultivariateGaussian();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      MultivariateNormalInverseGamma? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftMultivariateNormalInverseGamma(compare);
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftMatrixGaussian() -> MatrixGaussian? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftMatrixGaussian();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      MatrixNormalInverseWishart? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftMatrixNormalInverseWishart(compare);
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftDiscrete() -> Discrete? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftDiscrete();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function graftBoundedDiscrete() -> BoundedDiscrete? {
    if !(hasValue() || p!.hasClamp()) {
      let q <- p!.graftBoundedDiscrete();
      p <-? Distribution<Value>?(q);
      return q;
    }
    return nil;
  }

  override function read(buffer:Buffer) {
    this <-? buffer.get<Value>();
  }

  override function write(buffer:Buffer) {
    if hasValue() || hasDistribution() {
      buffer.set(value());
    } else {
      buffer.setNil();
    }
  }
}

/**
 * Create a Random.
 */
function Random<Value>() -> Random<Value> {
  o:Random<Value>;
  return o;
}

/**
 * Create a Random.
 *
 * - x: Value to assign.
 */
function Random<Value>(x:Value) -> Random<Value> {
  o:Random<Value>;
  o <- x;
  return o;
}

/**
 * Create a Random.
 *
 * - x: Optional value to assign.
 */
function Random<Value>(x:Value?) -> Random<Value> {
  o:Random<Value>;
  if x? {
    o <- x!;
  }
  return o;
}
