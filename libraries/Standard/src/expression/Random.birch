/**
 * Random variate.
 *
 * @param Value Value type.
 *
 * Random objects, like all [Expression](../../classes/Expression/) objects,
 * are stateful. Random objects in the pilot state are considered
 * *variables*, meaning that a call to `grad()` will compute gradients with
 * respect to them, and a further call to `move()` will apply a Markov kernel
 * to update their value. Random objects in the value state are considered
 * *constants*.
 */
final class Random<Value> < Expression<Value>(nil, false) {  
  /**
   * Value assignment.
   */
  operator <- x:Value! {
    this.set(x);
    if this.hasDistribution() {
      handle_delay_observe(this);
    }
    this.constant();
  }

  /**
   * Value assignment.
   */
  function set(x:Value!) {
    assert !this.hasValue();
    this.x <- x;
    this.g <- nil;
  }

  /**
   * Does this have a distribution?
   */
  function hasDistribution() -> Boolean {
    return this.hasNext() && Distribution<Value>?(this.getNext())?;
  }

  /**
   * Get the distribution.
   */
  function getDistribution() -> Distribution<Value> {
    assert hasDistribution();
    return Distribution<Value>?(this.getNext())!;
  }

  override function isRandom() -> Boolean {
    return true;
  }

  override function doEval() {
    assert !this.x?;
    this.prune();
    handle_delay_simulate(this);
    assert this.x?;
  }

  override function doMove(visitor:MoveVisitor) {
    assert this.x?;
    visitor.visit(this);
  }

  override function doArgs(visitor:ArgsVisitor) {
    visitor.visit(this);
  }

  override function prune() -> Delay {
    if this.hasSide() && !this.hasNext() {
      /* first defer to partner to restore $M$-path */
      this.getSide().prune();
    }
    if this.isInternal() {
      let p <- this.getNext().prune();
      this.setNext(p);
      p.setNext(this);
      if this.hasSide() {
        /* restore the $M$-path between this and the partner */
        this.getSide().setNext(p);
        this.getSide().setSide(nil);
        this.setSide(nil);
      }
    }
    return this;
  }

  override function read(buffer:Buffer) {
    this <-? buffer.get<Value>();
  }

  override function write(buffer:Buffer) {
    if this.hasValue() || this.hasDistribution() {
      buffer.set(this.value()!);
    } else {
      buffer.setNil();
    }
  }
}

/**
 * Create a Random.
 */
function make_random<Value>() -> Random<Value> {
  o:Random<Value>;
  return o;
}

/**
 * Box a value in a Random.
 *
 * @param x Value to assign.
 */
function make_random<Value>(x:Value) -> Random<Value> {
  o:Random<Value>;
  o <- x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * @param x Value to assign.
 */
function make_random<Value>(x:Value?) -> Random<Value> {
  o:Random<Value>;
  o <-? x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * @param x Value to assign.
 */
function make_random<Value>(x:Value!) -> Random<Value> {
  o:Random<Value>;
  o <- x;
  return o;
}

/**
 * Box a value in a Random.
 *
 * @param x Optional value to assign.
 */
function make_random<Value>(x:Value!?) -> Random<Value> {
  o:Random<Value>;
  if x? {
    o <- x!;
  }
  return o;
}

/**
 * Box a value in a Random (identity operation).
 *
 * @param x Existing object.
 */
function make_random<Value>(x:Random<Value>) -> Random<Value> {
  return x;
}
