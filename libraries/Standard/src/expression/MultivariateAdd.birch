/**
 * Lazy multivariate add.
 */
final class MultivariateAdd(l:Expression<Real[_]>, r:Expression<Real[_]>) <
    MultivariateBinaryExpression<Expression<Real[_]>,Expression<Real[_]>,
    Real[_]>(l, r) {  
  override function doRows() -> Integer {
    return global.rows(l!);
  }

  override function doCompute() {
    x <- global.eval(l!) + global.eval(r!);
  }

  override function doGrad(gen:Integer) {
    count_grad(l!, gen, d!);
    count_grad(r!, gen, d!);
  }

  override function graftLinearMultivariateGaussian() ->
      TransformLinearMultivariate<MultivariateGaussian>? {
    t:TransformLinearMultivariate<MultivariateGaussian>?;
    if !hasValue() {
      x1:MultivariateGaussian?;

      if (t <- graft_linear_multivariate_gaussian(l!))? {
        t!.add(r!);
      } else if (t <- graft_linear_multivariate_gaussian(r!))? {
        t!.add(l!);
      } else if (x1 <- graft_multivariate_gaussian(l!))? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(
            box(identity(global.rows(r!))), x1!, r!);
      } else if (x1 <- graft_multivariate_gaussian(r!))? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(
            box(identity(global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }
  
  override function graftLinearMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      TransformLinearMultivariate<MultivariateNormalInverseGamma>? {
    t:TransformLinearMultivariate<MultivariateNormalInverseGamma>?;
    if !hasValue() {
      x1:MultivariateNormalInverseGamma?;

      if (t <- graft_linear_multivariate_normal_inverse_gamma(l!, compare))? {
        t!.add(r!);
      } else if (t <- graft_linear_multivariate_normal_inverse_gamma(r!, compare))? {
        t!.add(l!);
      } else if (x1 <- graft_multivariate_normal_inverse_gamma(l!, compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(
            box(identity(global.rows(r!))), x1!, r!);
      } else if (x1 <- graft_multivariate_normal_inverse_gamma(r!, compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(
            box(identity(global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }

  override function graftDotMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformDotMultivariate<MatrixNormalInverseWishart>? {
    t:TransformDotMultivariate<MatrixNormalInverseWishart>?;
    if !hasValue() {
      if (t <- graft_dot_matrix_normal_inverse_wishart(l!, compare))? {
        t!.add(r!);
      } else if (t <- graft_dot_matrix_normal_inverse_wishart(r!, compare))? {
        t!.add(l!);
      }
    }
    return t;
  }
}

/**
 * Lazy multivariate add.
 */
operator (l:Expression<Real[_]> + r:Expression<Real[_]>) -> MultivariateAdd {
  assert global.rows(l) == global.rows(r);
  return construct<MultivariateAdd>(l, r);
}

/**
 * Lazy multivariate add.
 */
operator (l:Real[_] + r:Expression<Real[_]>) -> MultivariateAdd {
  return box(l) + r;
}

/**
 * Lazy multivariate add.
 */
operator (l:Expression<Real[_]> + r:Real[_]) -> MultivariateAdd {
  return l + box(r);
}
