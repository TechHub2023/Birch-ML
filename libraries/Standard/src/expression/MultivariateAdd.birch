/**
 * Lazy multivariate add.
 */
final class MultivariateAdd(l:Expression<Real[_]>, r:Expression<Real[_]>) <
    MultivariateBinaryExpression<Expression<Real[_]>,Expression<Real[_]>,
    Real[_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }

  override function doCompute() {
    x <- l!.eval() + r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!);
    r!.countGrad(gen, d!);
  }

  override function graftLinearMultivariateGaussian() ->
      TransformLinearMultivariate<MultivariateGaussian>? {
    t:TransformLinearMultivariate<MultivariateGaussian>?;
    if !hasValue() {
      x1:MultivariateGaussian?;

      if (t <- l!.graftLinearMultivariateGaussian())? {
        t!.add(r!);
      } else if (t <- r!.graftLinearMultivariateGaussian())? {
        t!.add(l!);
      } else if (x1 <- l!.graftMultivariateGaussian())? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(
            box(identity(r!.rows())), x1!, r!);
      } else if (x1 <- r!.graftMultivariateGaussian())? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(
            box(identity(r!.rows())), x1!, l!);
      }
    }
    return t;
  }
  
  override function graftLinearMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      TransformLinearMultivariate<MultivariateNormalInverseGamma>? {
    t:TransformLinearMultivariate<MultivariateNormalInverseGamma>?;
    if !hasValue() {
      x1:MultivariateNormalInverseGamma?;

      if (t <- l!.graftLinearMultivariateNormalInverseGamma(compare))? {
        t!.add(r!);
      } else if (t <- r!.graftLinearMultivariateNormalInverseGamma(compare))? {
        t!.add(l!);
      } else if (x1 <- l!.graftMultivariateNormalInverseGamma(compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(
            box(identity(r!.rows())), x1!, r!);
      } else if (x1 <- r!.graftMultivariateNormalInverseGamma(compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(
            box(identity(r!.rows())), x1!, l!);
      }
    }
    return t;
  }

  override function graftDotMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformDotMultivariate<MatrixNormalInverseWishart>? {
    t:TransformDotMultivariate<MatrixNormalInverseWishart>?;
    if !hasValue() {
      if (t <- l!.graftDotMatrixNormalInverseWishart(compare))? {
        t!.add(r!);
      } else if (t <- r!.graftDotMatrixNormalInverseWishart(compare))? {
        t!.add(l!);
      }
    }
    return t;
  }
}

/**
 * Lazy multivariate add.
 */
operator (l:Expression<Real[_]> + r:Expression<Real[_]>) -> MultivariateAdd {
  assert l.rows() == r.rows();
  return construct<MultivariateAdd>(l, r);
}

/**
 * Lazy multivariate add.
 */
operator (l:Real[_] + r:Expression<Real[_]>) -> MultivariateAdd {
  return box(l) + r;
}

/**
 * Lazy multivariate add.
 */
operator (l:Expression<Real[_]> + r:Real[_]) -> MultivariateAdd {
  return l + box(r);
}
