/**
 * Lazy negation.
 */
final class MatrixNegate(m:Expression<Real[_,_]>) <
    MatrixUnaryExpression<Expression<Real[_,_]>,Real[_,_]>(m) {
  override function doRows() -> Integer {
    return global.rows(m!);
  }
  
  override function doColumns() -> Integer {
    return global.columns(m!);
  }

  override function doCompute() {
    x <- -global.eval(m!);
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, -d!);
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (t <- graft_linear_matrix_gaussian(m!))? {
        t!.negate();
      } else if (x1 <- graft_matrix_gaussian(m!))? {
        let R <- global.rows(x1!);
        let C <- global.columns(x1!);
        t <- TransformLinearMatrix<MatrixGaussian>(diagonal(box(-1.0), R),
            x1!, box(matrix(0.0, R, C)));
      }
    }
    return t;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    x1:MatrixNormalInverseWishart?;

    if (t <- graft_linear_matrix_normal_inverse_wishart(m!, compare))? {
      t!.negate();
    } else if (x1 <- graft_matrix_normal_inverse_wishart(m!, compare))? {
      let R <- global.rows(x1!);
      let C <- global.columns(x1!);
      t <- TransformLinearMatrix<MatrixNormalInverseWishart>(
          diagonal(box(-1.0), R), x1!, box(matrix(0.0, R, C)));
    }
    return t;
  }
}

/**
 * Lazy negation.
 */
operator (-m:Expression<Real[_,_]>) -> MatrixNegate {
  return construct<MatrixNegate>(m);
}
