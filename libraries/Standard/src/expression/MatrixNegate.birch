/**
 * Lazy negation.
 */
acyclic class MatrixNegate(y:Expression<Real[_,_]>) <
    MatrixUnaryExpression<Expression<Real[_,_]>,Real[_,_],Real[_,_],
    Real[_,_]>(y) {
  override function doRows() -> Integer {
    return y!.rows();
  }
  
  override function doColumns() -> Integer {
    return y!.columns();
  }

  override function doEvaluate(y:Real[_,_]) -> Real[_,_] {
    return -y;
  }

  override function doEvaluateGrad(d:Real[_,_], x:Real[_,_], y:Real[_,_]) ->
      Real[_,_] {
    return -d;
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    r:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (r <- y!.graftLinearMatrixGaussian())? {
        r!.negate();
      } else if (x1 <- y!.graftMatrixGaussian())? {
        let R <- x1!.rows();
        let C <- x1!.columns();
        r <- TransformLinearMatrix<MatrixGaussian>(diagonal(box(-1.0), R),
            x1!, box(matrix(0.0, R, C)));
      }
    }
    return r;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    r:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    x1:MatrixNormalInverseWishart?;

    if (r <- y!.graftLinearMatrixNormalInverseWishart(compare))? {
      r!.negate();
    } else if (x1 <- y!.graftMatrixNormalInverseWishart(compare))? {
      let R <- x1!.rows();
      let C <- x1!.columns();
      r <- TransformLinearMatrix<MatrixNormalInverseWishart>(
          diagonal(box(-1.0), R), x1!, box(matrix(0.0, R, C)));
    }
    return r;
  }
}

/**
 * Lazy negation.
 */
operator (-y:Expression<Real[_,_]>) -> MatrixNegate {
  return construct<MatrixNegate>(y);
}
