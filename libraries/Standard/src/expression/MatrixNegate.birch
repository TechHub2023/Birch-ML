/**
 * Lazy negation.
 */
final class MatrixNegate(m:Expression<Real[_,_]>) <
    MatrixUnaryExpression<Expression<Real[_,_]>,Real[_,_]>(m) {
  override function doRows() -> Integer {
    return m!.rows();
  }
  
  override function doColumns() -> Integer {
    return m!.columns();
  }

  override function doCompute() {
    x <- -m!.eval();
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, -d!);
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (t <- m!.graftLinearMatrixGaussian())? {
        t!.negate();
      } else if (x1 <- m!.graftMatrixGaussian())? {
        let R <- x1!.rows();
        let C <- x1!.columns();
        t <- TransformLinearMatrix<MatrixGaussian>(diagonal(box(-1.0), R),
            x1!, box(matrix(0.0, R, C)));
      }
    }
    return t;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    x1:MatrixNormalInverseWishart?;

    if (t <- m!.graftLinearMatrixNormalInverseWishart(compare))? {
      t!.negate();
    } else if (x1 <- m!.graftMatrixNormalInverseWishart(compare))? {
      let R <- x1!.rows();
      let C <- x1!.columns();
      t <- TransformLinearMatrix<MatrixNormalInverseWishart>(
          diagonal(box(-1.0), R), x1!, box(matrix(0.0, R, C)));
    }
    return t;
  }
}

/**
 * Lazy negation.
 */
operator (-m:Expression<Real[_,_]>) -> MatrixNegate {
  return construct<MatrixNegate>(m);
}
