/**
 * Lazy add.
 */
final class Add(l:Expression<Real>, r:Expression<Real>) <
    ScalarBinaryExpression<Expression<Real>,Expression<Real>,Real>(l, r) {  
  override function doCompute() {
    x <- l!.eval() + r!.eval();
  }
  
  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!);
    r!.countGrad(gen, d!);
  }

  override function graftLinearGaussian() -> TransformLinear<Gaussian>? {
    t:TransformLinear<Gaussian>?;
    if !hasValue() {
      x1:Gaussian?;
      if (t <- l!.graftLinearGaussian())? {
        t!.add(r!);
      } else if (t <- r!.graftLinearGaussian())? {
        t!.add(l!);
      } else if (x1 <- l!.graftGaussian())? {
        t <- TransformLinear<Gaussian>(box(1.0), x1!, r!);
      } else if (x1 <- r!.graftGaussian())? {
        t <- TransformLinear<Gaussian>(box(1.0), x1!, l!);
      }
    }
    return t;
  }

  override function graftDotMultivariateGaussian() ->
      TransformDot<MultivariateGaussian>? {
    t:TransformDot<MultivariateGaussian>?;
    if !hasValue() {
      if (t <- l!.graftDotMultivariateGaussian())? {
        t!.add(r!);
      } else if (t <- r!.graftDotMultivariateGaussian())? {
        t!.add(l!);
      }
    }
    return t;
  }
  
  override function graftLinearNormalInverseGamma(compare:Distribution<Real>) ->
      TransformLinear<NormalInverseGamma>? {
    t:TransformLinear<NormalInverseGamma>?;
    x1:NormalInverseGamma?;
    if !hasValue() {
      if (t <- l!.graftLinearNormalInverseGamma(compare))? {
        t!.add(r!);
      } else if (t <- r!.graftLinearNormalInverseGamma(compare))? {
        t!.add(l!);
      } else if (x1 <- l!.graftNormalInverseGamma(compare))? {
        t <- TransformLinear<NormalInverseGamma>(box(1.0), x1!, r!);
      } else if (x1 <- r!.graftNormalInverseGamma(compare))? {
        t <- TransformLinear<NormalInverseGamma>(box(1.0), x1!, l!);
      }
    }
    return t;
  }

  override function graftDotMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      TransformDot<MultivariateNormalInverseGamma>? {
    t:TransformDot<MultivariateNormalInverseGamma>?;
    if !hasValue() {
      if (t <- l!.graftDotMultivariateNormalInverseGamma(compare))? {
        t!.add(r!);
      } else if (t <- r!.graftDotMultivariateNormalInverseGamma(compare))? {
        t!.add(l!);
      }
    }
    return t;
  }
}

/**
 * Lazy add.
 */
operator (l:Expression<Real> + r:Expression<Real>) -> Add {
  return construct<Add>(l, r);
}

/**
 * Lazy add.
 */
operator (l:Real + r:Expression<Real>) -> Add {
  return box(l) + r;
}

/**
 * Lazy add.
 */
operator (l:Expression<Real> + r:Real) -> Add {
  return l + box(r);
}
