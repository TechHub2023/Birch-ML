/**
 * Lazy negation.
 */
final class DiscreteNegate(m:Expression<Integer>) <
    ScalarUnaryExpression<Expression<Integer>,Integer>(m) {
  override function doCompute() {
    x <- -m!.eval();
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, -d!);
  }

  override function graftDiscrete() -> Discrete? {
    t:Discrete?;
    if !hasValue() {
      t <- graftBoundedDiscrete();
      if !t? {
        m1:Discrete?;
        if (m1 <- m!.graftDiscrete())? {
          t <- LinearDiscrete(box(-1), m1!, box(0));
        }
      }
    }
    return t;
  }

  override function graftBoundedDiscrete() -> BoundedDiscrete? {
    t:BoundedDiscrete?;
    if !hasValue() {
      m1:BoundedDiscrete?;
      if (m1 <- m!.graftBoundedDiscrete())? {
        t <- LinearBoundedDiscrete(box(-1), m1!, box(0));
      }
    }
    return t;
  }
}

/**
 * Lazy negation.
 */
operator (-x:Expression<Integer>) -> DiscreteNegate {
  return construct<DiscreteNegate>(x);
}
