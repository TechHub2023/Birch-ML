/**
 * Lazy matrix subtract.
 */
class MatrixSubtract(y:Expression<Real[_,_]>,
    z:Expression<Real[_,_]>) < MatrixBinaryExpression<Expression<Real[_,_]>,
    Expression<Real[_,_]>,Real[_,_],Real[_,_],Real[_,_],Real[_,_],
    Real[_,_]>(y, z) {  
  override function doRows() -> Integer {
    return y!.rows();
  }
  
  override function doColumns() -> Integer {
    return y!.columns();
  }

  override function doEvaluate(y:Real[_,_], z:Real[_,_]) -> Real[_,_] {
    return y - z;
  }

  override function doEvaluateGradLeft(d:Real[_,_], x:Real[_,_], y:Real[_,_],
      z:Real[_,_]) -> Real[_,_] {
    return d;
  }

  override function doEvaluateGradRight(d:Real[_,_], x:Real[_,_], y:Real[_,_],
      z:Real[_,_]) -> Real[_,_] {
    return -d;
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    r:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (r <- y!.graftLinearMatrixGaussian())? {
        r!.subtract(z!);
      } else if (r <- z!.graftLinearMatrixGaussian())? {
        r!.negateAndAdd(y!);
      } else if (x1 <- y!.graftMatrixGaussian())? {
        r <- TransformLinearMatrix<MatrixGaussian>(box(identity(x1!.rows())), x1!, -z!);
      } else if (x1 <- z!.graftMatrixGaussian())? {
        r <- TransformLinearMatrix<MatrixGaussian>(box(diagonal(-1.0, x1!.rows())), x1!, y!);
      }
    }
    return r;
  }
  
  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    r:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (r <- y!.graftLinearMatrixNormalInverseWishart(compare))? {
        r!.subtract(z!);
      } else if (r <- z!.graftLinearMatrixNormalInverseWishart(compare))? {
        r!.negateAndAdd(y!);
      } else if (x1 <- y!.graftMatrixNormalInverseWishart(compare))? {
        r <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(identity(x1!.rows())), x1!, -z!);
      } else if (x1 <- z!.graftMatrixNormalInverseWishart(compare))? {
        r <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(diagonal(-1.0, x1!.rows())), x1!, y!);
      }
    }
    return r;
  }
}

/**
 * Lazy matrix subtract.
 */
operator (y:Expression<Real[_,_]> - z:Expression<Real[_,_]>) ->
    MatrixSubtract {
  assert y.rows() == z.rows();
  assert y.columns() == z.columns();
  return construct<MatrixSubtract>(y, z);
}

/**
 * Lazy matrix subtract.
 */
operator (y:Real[_,_] - z:Expression<Real[_,_]>) -> MatrixSubtract {
  return box(y) - z;
}

/**
 * Lazy matrix subtract.
 */
operator (y:Expression<Real[_,_]> - z:Real[_,_]) -> MatrixSubtract {
  return y - box(z);
}
