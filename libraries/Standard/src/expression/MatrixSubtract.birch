/**
 * Lazy matrix subtract.
 */
final class MatrixSubtract(l:Expression<Real[_,_]>, r:Expression<Real[_,_]>) <
    MatrixBinaryExpression<Expression<Real[_,_]>,Expression<Real[_,_]>,
    Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return l!.columns();
  }

  override function doCompute() {
    x <- l!.eval() - r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!);
    r!.countGrad(gen, -d!);
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (t <- l!.graftLinearMatrixGaussian())? {
        t!.subtract(r!);
      } else if (t <- r!.graftLinearMatrixGaussian())? {
        t!.negateAndAdd(l!);
      } else if (x1 <- l!.graftMatrixGaussian())? {
        t <- TransformLinearMatrix<MatrixGaussian>(box(identity(x1!.rows())), x1!, -r!);
      } else if (x1 <- r!.graftMatrixGaussian())? {
        t <- TransformLinearMatrix<MatrixGaussian>(box(diagonal(-1.0, x1!.rows())), x1!, l!);
      }
    }
    return t;
  }
  
  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (t <- l!.graftLinearMatrixNormalInverseWishart(compare))? {
        t!.subtract(r!);
      } else if (t <- r!.graftLinearMatrixNormalInverseWishart(compare))? {
        t!.negateAndAdd(l!);
      } else if (x1 <- l!.graftMatrixNormalInverseWishart(compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(identity(x1!.rows())), x1!, -r!);
      } else if (x1 <- r!.graftMatrixNormalInverseWishart(compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(diagonal(-1.0, x1!.rows())), x1!, l!);
      }
    }
    return t;
  }
}

/**
 * Lazy matrix subtract.
 */
operator (l:Expression<Real[_,_]> - r:Expression<Real[_,_]>) ->
    MatrixSubtract {
  assert l.rows() == r.rows();
  assert l.columns() == r.columns();
  return construct<MatrixSubtract>(l, r);
}

/**
 * Lazy matrix subtract.
 */
operator (l:Real[_,_] - r:Expression<Real[_,_]>) -> MatrixSubtract {
  return box(l) - r;
}

/**
 * Lazy matrix subtract.
 */
operator (l:Expression<Real[_,_]> - r:Real[_,_]) -> MatrixSubtract {
  return l - box(r);
}
