/**
 * Lazy matrix solve.
 */
final class MatrixSolve<Left>(l:Left, r:Expression<Real[_,_]>) <
    MatrixBinaryExpression<Left,Expression<Real[_,_]>,Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return r!.columns();
  }

  override function doCompute() {
    x <- solve(l!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    let l1 <- l!.eval();
    let r1 <- r!.eval();
    let z <- solve(transpose(l1), d!);
    l!.countGrad(gen, -z*transpose(solve(l1, r1)));
    r!.countGrad(gen, z);
  }
}

/**
 * Lazy solve.
 */
function solve(l:Expression<Real[_,_]>, r:Expression<Real[_,_]>) ->
    MatrixSolve<Expression<Real[_,_]>> {
  assert l.columns() == r.rows();
  return construct<MatrixSolve<Expression<Real[_,_]>>>(l, r);
}

/**
 * Lazy solve.
 */
function solve(l:Real[_,_], r:Expression<Real[_,_]>) ->
    MatrixSolve<Expression<Real[_,_]>> {
  return solve(box(l), r);
}

/**
 * Lazy solve.
 */
function solve(l:Expression<Real[_,_]>, r:Real[_,_]) ->
    MatrixSolve<Expression<Real[_,_]>> {
  return solve(l, box(r));
}

/**
 * Lazy solve.
 */
function solve(l:Expression<LLT>, r:Expression<Real[_,_]>) ->
    MatrixSolve<Expression<LLT>> {
  assert l.columns() == r.rows();
  return construct<MatrixSolve<Expression<LLT>>>(l, r);
}

/**
 * Lazy solve.
 */
function solve(l:LLT, r:Expression<Real[_,_]>) ->
    MatrixSolve<Expression<LLT>> {
  return solve(box(l), r);
}

/**
 * Lazy solve.
 */
function solve(l:Expression<LLT>, r:Real[_,_]) ->
    MatrixSolve<Expression<LLT>> {
  return solve(l, box(r));
}
