/**
 * Lazy matrix pack.
 */
final class MatrixPack(l:Expression<Real[_,_]>, r:Expression<Real[_,_]>) <
    MatrixBinaryExpression<Expression<Real[_,_]>,Expression<Real[_,_]>,
    Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return l!.columns() + r!.columns();
  }

  override function doCompute() {
    x <- pack(l!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    let r1 <- global.rows(l!.eval());
    let c1 <- global.columns(l!.eval());
    let c2 <- global.columns(r!.eval());
    l!.countGrad(gen, d![1..r1, 1..c1]);
    r!.countGrad(gen, d![1..r1, (c1 + 1)..(c1 + c2)]);
  }
}

/**
 * Lazy matrix pack.
 */
function pack(l:Expression<Real[_,_]>, r:Expression<Real[_,_]>) ->
    MatrixPack {
  return construct<MatrixPack>(l, r);
}

/**
 * Lazy matrix pack.
 */
function pack(l:Real[_,_], r:Expression<Real[_,_]>) -> MatrixPack {
  return pack(box(l), r);
}

/**
 * Lazy matrix pack.
 */
function pack(l:Expression<Real[_,_]>, r:Real[_,_]) -> MatrixPack {
  return pack(l, box(r));
}
