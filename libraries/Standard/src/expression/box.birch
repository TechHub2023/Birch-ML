/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value>(x:Expression<Value>) -> Expression<Value> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value,Form>(x:BoxedExpression<Value,Form>) -> BoxedExpression<Value,Form> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value>(x:BoxedValue<Value>) -> BoxedValue<Value> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value>(x:MatrixJoinExpression<Value>) -> MatrixJoinExpression<Value> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value,Form>(x:MatrixSplitExpression<Value,Form>) -> MatrixSplitExpression<Value,Form> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value>(x:Random<Value>) -> Random<Value> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value>(x:VectorJoinExpression<Value>) -> VectorJoinExpression<Value> {
  return x;
}

/**
 * Box an already-boxed expression (identity operation).
 */
function box<Value,Form>(x:VectorSplitExpression<Value,Form>) -> VectorSplitExpression<Value,Form> {
  return x;
}

/**
 * Box a value.
 */
function box(x:Boolean) -> BoxedValue<Boolean> {
  return construct<BoxedValue<Boolean>>(x);
}

/**
 * Box a value.
 */
function box(x:Integer) -> BoxedValue<Integer> {
  return construct<BoxedValue<Integer>>(x);
}

/**
 * Box a value.
 */
function box(x:Real) -> BoxedValue<Real> {
  return construct<BoxedValue<Real>>(x);
}

/**
 * Box a value.
 */
function box<Type>(x:Type[_]) -> {
  return construct<BoxedValue<Type[_]>>(x);
}

/**
 * Box a value.
 */
function box<Type>(x:Type[_,_]) -> {
  return construct<BoxedValue<Type[_,_]>>(x);
}

/**
 * Box an expression.
 *
 * - f: Form of the expression.
 */
function box<Form>(f:Form) -> {
  return box_form(f.eval(), f);
}
function box_form<Value,Form>(x:Value, f:Form) -> {
  return construct<BoxedExpression<Value,Form>>(x, f);
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2>(x:(Value1,Value2)) -> {
  let (x1, x2) <- x;
  return (box(x1), box(x2));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3>(x:(Value1,Value2,Value3)) -> {
  let (x1, x2, x3) <- x;
  return (box(x1), box(x2), box(x3));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3,Value4>(x:(Value1,Value2,Value3,Value4)) -> {
  let (x1, x2, x3, x4) <- x;
  return (box(x1), box(x2), box(x3), box(x4));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3,Value4,Value5>(x:(Value1,Value2,Value3,Value4,Value5)) -> {
  let (x1, x2, x3, x4, x5) <- x;
  return (box(x1), box(x2), box(x3), box(x4), box(x5));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6>(x:(Value1,Value2,Value3,Value4,Value5,Value6)) -> {
  let (x1, x2, x3, x4, x5, x6) <- x;
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6,Value7>(x:(Value1,Value2,Value3,Value4,Value5,Value6,Value7)) -> {
  let (x1, x2, x3, x4, x5, x6, x7) <- x;
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6), box(x7));
}

/**
 * Box the elements of a tuple.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6,Value7,Value8>(x:(Value1,Value2,Value3,Value4,Value5,Value6,Value7,Value8)) -> {
  let (x1, x2, x3, x4, x5, x6, x7, x8) <- x;
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6), box(x7), box(x8));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2>(x1:Value1, x2:Value2) -> {
  return (box(x1), box(x2));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3>(x1:Value1, x2:Value2, x3:Value3) -> {
  return (box(x1), box(x2), box(x3));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3,Value4>(x1:Value1, x2:Value2, x3:Value3, x4:Value4) -> {
  return (box(x1), box(x2), box(x3), box(x4));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3,Value4,Value5>(x1:Value1, x2:Value2, x3:Value3, x4:Value4, x5:Value5) -> {
  return (box(x1), box(x2), box(x3), box(x4), box(x5));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6>(x1:Value1, x2:Value2, x3:Value3, x4:Value4, x5:Value5, x6:Value6) -> {
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6,Value7>(x1:Value1, x2:Value2, x3:Value3, x4:Value4, x5:Value5, x6:Value6, x7:Value7) -> {
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6), box(x7));
}

/**
 * Box multiple arguments.
 */
function box<Value1,Value2,Value3,Value4,Value5,Value6,Value7,Value8>(x1:Value1, x2:Value2, x3:Value3, x4:Value4, x5:Value5, x6:Value6, x7:Value7, x8:Value8) -> {
  return (box(x1), box(x2), box(x3), box(x4), box(x5), box(x6), box(x7), box(x8));
}
