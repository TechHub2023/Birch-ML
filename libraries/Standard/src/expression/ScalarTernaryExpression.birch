/**
 * Scalar ternary expression.
 *
 * - `Left`: Left argument type. Should derive from `Expression<...>`.
 * - `Middle`: Middle argument type. Should derive from `Expression<...>`.
 * - `Right`: Right argument type. Should derive from `Expression<...>`.
 * - `LeftValue`: Left value type. This is the type to which the left
 *    argument evaluates.
 * - `MiddleValue`: Middle value type. This is the type to which the middle
 *    argument evaluates.
 * - `RightValue`: Right value type. This is the type to which the right
 *   argument evaluates.
 * - `LeftGradient`: Left upstream gradient type. This is the type of the
 *   upstream gradient that the left argument accepts. It should be `Real`,
 *   `Real[_]`, or `Real[_,_]`.
 * - `MiddleGradient`: Middle upstream gradient type. This is the type of the
 *   upstream gradient that the middle argument accepts. It should be `Real`,
 *   `Real[_]`, or `Real[_,_]`.
 * - `RightGradient`: Right upstrem gradient type. This is the type of the
 *   upstream gradient that the right argument accepts. It should be `Real`,
 *   `Real[_]`, or `Real[_,_]`.
 * - `Value`: The type to which the expression evaluates.
 */
abstract class ScalarTernaryExpression<Left,Middle,Right,LeftValue,
    MiddleValue,RightValue,LeftGradient,MiddleGradient,RightGradient,Value>(
    a:Left, b:Middle, c:Right) < ScalarExpression<Value> {  
  /**
   * Left argument.
   */
  a:Left? <- a;

  /**
   * Middle argument.
   */
  b:Middle? <- b;
  
  /**
   * Right argument.
   */
  c:Right? <- c;

  /*
   * Evaluate.
   */
  abstract function doEvaluate(a:LeftValue, b:MiddleValue, c:RightValue) ->
      Value;
  
  /*
   * Evaluate the gradient for the left argument.
   */
  abstract function doEvaluateGradLeft(d:Real, x:Value, a:LeftValue,
      b:MiddleValue, c:RightValue) -> LeftGradient;

  /*
   * Evaluate the gradient for the middle argument.
   */
  abstract function doEvaluateGradMiddle(d:Real, x:Value, a:LeftValue,
      b:MiddleValue, c:RightValue) -> MiddleGradient;

  /*
   * Evaluate the gradient for the right argument.
   */
  abstract function doEvaluateGradRight(d:Real, x:Value, a:LeftValue,
      b:MiddleValue, c:RightValue) -> RightGradient;


  final override function doDepth() -> Integer {
    return max(a!.depth(), max(b!.depth(), c!.depth())) + 1;
  }

  final override function doValue() -> Value {
    return doEvaluate(a!.value(), b!.value(), c!.value());
  }

  final override function doPilot(gen:Integer) -> Value {
    return doEvaluate(a!.pilot(gen), b!.pilot(gen), c!.pilot(gen));
  }

  final override function doGet() -> Value {
    return doEvaluate(a!.get(), b!.get(), c!.get());
  }

  final override function doMove(gen:Integer, κ:Kernel) -> Value {
    return doEvaluate(a!.move(gen, κ), b!.move(gen, κ), c!.move(gen, κ));
  }
  
  final override function doGrad(gen:Integer) {
    a!.grad(gen, doEvaluateGradLeft(d!, x!, a!.get(), b!.get(), c!.get()));
    b!.grad(gen, doEvaluateGradMiddle(d!, x!, a!.get(), b!.get(), c!.get()));
    c!.grad(gen, doEvaluateGradRight(d!, x!, a!.get(), b!.get(), c!.get()));
  }
  
  final override function doPrior() -> Expression<Real>? {
    let l <- a!.prior();
    let m <- b!.prior();
    let r <- c!.prior();
    if l? && m? && r? {
      return l! + m! + r!;
    } else if l? && m? {
      return l! + m!;
    } else if l? && r? {
      return l! + r!;
    } else if l? {
      return l!;
    } else if m? && r? {
      return m! + r!;
    } else if m? {
      return m!;
    } else if r? {
      return r!;
    } else {
      return nil;
    }
  }

  final override function doCompare(gen:Integer, x:DelayExpression,
      κ:Kernel) -> Real {
    let o <- ScalarTernaryExpression<Left,Middle,Right,LeftValue,MiddleValue,
        RightValue,LeftGradient,MiddleGradient,RightGradient,Value>?(x)!;
    return a!.compare(gen, o.a!, κ) + b!.compare(gen, o.b!, κ) +
        c!.compare(gen, o.c!, κ);
  }

  final override function doConstant() {
    a!.constant();
    b!.constant();
    c!.constant();
  }

  final override function doCount(gen:Integer) {
    a!.count(gen);
    b!.count(gen);
    c!.count(gen);
  }
  
  final override function doDetach() {
    a <- nil;
    b <- nil;
    c <- nil;
  }
}
