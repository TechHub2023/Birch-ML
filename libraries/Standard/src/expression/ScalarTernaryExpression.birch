/**
 * Scalar ternary expression.
 *
 * - Left: Left argument type.
 * - Middle: Middle argument type.
 * - Right: Right argument type.
 * - Value: Result type.
 */
abstract class ScalarTernaryExpression<Left,Middle,Right,Value>(
    l:Left, m:Middle, r:Right) < ScalarExpression<Value> {  
  /**
   * Left argument.
   */
  l:Left? <- l;

  /**
   * Middle argument.
   */
  m:Middle? <- m;
  
  /**
   * Right argument.
   */
  r:Right? <- r;

  final override function doDepth() -> Integer {
    return max(l!.depth(), max(m!.depth(), r!.depth())) + 1;
  }

  final override function doValue() {
    l!.value();
    m!.value();
    r!.value();
  }

  final override function doEval(gen:Integer) {
    l!.countEval(gen);
    m!.countEval(gen);
    r!.countEval(gen);
  }

  final override function doReval(gen:Integer) {
    l!.countReval(gen);
    m!.countReval(gen);
    r!.countReval(gen);
  }

  final override function doConstant() {
    l <- nil;
    m <- nil;
    r <- nil;
  }
}
