/**
 * Lazy `trace`.
 */
final class Trace<Argument>(m:Argument) <
    ScalarUnaryExpression<Argument,Real>(m) {
  override function doCompute() {
    x <- trace(global.eval(m!));
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, diagonal(d!, global.rows(m!)));
  }
}

/**
 * Lazy `trace`.
 */
function trace(m:Expression<LLT>) -> Trace<Expression<LLT>> {
  return construct<Trace<Expression<LLT>>>(m);
}

/**
 * Lazy `trace`.
 */
function trace(m:Expression<Real[_,_]>) -> Trace<Expression<Real[_,_]>> {
  return construct<Trace<Expression<Real[_,_]>>>(m);
}
