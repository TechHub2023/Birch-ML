/**
 * Lazy subtract.
 */
final class DiscreteSubtract(l:Expression<Integer>, r:Expression<Integer>) <
    ScalarBinaryExpression<Expression<Integer>,Expression<Integer>,Integer>(l, r) {  
  override function doCompute() {
    x <- l!.eval() - r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!);
    r!.countGrad(gen, -d!);
  }

  override function graftDiscrete() -> Discrete? {
    t:Discrete?;
    if !hasValue() {
      t <- graftBoundedDiscrete();
      if !t? {
        m:Discrete?;
        if (m <- l!.graftDiscrete())? {
          t <- LinearDiscrete(box(1), m!, -r!);
        } else if (m <- r!.graftDiscrete())? {
          t <- LinearDiscrete(box(-1), m!, l!);
        }
      }
    }
    return t;
  }

  override function graftBoundedDiscrete() -> BoundedDiscrete? {
    t:BoundedDiscrete?;
    if !hasValue() {
      let l1 <- l!.graftBoundedDiscrete();
      let r1 <- r!.graftBoundedDiscrete();
      if l1? && r1? {
        t <- SubtractBoundedDiscrete(l1!, r1!);
      } else if l1? {
        t <- LinearBoundedDiscrete(box(1), l1!, -r!);
      } else if r1? {
        t <- LinearBoundedDiscrete(box(-1), r1!, l!);
      }
    }
    return t;
  }
}

/**
 * Lazy subtract.
 */
operator (l:Expression<Integer> - r:Expression<Integer>) ->
    DiscreteSubtract {
  return construct<DiscreteSubtract>(l, r);
}

/**
 * Lazy subtract.
 */
operator (l:Integer - r:Expression<Integer>) -> DiscreteSubtract {
  return box(l) - r;
}

/**
 * Lazy subtract.
 */
operator (l:Expression<Integer> - r:Integer) -> DiscreteSubtract {
  return l - box(r);
}
