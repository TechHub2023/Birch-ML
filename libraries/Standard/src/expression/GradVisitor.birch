/**
 * Collect gradients from a delayed expression.
 *
 * @param size Number of arguments.
 */
class GradVisitor(size:Integer) {
  /**
   * Vectorized gradients.
   */
  g:Real[size];

  function visit(g:Real, offset:Integer) {
    assert offset >= 0;
    cpp{{
    this->g.slice(offset + 1) = g;
    }}
  }

  function visit(g:Real[_], offset:Integer) {
    assert offset >= 0;
    let m <- offset + 1;
    let n <- m + size(g) - 1;
    this.g[m..n] <- g;
  }

  function visit(g:Real[_,_], offset:Integer) {
    assert offset >= 0;
    let m <- offset + 1;
    let n <- m + size(g) - 1;
    this.g[m..n] <- vec(g);
  }
}
