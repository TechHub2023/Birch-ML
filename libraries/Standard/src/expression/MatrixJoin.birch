/**
 * Lazy `join`.
 */
final class MatrixJoin<Value>(m:Expression<Value>[_,_]) <
    MatrixExpression<Value[_,_]> {
  /**
   * Arguments.
   */
  m:Expression<Value>[_,_]? <- m;

  override function doDepth() -> Integer {
    let depth <- 0;
    for i in 1..rows() {
      for j in 1..columns() {
        depth <- max(depth, m[i,j].depth());
      }
    }
    return depth + 1;
  }

  override function doRows() -> Integer {
    return global.rows(m!);
  }

  override function doColumns() -> Integer {
    return global.columns(m!);
  }

  override function doValue() -> Value[_,_] {
    return transform(m!, \(x:Expression<Value>) -> Value {
        return x.value();
      });
  }
  
  override function doEval(gen:Integer) -> Value[_,_] {
    return transform(m!, \(x:Expression<Value>) -> Value {
        return x.countEval(gen);
      });
  }

  override function doReval(gen:Integer) -> Value[_,_] {
    return transform(m!, \(x:Expression<Value>) -> Value {
        return x.countReval(gen);
      });
  }
  
  override function doGrad(gen:Integer) {
    for_each(m!, d!, \(x:Expression<Value>, d:Value) {
        x.countGrad(gen, d!);
      });
  }

  override function doConstant() {
    m <- nil;
  }
}

/**
 * Lazy `join`. Converts a matrix of scalar expressions into a matrix
 * expression.
 */
function join<Value>(m:Expression<Value>[_,_]) -> MatrixJoin<Value> {
  return construct<MatrixJoin<Value>>(m);
}

/**
 * Lazy `split`. Converts a matrix expression into a matrix of scalar
 * expressions.
 */
function split<Value>(m:Expression<Value[_,_]>) -> Expression<Value>[_,_] {
  let z <- canonical(m);
  // ^ canonical(m) above is an identity function for all but Random objects;
  //   for these it wraps the Random in an additional expression that can
  //   accumulate gradients by element (which a Random cannot) before passing
  //   the whole matrix of accumulated gradients onto the Random

  return matrix(\(i:Integer, j:Integer) -> Expression<Value> {
        return construct<MatrixElement<Value>>(z, i, j);
      }, z.rows(), z.columns());
}
