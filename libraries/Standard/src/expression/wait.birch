/**
 * Wait on a future and return the result. When applied to futures, this is
 * equivalent to the postfix `!` operator, while when applied to non-futures,
 * it is equivalent to the identity function.
 *
 * !!! tip
 *     `wait()` is useful for generic types, which may or may not be futures.
 */
function wait(x:Boolean!) -> Boolean {
  return x!;
}

/**
 * Wait on a future and return the result. When applied to futures, this is
 * equivalent to the postfix `!` operator, while when applied to non-futures,
 * it is equivalent to the identity function.
 *
 * !!! tip
 *     `wait()` is useful for generic types, which may or may not be futures.
 */
function wait(x:Integer!) -> Integer {
  return x!;
}

/**
 * Wait on a future and return the result. When applied to futures, this is
 * equivalent to the postfix `!` operator, while when applied to non-futures,
 * it is equivalent to the identity function.
 *
 * !!! tip
 *     `wait()` is useful for generic types, which may or may not be futures.
 */
function wait(x:Real!) -> Real {
  return x!;
}

/**
 * Wait on a future and return the result. When applied to futures, this is
 * equivalent to the postfix `!` operator, while when applied to non-futures,
 * it is equivalent to the identity function.
 *
 * !!! tip
 *     `wait()` is useful for generic types, which may or may not be futures.
 */
function wait<Type>(x:Type) -> Type {
  return x;
}
