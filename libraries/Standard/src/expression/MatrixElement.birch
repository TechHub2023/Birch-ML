/**
 * Lazy access of a matrix element.
 */
final class MatrixElement<Value>(m:Expression<Value[_,_]>, i:Integer,
    j:Integer) < ScalarUnaryExpression<Expression<Value[_,_]>,Value>(m) {
  /**
   * Row.
   */
  i:Integer <- i;

  /**
   * Column.
   */
  j:Integer <- j;
  
  override function doCompute() {
    x <- m!.eval()[i,j];
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, d!, i, j);
  }
}

/**
 * Lazy access of a matrix element.
 */
function MatrixElement(m:Expression<Real[_,_]>, i:Integer, j:Integer) ->
    MatrixElement<Real> {
  return construct<MatrixElement<Real>>(m, i, j);
}

/**
 * Lazy access of a matrix element.
 */
function MatrixElement(m:Expression<Integer[_,_]>, i:Integer, j:Integer) ->
    MatrixElement<Integer> {
  return construct<MatrixElement<Integer>>(m, i, j);
}

/**
 * Lazy access of a matrix element.
 */
function MatrixElement(m:Expression<Boolean[_,_]>, i:Integer, j:Integer) ->
    MatrixElement<Boolean> {
  return construct<MatrixElement<Boolean>>(m, i, j);
}
