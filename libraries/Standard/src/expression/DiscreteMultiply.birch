/**
 * Lazy multiply.
 */
final class DiscreteMultiply(l:Expression<Integer>, r:Expression<Integer>) <
    ScalarBinaryExpression<Expression<Integer>,Expression<Integer>,Integer>(l, r) {  
  override function doCompute() {
    x <- l!.eval()*r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!*r!.eval());
    r!.countGrad(gen, d!*l!.eval());
  }

  override function graftDiscrete() -> Discrete? {
    t:Discrete?;
    if !hasValue() {
      t <- graftBoundedDiscrete();
      if !t? {
        x1:Discrete?;
        if (x1 <- l!.graftDiscrete())? {
          t <- LinearDiscrete(r!, x1!, box(0));
        } else if (x1 <- r!.graftDiscrete())? {
          t <- LinearDiscrete(l!, x1!, box(0));
        }
      }
    }
    return t;
  }

  override function graftBoundedDiscrete() -> BoundedDiscrete? {
    t:BoundedDiscrete?;
    if !hasValue() {
      let l1 <- l!.graftBoundedDiscrete();
      let r1 <- r!.graftBoundedDiscrete();
      if l1? {
        t <- LinearBoundedDiscrete(r!, l1!, box(0));
      } else if r1? {
        t <- LinearBoundedDiscrete(l!, r1!, box(0));
      }
    }
    return t;
  }
}

/**
 * Lazy multiply.
 */
operator (l:Expression<Integer>*r:Expression<Integer>) -> DiscreteMultiply {
  return construct<DiscreteMultiply>(l, r);
}

/**
 * Lazy multiply.
 */
operator (l:Integer*r:Expression<Integer>) -> DiscreteMultiply {
  return box(l)*r;
}

/**
 * Lazy multiply.
 */
operator (l:Expression<Integer>*r:Integer) -> DiscreteMultiply {
  return l*box(r);
}
