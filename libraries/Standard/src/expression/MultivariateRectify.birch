/**
 * Lazy `rectify`.
 */
final class MultivariateRectify(m:Expression<Real[_]>) <
    MultivariateUnaryExpression<Expression<Real[_]>,Real[_]>(m) {
  override function doRows() -> Integer {
    return global.rows(m!);
  }
    
  override function doCompute() {
    x <- transform(global.eval(m!), \(m:Real) -> Real { return rectify(m); });
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, transform(d!, x!, \(d:Real, x:Real) -> Real {
        if x > 0.0 {
          return d;
        } else {
          return 0.0;
        }
      }));
  }
}

/**
 * Lazy `rectify`.
 */
function rectify(x:Expression<Real[_]>) -> MultivariateRectify {
  return construct<MultivariateRectify>(x);
}
