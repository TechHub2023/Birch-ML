/**
 * Lazy `canonical`.
 */
final class MatrixCanonical<Argument>(m:Argument) <
    MatrixUnaryExpression<Argument,Real[_,_]>(m) {
  override function doRows() -> Integer {
    return m!.rows();
  }
  
  override function doColumns() -> Integer {
    return m!.columns();
  }

  override function doCompute() {
    x <- canonical(m!.eval());
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, d!);
  }
}

/**
 * Lazy `canonical`.
 */
function canonical(m:Expression<LLT>) -> Expression<Real[_,_]> {
  return construct<MatrixCanonical<Expression<LLT>>>(m);
}

/**
 * Lazy `canonical`.
 */
function canonical(m:Expression<Real[_,_]>) -> Expression<Real[_,_]> {
  if !m.isRandom() {
    /* just an identity function */
    return m;
  } else {  
    /* Random objects should be wrapped to allow the accumulation of
     * gradients by element if necessary; see note in split() also */
    return construct<MatrixCanonical<Expression<Real[_,_]>>>(m);
  }
}
