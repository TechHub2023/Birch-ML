/**
 * Scalar binary expression.
 *
 * - Left: Left argument type.
 * - Right: Right argument type.
 * - Value: Result type.
 */
abstract class ScalarBinaryExpression<Left,Right,Value>(l:Left, r:Right) <
    ScalarExpression<Value> {  
  /**
   * Left argument.
   */
  l:Left? <- l;
  
  /**
   * Right argument.
   */
  r:Right? <- r;

  final override function doDepth() -> Integer {
    return max(global.depth(l!), global.depth(r!)) + 1;
  }

  final override function doValue() {
    global.value(l!);
    global.value(r!);
  }

  final override function doEval(gen:Integer) {
    count_eval(l!, gen);
    count_eval(r!, gen);
  }

  final override function doReval(gen:Integer) {
    count_reval(l!, gen);
    count_reval(r!, gen);
  }

  final override function doConstant() {
    l <- nil;
    r <- nil;
  }
}
