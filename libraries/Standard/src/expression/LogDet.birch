/**
 * Lazy `ldet`.
 */
final class LogDet<Argument>(m:Argument) <
    ScalarUnaryExpression<Argument,Real>(m) {
  override function doCompute() {
    x <- ldet(global.eval(m!));
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, d!*canonical(inv(transpose(global.eval(m!)))));
  }
}

/**
 * Lazy `ldet`.
 */
function ldet(m:Expression<LLT>) -> LogDet<Expression<LLT>> {
  return construct<LogDet<Expression<LLT>>>(m);
}

/**
 * Lazy `ldet`.
 */
function ldet(m:Expression<Real[_,_]>) -> LogDet<Expression<Real[_,_]>> {
  return construct<LogDet<Expression<Real[_,_]>>>(m);
}
