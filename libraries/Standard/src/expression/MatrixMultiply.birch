/**
 * Lazy matrix multiply.
 */
final class MatrixMultiply(l:Expression<Real[_,_]>,
    r:Expression<Real[_,_]>) < MatrixBinaryExpression<Expression<Real[_,_]>,
    Expression<Real[_,_]>,Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return r!.columns();
  }

  override function doCompute() {
    x <- l!.eval()*r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!*transpose(r!.eval()));
    r!.countGrad(gen, transpose(l!.eval())*d!);
  }

  override function graftLinearMatrixGaussian() -> TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;
    
      if (t <- r!.graftLinearMatrixGaussian())? {
        t!.leftMultiply(l!);
      } else if (x1 <- r!.graftMatrixGaussian())? {
        t <- TransformLinearMatrix<MatrixGaussian>(l!, x1!);
      }
    }
    return t;
  }
  
  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (t <- r!.graftLinearMatrixNormalInverseWishart(compare))? {
        t!.leftMultiply(l!);
      } else if (x1 <- r!.graftMatrixNormalInverseWishart(compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(l!, x1!);
      }
    }
    return t;
  }
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real[_,_]>*r:Expression<Real[_,_]>) ->
    MatrixMultiply {
  return construct<MatrixMultiply>(l, r);
}

/**
 * Lazy matrix multiply.
 */
operator (l:Real[_,_]*r:Expression<Real[_,_]>) -> MatrixMultiply {
  return box(l)*r;
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real[_,_]>*r:Real[_,_]) -> MatrixMultiply {
  return l*box(r);
}
