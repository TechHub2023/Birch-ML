/**
 * Lazy `lgamma`.
 */
final class LogGammaP(m:Expression<Real>, r:Integer) <
    ScalarUnaryExpression<Expression<Real>,Real>(m) {
  /**
   * Second (fixed) argument.
   */
  r:Integer <- r;
    
  override function doCompute() {
    x <- lgamma(m!.eval(), r);
  }

  override function doGrad(gen:Integer) {
    let x <- m!.eval();
    let y <- 0.0;
    for i in 1..r {
      y <- y + digamma(x + 0.5*(1 - i));
    }
    m!.countGrad(gen, d!*y);
  }
}

/**
 * Lazy `lgamma`.
 */
function lgamma(m:Expression<Real>, r:Integer) -> LogGammaP {
  return construct<LogGammaP>(m, r);
}
