/**
 * Lazy `outer`.
 */
final class Outer(l:Expression<Real[_]>, r:Expression<Real[_]>) <
    MatrixBinaryExpression<Expression<Real[_]>,Expression<Real[_]>,
    Real[_,_]>(l, r) {
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return r!.rows();
  }
  
  override function doCompute() {
    x <- outer(l!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!*r!.eval());
    r!.countGrad(gen, transpose(d!)*l!.eval());
  }
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>, r:Expression<Real[_]>) -> Outer {
  return construct<Outer>(l, r);
}

/**
 * Lazy `outer`.
 */
function outer(l:Real[_], r:Expression<Real[_]>) -> Outer {
  return outer(box(l), r);
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>, r:Real[_]) -> Outer {
  return outer(l, box(r));
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>) -> Outer {
  return outer(l, l);
}
