/**
 * Lazy `outer`.
 */
final class Outer(l:Expression<Real[_]>, r:Expression<Real[_]>) <
    MatrixBinaryExpression<Expression<Real[_]>,Expression<Real[_]>,
    Real[_,_]>(l, r) {
  override function doRows() -> Integer {
    return global.rows(l!);
  }
  
  override function doColumns() -> Integer {
    return global.rows(r!);
  }
  
  override function doCompute() {
    x <- outer(global.eval(l!), global.eval(r!));
  }

  override function doGrad(gen:Integer) {
    count_grad(l!, gen, d!*global.eval(r!));
    count_grad(r!, gen, transpose(d!)*global.eval(l!));
  }
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>, r:Expression<Real[_]>) -> Outer {
  return construct<Outer>(l, r);
}

/**
 * Lazy `outer`.
 */
function outer(l:Real[_], r:Expression<Real[_]>) -> Outer {
  return outer(box(l), r);
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>, r:Real[_]) -> Outer {
  return outer(l, box(r));
}

/**
 * Lazy `outer`.
 */
function outer(l:Expression<Real[_]>) -> Outer {
  return outer(l, l);
}
