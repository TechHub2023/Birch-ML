/**
 * Boxed form. Memoizes forward evaluation, acting as a checkpoint for
 * reverse-mode automatic differentiation.
 *
 * - Value: Result type.
 * - Form: Form form.
 */
class BoxedForm<Value,Form>(x:Value!, f:Form) < Expression<Value>(x, false) {
  /**
   * Expression form.
   */
  f:Form? <- f;

  final override function doEval() {
    this.x <- global.eval(f!);
  }

  final override function doGrad() {
    global.grad(f!, this.d!);
    this.d <- nil;  // clear intermediate gradients to save memory
  }

  final override function doLabel(gen:Integer) {
    global.label(f!, this.gen);
  }

  final override function doConstant(gen:Integer) {
    global.constant(f!, this.gen);
  }

  final override function doConstant() {
    global.constant(f!);
    f <- nil;
  }
}

function length<Value,Form>(x:BoxedForm<Value,Form>) -> Integer {
  return x.length();
}

function size<Value,Form>(x:BoxedForm<Value,Form>) -> Integer {
  return x.size();
}

function rows<Value,Form>(x:BoxedForm<Value,Form>) -> Integer {
  return x.rows();
}

function columns<Value,Form>(x:BoxedForm<Value,Form>) -> Integer {
  return x.columns();
}

function link<Value,Form>(x:BoxedForm<Value,Form>) {
  x.link();
}

function value<Value,Form>(x:BoxedForm<Value,Form>) -> Value! {
  return x.value();
}

function peek<Value,Form>(x:BoxedForm<Value,Form>) -> Value! {
  return x.peek();
}

function eval<Value,Form>(x:BoxedForm<Value,Form>) -> Value! {
  return x.eval();
}

function grad<Value,Form,Gradient>(x:BoxedForm<Value,Form>, d:Gradient) {
  x.grad(d);
}

function label<Value,Form>(x:BoxedForm<Value,Form>, gen:Integer) {
  x.label(gen);
}

function constant<Value,Form>(x:BoxedForm<Value,Form>, gen:Integer) {
  x.constant(gen);
}

function constant<Value,Form>(x:BoxedForm<Value,Form>) {
  x.constant();
}
