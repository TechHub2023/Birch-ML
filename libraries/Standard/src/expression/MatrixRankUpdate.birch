/**
 * Lazy rank update.
 */
final class MatrixRankUpdate<Right>(l:Expression<LLT>, r:Right) <
    MatrixBinaryExpression<Expression<LLT>,Right,LLT>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }
  
  override function doColumns() -> Integer {
    return r!.columns();
  }

  override function doCompute() {
    x <- rank_update(l!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, d!);
    r!.countGrad(gen, (d! + transpose(d!))*r!.eval());
  }
}

/**
 * Lazy rank 1 update.
 */
function rank_update(l:Expression<LLT>, r:Expression<Real[_]>) ->
    MatrixRankUpdate<Expression<Real[_]>> {
  assert l.columns() == r.rows();
  return construct<MatrixRankUpdate<Expression<Real[_]>>>(l, r);
}

/**
 * Lazy rank 1 update.
 */
function rank_update(l:LLT, r:Expression<Real[_]>) ->
    MatrixRankUpdate<Expression<Real[_]>> {
  return rank_update(box(l), r);
}

/**
 * Lazy rank 1 update.
 */
function rank_update(l:Expression<LLT>, r:Real[_]) ->
    MatrixRankUpdate<Expression<Real[_]>> {
  return rank_update(l, box(r));
}

/**
 * Lazy rank $k$ update.
 */
function rank_update(l:Expression<LLT>, r:Expression<Real[_,_]>) ->
    MatrixRankUpdate<Expression<Real[_,_]>> {
  assert l.columns() == r.rows();
  return construct<MatrixRankUpdate<Expression<Real[_,_]>>>(l, r);
}

/**
 * Lazy rank $k$ update.
 */
function rank_update(l:LLT, r:Expression<Real[_,_]>) ->
    MatrixRankUpdate<Expression<Real[_,_]>> {
  return rank_update(box(l), r);
}

/**
 * Lazy rank $k$ update.
 */
function rank_update(l:Expression<LLT>, r:Real[_,_]) ->
    MatrixRankUpdate<Expression<Real[_,_]>> {
  return rank_update(l, box(r));
}
