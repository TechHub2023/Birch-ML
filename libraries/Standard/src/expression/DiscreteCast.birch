/**
 * Lazy cast.
 */
final class DiscreteCast<From,To>(m:Expression<From>) <
    ScalarUnaryExpression<Expression<From>,To>(m) {
  override function doCompute() {
    x <- To?(m!.eval())!;
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, d!);
  }
}

/**
 * Lazy cast.
 */
function Integer(m:Expression<Real>) -> DiscreteCast<Real,Integer> {
  return construct<DiscreteCast<Real,Integer>>(m);
}

/**
 * Lazy cast, identity function.
 */
function Integer(m:Expression<Integer>) -> Expression<Integer> {
  return m;
}

/**
 * Lazy cast.
 */
function Integer(m:Expression<Boolean>) -> DiscreteCast<Boolean,Integer> {
  return construct<DiscreteCast<Boolean,Integer>>(m);
}

/**
 * Lazy cast.
 */
function Boolean(m:Expression<Real>) -> DiscreteCast<Real,Boolean> {
  return construct<DiscreteCast<Real,Boolean>>(m);
}

/**
 * Lazy cast.
 */
function Boolean(m:Expression<Integer>) -> DiscreteCast<Integer,Boolean> {
  return construct<DiscreteCast<Integer,Boolean>>(m);
}

/**
 * Lazy cast, identity function.
 */
function Boolean(m:Expression<Boolean>) -> Expression<Boolean> {
  return m;
}
