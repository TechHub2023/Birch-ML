/**
 * Lazy access of a vector element.
 */
final class MultivariateElement<Value>(m:Expression<Value[_]>, i:Integer) <
    ScalarUnaryExpression<Expression<Value[_]>,Value>(m) {
  /**
   * Element.
   */
  i:Integer <- i;

  override function doCompute() {
    x <- m!.eval()[i];
  }

  override function doGrad(gen:Integer) {
    m!.countGrad(gen, d!, i);
  }
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(m:Expression<Real[_]>, i:Integer) ->
    MultivariateElement<Real> {
  return construct<MultivariateElement<Real>>(m, i);
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(m:Expression<Integer[_]>, i:Integer) ->
    MultivariateElement<Integer> {
  return construct<MultivariateElement<Integer>>(m, i);
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(m:Expression<Boolean[_]>, i:Integer) ->
    MultivariateElement<Boolean> {
  return construct<MultivariateElement<Boolean>>(m, i);
}
