/**
 * Lazy access of a vector element.
 */
acyclic class MultivariateElement<Value>(y:Expression<Value[_]>, i:Integer) <
    ScalarExpression<Value> {
  /**
   * Argument.
   */
  y:Expression<Value[_]>? <- y;
    
  /**
   * Element.
   */
  i:Integer <- i;

  override function doDepth() -> Integer {
    return y!.depth() + 1;
  }

  override function doValue() -> Value {
    return y!.value()[i];
  }

  override function doEval(gen:Integer) -> Value {
    return y!.countEval(gen)[i];
  }

  override function doReval(gen:Integer) -> Value {
    return y!.countReval(gen)[i];
  }

  override function doGrad(gen:Integer) {
    y!.countGrad(gen, d!, i);
  }

  override function doConstant() {
    y!.value();
    y <- nil;
  }
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(y:Expression<Real[_]>, i:Integer) ->
    MultivariateElement<Real> {
  return construct<MultivariateElement<Real>>(y, i);
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(y:Expression<Integer[_]>, i:Integer) ->
    MultivariateElement<Integer> {
  return construct<MultivariateElement<Integer>>(y, i);
}

/**
 * Lazy access of a vector element.
 */
function MultivariateElement(y:Expression<Boolean[_]>, i:Integer) ->
    MultivariateElement<Boolean> {
  return construct<MultivariateElement<Boolean>>(y, i);
}
