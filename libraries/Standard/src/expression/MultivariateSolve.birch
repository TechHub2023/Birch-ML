/**
 * Lazy multivariate solve.
 */
final class MultivariateSolve<Left,LeftValue>(l:Left, r:Expression<Real[_]>) <
    MultivariateBinaryExpression<Left,Expression<Real[_]>,Real[_]>(l, r) {  
  override function doRows() -> Integer {
    return global.rows(r!);
  }
  
  override function doCompute() {
    x <- solve(global.eval(l!), global.eval(r!));
  }

  override function doGrad(gen:Integer) {
    let l1 <- global.eval(l!);
    let r1 <- global.eval(r!);
    let z <- solve(transpose(l1), d!);
    count_grad(l!, gen, outer(-z, solve(l1, r1)));
    count_grad(r!, gen, z);
  }
}

/**
 * Lazy solve.
 */
function solve(l:Expression<Real[_,_]>, r:Expression<Real[_]>) ->
    MultivariateSolve<Expression<Real[_,_]>,Real[_,_]> {
  assert global.columns(l) == global.rows(r);
  return construct<MultivariateSolve<Expression<Real[_,_]>,Real[_,_]>>(l, r);
}

/**
 * Lazy solve.
 */
function solve(l:Real[_,_], r:Expression<Real[_]>) ->
    MultivariateSolve<Expression<Real[_,_]>,Real[_,_]> {
  return solve(box(l), r);
}

/**
 * Lazy solve.
 */
function solve(l:Expression<Real[_,_]>, r:Real[_]) ->
    MultivariateSolve<Expression<Real[_,_]>,Real[_,_]> {
  return solve(l, box(r));
}

/**
 * Lazy solve.
 */
function solve(l:Expression<LLT>, r:Expression<Real[_]>) ->
    MultivariateSolve<Expression<LLT>,LLT> {
  assert global.columns(l) == global.rows(r);
  return construct<MultivariateSolve<Expression<LLT>,LLT>>(l, r);
}

/**
 * Lazy solve.
 */
function solve(l:LLT, r:Expression<Real[_]>) ->
    MultivariateSolve<Expression<LLT>,LLT> {
  return solve(box(l), r);
}

/**
 * Lazy solve.
 */
function solve(l:Expression<LLT>, r:Real[_]) ->
    MultivariateSolve<Expression<LLT>,LLT> {
  return solve(l, box(r));
}
