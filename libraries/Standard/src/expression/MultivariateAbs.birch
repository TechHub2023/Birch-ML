/**
 * Lazy `abs`.
 */
final class MultivariateAbs(m:Expression<Real[_]>) <
    MultivariateUnaryExpression<Expression<Real[_]>,Real[_]>(m) {
  override function doRows() -> Integer {
    return global.rows(m!);
  }
    
  override function doCompute() {
    x <- transform(global.eval(m!), \(m:Real) -> Real { return abs(m); });
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, transform(d!, global.eval(m!), \(d:Real, m:Real) -> Real {
        if m >= 0.0 {
          return d;
        } else {
          return -d;
        }
      }));
  }
}

/**
 * Lazy `abs`.
 */
function abs(x:Expression<Real[_]>) -> MultivariateAbs {
  return construct<MultivariateAbs>(x);
}
