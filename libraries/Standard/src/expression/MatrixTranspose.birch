/**
 * Lazy `transpose`.
 */
final class MatrixTranspose(m:Expression<Real[_,_]>) <
    MatrixUnaryExpression<Expression<Real[_,_]>,Real[_,_]>(m) {
  override function doRows() -> Integer {
    return global.columns(m!);
  }
  
  override function doColumns() -> Integer {
    return global.rows(m!);
  }

  override function doCompute() {
    x <- transpose(global.eval(m!));
  }

  override function doGrad(gen:Integer) {
    count_grad(m!, gen, transpose(d!));
  }
}

/**
 * Lazy `transpose`.
 */
function transpose(m:Expression<Real[_,_]>) -> MatrixTranspose {
  return construct<MatrixTranspose>(m);
}

/**
 * Lazy `transpose`, identity function.
 */
function transpose(m:Expression<LLT>) -> Expression<LLT> {
  return m;
}
