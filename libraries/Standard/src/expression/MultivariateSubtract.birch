/**
 * Lazy multivariate subtract.
 */
final class MultivariateSubtract(l:Expression<Real[_]>,
    r:Expression<Real[_]>) < MultivariateBinaryExpression<Expression<Real[_]>,
    Expression<Real[_]>,Real[_]>(l, r) {
  override function doRows() -> Integer {
    return global.rows(l!);
  }

  override function doCompute() {
    x <- global.eval(l!) - global.eval(r!);
  }

  override function doGrad(gen:Integer) {
    count_grad(l!, gen, d!);
    count_grad(r!, gen, -d!);
  }

  override function graftLinearMultivariateGaussian() ->
      TransformLinearMultivariate<MultivariateGaussian>? {
    t:TransformLinearMultivariate<MultivariateGaussian>?;
    if !hasValue() {
      x1:MultivariateGaussian?;

      if (t <- graft_linear_multivariate_gaussian(l!))? {
        t!.subtract(r!);
      } else if (t <- graft_linear_multivariate_gaussian(r!))? {
        t!.negateAndAdd(l!);
      } else if (x1 <- graft_multivariate_gaussian(l!))? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(box(identity(global.rows(r!))), x1!, -r!);
      } else if (x1 <- graft_multivariate_gaussian(r!))? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(box(diagonal(-1.0, global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }
  
  override function graftLinearMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      TransformLinearMultivariate<MultivariateNormalInverseGamma>? {
    t:TransformLinearMultivariate<MultivariateNormalInverseGamma>?;
    if !hasValue() {
      x1:MultivariateNormalInverseGamma?;

      if (t <- graft_linear_multivariate_normal_inverse_gamma(l!, compare))? {
        t!.subtract(r!);
      } else if (t <- graft_linear_multivariate_normal_inverse_gamma(r!, compare))? {
        t!.negateAndAdd(l!);
      } else if (x1 <- graft_multivariate_normal_inverse_gamma(l!, compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(box(identity(global.rows(r!))), x1!, -r!);
      } else if (x1 <- graft_multivariate_normal_inverse_gamma(r!, compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(box(diagonal(-1.0, global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }

  override function graftDotMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformDotMultivariate<MatrixNormalInverseWishart>? {
    t:TransformDotMultivariate<MatrixNormalInverseWishart>?;
    if !hasValue() {
      if (t <- graft_dot_matrix_normal_inverse_wishart(l!, compare))? {
        t!.subtract(r!);
      } else if (t <- graft_dot_matrix_normal_inverse_wishart(r!, compare))? {
        t!.negateAndAdd(l!);
      }
    }
    return t;
  }
}

/**
 * Lazy subtract.
 */
operator (l:Expression<Real[_]> - r:Expression<Real[_]>) ->
    MultivariateSubtract {
  assert global.rows(l) == global.rows(r);
  return construct<MultivariateSubtract>(l, r);
}

/**
 * Lazy subtract.
 */
operator (l:Real[_] - r:Expression<Real[_]>) -> MultivariateSubtract {
  return box(l) - r;
}

/**
 * Lazy subtract.
 */
operator (l:Expression<Real[_]> - r:Real[_]) -> MultivariateSubtract {
  return l - box(r);
}
