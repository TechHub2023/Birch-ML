/**
 * Lazy `pow`.
 */
final class Pow(l:Expression<Real>, r:Expression<Real>) <
    ScalarBinaryExpression<Expression<Real>,Expression<Real>,Real>(l, r) {  
  override function doCompute() {
    x <- pow(global.eval(l!), global.eval(r!));
  }

  override function doGrad(gen:Integer) {
    let l1 <- global.eval(l!);
    let r1 <- global.eval(r!);
    count_grad(l!, gen, d!*r1*pow(l1, r1 - 1.0));
    if l1 > 0.0 {
      count_grad(r!, gen, d!*pow(l1, r1)*log(l1));
    } else {
      count_grad(r!, gen, 0.0);
    }
  }
}

/**
 * Lazy `pow`.
 */
function pow(l:Expression<Real>, r:Expression<Real>) -> Pow {
  return construct<Pow>(l, r);
}

/**
 * Lazy `pow`.
 */
function pow(l:Real, r:Expression<Real>) -> Pow {
  return pow(box(l), r);
}

/**
 * Lazy `pow`.
 */
function pow(l:Expression<Real>, r:Real) -> Pow {
  return pow(l, box(r));
}
