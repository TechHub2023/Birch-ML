/**
 * Boxed and split matrix expression.
 *
 * - Value: Result type.
 * - Form: Expression type.
 */
final class MatrixSplitExpression<Value,Form>(x:Value, f:Form) <
    BoxedForm<Value,Form>(x, f) {
  function grad(d:Real, i:Integer, j:Integer) {
    if f? {
      if visitCount == 0 {
        this.d <- matrix(0.0, rows(), columns());
      }
      this.d![i,j] <- this.d![i,j] + d;
      visitCount <- visitCount + 1;
      if visitCount >= evalCount {
        assert visitCount == evalCount || evalCount == 0;
        // ^ can have visitCount > evalCount = 0 if eval() has never been
        //   called on this object, typically because it is root expression
        //   used from client code, rather than a subexpression used from
        //   other expressions
        global.grad(f!, this.d!);       // upstream gradients all accumulated, propagate
        this.d <- nil;         // clear intermediate gradients to save memory
        visitCount <- 0;  // reset for next time
      }
    }
  }
}

/**
 * Box and split a matrix expression into a matrix of expressions.
 *
 * - f: Form of the expression.
 */
function matrix_split<Form>(f:Form) -> {
  return matrix_split(eval(f), f);
}

/**
 * Box and split a matrix expression into a matrix of expressions.
 *
 * - x: Result of the expression.
 * - f: Form of the expression.
 */
function matrix_split<Value,Form>(x:Value, f:Form) -> {
  return construct<MatrixSplitExpression<Value,Form>>(x, f);
}
