/**
 * Collect arguments from a delayed expression.
 *
 * @param size Number of arguments.
 */
class ArgsVisitor(size:Integer) {
  /**
   * Vectorized arguments.
   */
  x:Real[size];

  function visit(x:Real, offset:Integer) {
    assert offset >= 0;
    cpp{{
    this->x.slice(offset + 1) = x;
    }}
  }

  function visit(x:Real[_], offset:Integer) {
    assert offset >= 0;
    let m <- offset + 1;
    let n <- m + size(x) - 1;
    this.x[m..n] <- x;
  }

  function visit(x:Real[_,_], offset:Integer) {
    assert offset >= 0;
    let m <- offset + 1;
    let n <- m + size(x) - 1;
    this.x[m..n] <- vec(x);
  }
}
