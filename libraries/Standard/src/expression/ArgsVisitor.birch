/**
 * Collect arguments from a delayed expression.
 *
 * @param size Number of arguments.
 */
class ArgsVisitor(size:Integer) {
  /**
   * Vectorized arguments.
   */
  x:Real[size];

  function visit(p:Distribution<Real>) {
    let y <- p.x!;
    cpp{{
    x.slice(p->offset + 1) = y;
    }}
  }

  function visit(p:Distribution<Integer>) {
    //
  }

  function visit(p:Distribution<Boolean>) {
    //
  }

  function visit(p:Distribution<Real[_]>) {
    let m <- p.offset + 1;
    let n <- m + size(p.x!) - 1;
    x[m..n] <- p.x!;
  }

  function visit(p:Distribution<Integer[_]>) {
    //
  }

  function visit(p:Distribution<Real[_,_]>) {
    let m <- p.offset + 1;
    let n <- m + size(p.x!) - 1;
    x[m..n] <- vec(p.x!);
  }
}
