/**
 * Lazy matrix multiply.
 */
class MatrixScalarMultiply(y:Expression<Real>,
    z:Expression<Real[_,_]>) < MatrixBinaryExpression<Expression<Real>,
    Expression<Real[_,_]>,Real,Real[_,_],Real,Real[_,_],Real[_,_]>(y, z) {  
  override function doRows() -> Integer {
    return z!.rows();
  }
  
  override function doColumns() -> Integer {
    return z!.columns();
  }

  override function doEvaluate(y:Real, z:Real[_,_]) -> Real[_,_] {
    return y*z;
  }

  override function doEvaluateGradLeft(d:Real[_,_], x:Real[_,_], y:Real,
      z:Real[_,_]) -> Real {
    return trace(d*transpose(z));
  }

  override function doEvaluateGradRight(d:Real[_,_], x:Real[_,_], y:Real,
      z:Real[_,_]) -> Real[_,_] {
    return y*d;
  }

  override function graftLinearMatrixGaussian() -> TransformLinearMatrix<MatrixGaussian>? {
    r:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;
    
      if (r <- z!.graftLinearMatrixGaussian())? {
        r!.multiply(y!);
      } else if (x1 <- z!.graftMatrixGaussian())? {
        r <- TransformLinearMatrix<MatrixGaussian>(diagonal(y!, z!.rows()), x1!);
      }
    }
    return r;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    r:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (r <- z!.graftLinearMatrixNormalInverseWishart(compare))? {
        r!.multiply(y!);
      } else if (x1 <- z!.graftMatrixNormalInverseWishart(compare))? {
        r <- TransformLinearMatrix<MatrixNormalInverseWishart>(diagonal(y!, z!.rows()), x1!);
      }
    }
    return r;
  }
}

/**
 * Lazy matrix multiply.
 */
operator (y:Expression<Real>*z:Expression<Real[_,_]>) ->
    MatrixScalarMultiply {
  return construct<MatrixScalarMultiply>(y, z);
}

/**
 * Lazy matrix multiply.
 */
operator (y:Real*z:Expression<Real[_,_]>) -> MatrixScalarMultiply {
  return box(y)*z;
}

/**
 * Lazy matrix multiply.
 */
operator (y:Expression<Real>*z:Real[_,_]) -> MatrixScalarMultiply {
  return y*box(z);
}

/**
 * Lazy matrix multiply.
 */
operator (y:Expression<Real[_,_]>*z:Expression<Real>) -> MatrixScalarMultiply {
  return z*y;
}

/**
 * Lazy matrix multiply.
 */
operator (y:Real[_,_]*z:Expression<Real>) -> MatrixScalarMultiply {
  return z*y;
}

/**
 * Lazy matrix multiply.
 */
operator (y:Expression<Real[_,_]>*z:Real) -> MatrixScalarMultiply {
  return z*y;
}
