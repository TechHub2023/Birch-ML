/**
 * Lazy matrix multiply.
 */
final class MatrixScalarMultiply(l:Expression<Real>,
    r:Expression<Real[_,_]>) < MatrixBinaryExpression<Expression<Real>,
    Expression<Real[_,_]>,Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return global.rows(r!);
  }
  
  override function doColumns() -> Integer {
    return global.columns(r!);
  }

  override function doCompute() {
    x <- global.eval(l!)*global.eval(r!);
  }

  override function doGrad(gen:Integer) {
    count_grad(l!, gen, trace(d!*transpose(global.eval(r!))));
    count_grad(r!, gen, global.eval(l!)*d!);
  }

  override function graftLinearMatrixGaussian() -> TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;
    
      if (t <- graft_linear_matrix_gaussian(r!))? {
        t!.multiply(l!);
      } else if (x1 <- graft_matrix_gaussian(r!))? {
        t <- TransformLinearMatrix<MatrixGaussian>(diagonal(l!, global.rows(r!)), x1!);
      }
    }
    return t;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (t <- graft_linear_matrix_normal_inverse_wishart(r!, compare))? {
        t!.multiply(l!);
      } else if (x1 <- graft_matrix_normal_inverse_wishart(r!, compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(diagonal(l!, global.rows(r!)), x1!);
      }
    }
    return t;
  }
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real>*r:Expression<Real[_,_]>) ->
    MatrixScalarMultiply {
  return construct<MatrixScalarMultiply>(l, r);
}

/**
 * Lazy matrix multiply.
 */
operator (l:Real*r:Expression<Real[_,_]>) -> MatrixScalarMultiply {
  return box(l)*r;
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real>*r:Real[_,_]) -> MatrixScalarMultiply {
  return l*box(r);
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real[_,_]>*r:Expression<Real>) -> MatrixScalarMultiply {
  return r*l;
}

/**
 * Lazy matrix multiply.
 */
operator (l:Real[_,_]*r:Expression<Real>) -> MatrixScalarMultiply {
  return r*l;
}

/**
 * Lazy matrix multiply.
 */
operator (l:Expression<Real[_,_]>*r:Real) -> MatrixScalarMultiply {
  return r*l;
}
