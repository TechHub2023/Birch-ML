/**
 * Lazy `inv`.
 */
final class MatrixInv<Argument,ArgumentValue,Value>(y:Argument) <
    MatrixUnaryExpression<Argument,ArgumentValue,Real[_,_],Value>(y) {
  override function doRows() -> Integer {
    return y!.rows();
  }
  
  override function doColumns() -> Integer {
    return y!.columns();
  }

  override function doEvaluate(y:ArgumentValue) -> Value {
    return inv(y);
  }

  override function doEvaluateGrad(d:Real[_,_], x:Value, y:ArgumentValue) ->
      Real[_,_] {
    let x' <- canonical(transpose(x));
    return -x'*d*x';
  }
}

/**
 * Lazy `inv`.
 */
function inv(x:Expression<Real[_,_]>) ->
    MatrixInv<Expression<Real[_,_]>,Real[_,_],Real[_,_]> {
  return construct<MatrixInv<Expression<Real[_,_]>,Real[_,_],Real[_,_]>>(x);
}

/**
 * Lazy `inv`.
 */
function inv(x:Expression<LLT>) -> MatrixInv<Expression<LLT>,LLT,LLT> {
  return construct<MatrixInv<Expression<LLT>,LLT,LLT>>(x);
}
