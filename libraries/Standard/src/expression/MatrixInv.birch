/**
 * Lazy `inv`.
 */
final class MatrixInv<Argument,Value>(m:Argument) <
    MatrixUnaryExpression<Argument,Value>(m) {
  override function doRows() -> Integer {
    return m!.rows();
  }
  
  override function doColumns() -> Integer {
    return m!.columns();
  }

  override function doCompute() {
    x <- inv(m!.eval());
  }

  override function doGrad(gen:Integer) {
    let m1 <- canonical(transpose(m!.eval()));
    m!.countGrad(gen, -m1*d!*m1);
  }
}

/**
 * Lazy `inv`.
 */
function inv(m:Expression<Real[_,_]>) ->
    MatrixInv<Expression<Real[_,_]>,Real[_,_]> {
  return construct<MatrixInv<Expression<Real[_,_]>,Real[_,_]>>(m);
}

/**
 * Lazy `inv`.
 */
function inv(x:Expression<LLT>) -> MatrixInv<Expression<LLT>,LLT> {
  return construct<MatrixInv<Expression<LLT>,LLT>>(x);
}
