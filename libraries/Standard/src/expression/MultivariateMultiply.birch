/**
 * Lazy multivariate multiply.
 */
final class MultivariateMultiply(l:Expression<Real[_,_]>,
    r:Expression<Real[_]>) < MultivariateBinaryExpression<
    Expression<Real[_,_]>,Expression<Real[_]>,Real[_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows();
  }

  override function doCompute() {
    x <- l!.eval()*r!.eval();
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, outer(d!, r!.eval()));
    r!.countGrad(gen, transpose(l!.eval())*d!);
  }

  override function graftLinearMultivariateGaussian() ->
      TransformLinearMultivariate<MultivariateGaussian>? {
    t:TransformLinearMultivariate<MultivariateGaussian>?;
    if !hasValue() {
      x1:MultivariateGaussian?;
      if (t <- r!.graftLinearMultivariateGaussian())? {
        t!.leftMultiply(l!);
      } else if (x1 <- r!.graftMultivariateGaussian())? {
        t <- TransformLinearMultivariate<MultivariateGaussian>(l!, x1!);
      }
    }
    return t;
  }
  
  override function graftLinearMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      TransformLinearMultivariate<MultivariateNormalInverseGamma>? {
    t:TransformLinearMultivariate<MultivariateNormalInverseGamma>?;
    if !hasValue() {
      x1:MultivariateNormalInverseGamma?;

      if (t <- r!.graftLinearMultivariateNormalInverseGamma(compare))? {
        t!.leftMultiply(l!);
      } else if (x1 <- r!.graftMultivariateNormalInverseGamma(compare))? {
        t <- TransformLinearMultivariate<MultivariateNormalInverseGamma>(l!, x1!);
      }
    }
    return t;
  }
}

/**
 * Lazy multivariate multiply.
 */
operator (l:Expression<Real[_,_]>*r:Expression<Real[_]>) ->
    MultivariateMultiply {
  assert l.columns() == r.rows();
  return construct<MultivariateMultiply>(l, r);
}

/**
 * Lazy multivariate multiply.
 */
operator (l:Real[_,_]*r:Expression<Real[_]>) -> MultivariateMultiply {
  return box(l)*r;
}

/**
 * Lazy multivariate multiply.
 */
operator (l:Expression<Real[_,_]>*r:Real[_]) -> MultivariateMultiply {
  return l*box(r);
}
