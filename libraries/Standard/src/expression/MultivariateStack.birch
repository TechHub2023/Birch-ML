/**
 * Lazy vector stack.
 */
final class MultivariateStack(l:Expression<Real[_]>, r:Expression<Real[_]>) <
    MultivariateBinaryExpression<Expression<Real[_]>,Expression<Real[_]>,
    Real[_]>(l, r) {  
  override function doRows() -> Integer {
    return l!.rows() + r!.rows();
  }

  override function doCompute() {
    x <- stack(l!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    let l1 <- global.length(l!.eval());
    let l2 <- global.length(r!.eval());
    l!.countGrad(gen, d![1..l1]);
    r!.countGrad(gen, d![(l1 + 1)..(l1 + l2)]);
  }
}

/**
 * Lazy vector stack.
 */
function stack(l:Expression<Real[_]>, r:Expression<Real[_]>) ->
    MultivariateStack {
  return construct<MultivariateStack>(l, r);
}

/**
 * Lazy matrix stack.
 */
function stack(l:Real[_], r:Expression<Real[_]>) -> MultivariateStack {
  return stack(box(l), r);
}

/**
 * Lazy matrix stack.
 */
function stack(l:Expression<Real[_]>, r:Real[_]) -> MultivariateStack {
  return stack(l, box(r));
}
