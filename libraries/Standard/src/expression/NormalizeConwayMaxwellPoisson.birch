/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
final class NormalizeConwayMaxwellPoisson(l:Expression<Real>,
    m:Expression<Real>, r:Expression<Integer>) < ScalarTernaryExpression<
    Expression<Real>,Expression<Real>,Expression<Integer>,Real>(l, m, r) {
  override function doCompute() {
    x <- normalize_conway_maxwell_poisson(l!.eval(), m!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    let l1 <- this.l!.eval();
    let m1 <- this.m!.eval();
    let r1 <- this.r!.eval();
    let dz1 <- 0.0;
    let dz2 <- 0.0;
    let dZ1 <- 0.0;
    let dZ2 <- 0.0;
    let z <- 1.0;
    if r1 >= 1 {
      dz1 <- 1.0;
      dz2 <- 1.0;
      dZ1 <- 1.0;
      dZ2 <- 1.0;
      z <- l1;
      if r1 >= 2 {
        dz1 <- l1*pow(2.0, 1.0 - m1);
        dz2 <- -pow(l1, 2.0)*pow(2.0, -m1)*log(2.0);
        dZ1 <- dZ1 + dz1;
        dZ2 <- dZ2 + dz2;
        z <- z*l1*pow(2.0, -m1);
        for j in 3..r1 {
          dz1 <- (dz1*l1 + z)*pow(Real(j), -m1);
          dz2 <- (dz2*l1 - z*l1*log(Real(j)))*pow(Real(j), -m1);
          dZ1 <- dZ1 + dz1;
          dZ2 <- dZ2 + dz2;
          z <- z*l1*pow(Real(j), -m1);
        }
      }
    }
    l!.countGrad(gen, d!*dZ1);
    m!.countGrad(gen, d!*dZ2);
    r!.countGrad(gen, 0.0);
  }
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Expression<Real>,
    m:Expression<Real>, r:Expression<Integer>) ->
    NormalizeConwayMaxwellPoisson {
  return construct<NormalizeConwayMaxwellPoisson>(l, m, r);
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Expression<Real>,
    m:Expression<Real>, r:Integer) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(l, m, box(r));
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Expression<Real>, m:Real,
    r:Expression<Integer>) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(l, box(m), r);
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Expression<Real>, m:Real,
    r:Integer) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(l, box(m), box(r));
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Real, m:Expression<Real>,
    r:Expression<Integer>) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(box(l), m, r);
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Real, m:Expression<Real>,
    r:Integer) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(box(l), m, box(r));
}

/**
 * Lazy `normalize_conway_maxwell_poisson`.
 */
function normalize_conway_maxwell_poisson(l:Real, m:Real,
    r:Expression<Integer>) -> NormalizeConwayMaxwellPoisson {
  return normalize_conway_maxwell_poisson(box(l), box(m), r);
}
