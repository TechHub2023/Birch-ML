/**
 * Lazy `lbeta`.
 */
final class LogBeta(l:Expression<Real>, r:Expression<Real>) <
    ScalarBinaryExpression<Expression<Real>,Expression<Real>,Real>(l, r) {  
  override function doCompute() {
    x <- lbeta(l!.eval(), r!.eval());
  }
  
  override function doGrad(gen:Integer) {
    let l <- this.l!.eval();
    let r <- this.r!.eval();
    let lr <- digamma(l + r);
    this.l!.countGrad(gen, d!*(digamma(l) + lr));
    this.r!.countGrad(gen, d!*(digamma(r) + lr));
  }
}

/**
 * Lazy `lbeta`.
 */
function lbeta(x:Expression<Real>, l:Expression<Real>) -> LogBeta {
  return construct<LogBeta>(x, l);
}

/**
 * Lazy `lbeta`.
 */
function lbeta(x:Real, l:Expression<Real>) -> LogBeta {
  return lbeta(box(x), l);
}

/**
 * Lazy `lbeta`.
 */
function lbeta(x:Expression<Real>, l:Real) -> LogBeta {
  return lbeta(x, box(l));
}
