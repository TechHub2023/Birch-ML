/**
 * Lazy `if_then_else`.
 */
acyclic class IfThenElse(cond:Expression<Boolean>, y:Expression<Real>,
    z:Expression<Real>) < ScalarExpression<Real> {  
  /**
   * Condition.
   */
  cond:Expression<Boolean>? <- cond;

  /**
   * Value if true.
   */
  y:Expression<Real>? <- y;
  
  /**
   * Value if false.
   */
  z:Expression<Real>? <- z;

  override function doDepth() -> Integer {
    return max(cond!.depth(), max(y!.depth(), z!.depth())) + 1;
  }

  override function doValue() -> Real {
    return if_then_else(cond!.value(), y!.value(), z!.value());
  }

  override function doEval(gen:Integer) -> Real {
    return if_then_else(cond!.countEval(gen), y!.countEval(gen), z!.countEval(gen));
  }

  override function doReval(gen:Integer) -> Real {
    return if_then_else(cond!.countReval(gen), y!.countReval(gen), z!.countReval(gen));
  }
  
  override function doGrad(gen:Integer) {
    cond!.countGrad(gen, 0.0);
    if cond!.eval() {
      y!.countGrad(gen, d!);
      z!.countGrad(gen, 0.0);
    } else {
      y!.countGrad(gen, 0.0);
      z!.countGrad(gen, d!);
    }
  }

  final override function doConstant() {
    cond!.value();
    y!.value();
    z!.value();
    cond <- nil;
    y <- nil;
    z <- nil;
  }
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Expression<Boolean>, y:Expression<Real>,
     z:Expression<Real>) -> IfThenElse {
  return construct<IfThenElse>(cond, y, z);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Expression<Boolean>, y:Expression<Real>,
    z:Real) -> IfThenElse {
  return if_then_else(cond, y, box(z));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Expression<Boolean>, y:Real,
     z:Expression<Real>) -> IfThenElse {
  return if_then_else(cond, box(y), z);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Expression<Boolean>, y:Real, z:Real) ->
     IfThenElse {
  return if_then_else(cond, box(y), box(z));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Boolean, y:Expression<Real>,
     z:Expression<Real>) -> IfThenElse {
  return if_then_else(box(cond), y, z);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Boolean, y:Expression<Real>, z:Real) ->
     IfThenElse {
  return if_then_else(box(cond), y, box(z));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(cond:Boolean, y:Real, z:Expression<Real>) ->
     IfThenElse {
  return if_then_else(box(cond), box(y), z);
}
