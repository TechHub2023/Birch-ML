/**
 * Lazy `if_then_else`.
 */
final class IfThenElse(l:Expression<Boolean>, m:Expression<Real>,
    r:Expression<Real>) < ScalarTernaryExpression<Expression<Boolean>,
    Expression<Real>,Expression<Real>,Real>(l, m, r) {  
  override function doCompute() {
    x <- if_then_else(l!.eval(), m!.eval(), r!.eval());
  }

  override function doGrad(gen:Integer) {
    l!.countGrad(gen, 0.0);
    if l!.eval() {
      m!.countGrad(gen, d!);
      r!.countGrad(gen, 0.0);
    } else {
      m!.countGrad(gen, 0.0);
      r!.countGrad(gen, d!);
    }
  }
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Expression<Boolean>, m:Expression<Real>,
     r:Expression<Real>) -> IfThenElse {
  return construct<IfThenElse>(l, m, r);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Expression<Boolean>, m:Expression<Real>,
    r:Real) -> IfThenElse {
  return if_then_else(l, m, box(r));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Expression<Boolean>, m:Real,
     r:Expression<Real>) -> IfThenElse {
  return if_then_else(l, box(m), r);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Expression<Boolean>, m:Real, r:Real) ->
     IfThenElse {
  return if_then_else(l, box(m), box(r));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Boolean, m:Expression<Real>,
     r:Expression<Real>) -> IfThenElse {
  return if_then_else(box(l), m, r);
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Boolean, m:Expression<Real>, r:Real) ->
     IfThenElse {
  return if_then_else(box(l), m, box(r));
}

/**
 * Lazy `if_then_else`.
 */
 function if_then_else(l:Boolean, m:Real, r:Expression<Real>) ->
     IfThenElse {
  return if_then_else(box(l), box(m), r);
}
