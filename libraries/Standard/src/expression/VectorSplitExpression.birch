/**
 * Boxed and split vector expression.
 *
 * - Value: Result type.
 * - Form: Expression type.
 */
final class VectorSplitExpression<Value,Form>(x:Value, f:Form) <
    BoxedForm<Value,Form>(x, f) {
  function grad(d:Real, i:Integer) {
    if this.f? {
      if this.visitCount == 0 {
        assert !this.d?;
        this.d <- vector(0.0, this.length());
      }
      assert this.d?;
      this.d![i] <- this.d![i] + d;
      this.visitCount <- this.visitCount + 1;
      if this.visitCount >= this.evalCount {
        assert this.visitCount == this.evalCount || this.evalCount == 0;
        // ^ can have visitCount > evalCount = 0 if eval() has never been
        //   called on this object, typically because it is root expression
        //   used from client code, rather than a subexpression used from
        //   other expressions
        global.grad(this.f!, this.d!);  // upstream gradients accumulated
        this.d <- nil;  // clear intermediate gradients to save memory
        this.visitCount <- 0;  // reset for next time
      }
    }
  }
}

/**
 * Box and split a vector expression into a vector of expressions.
 *
 * - f: Form of the expression.
 */
function vector_split<Form>(f:Form) -> {
  return vector_split(eval(f), f);
}

/**
 * Box and split a vector expression into a vector of expressions.
 *
 * - x: Result of the expression.
 * - f: Form of the expression.
 */
function vector_split<Value,Form>(x:Value, f:Form) -> {
  return construct<VectorSplitExpression<Value,Form>>(x, f);
}
