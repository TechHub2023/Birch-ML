/**
 * Lazy matrix addition.
 */
final class MatrixAdd(l:Expression<Real[_,_]>, r:Expression<Real[_,_]>) <
    MatrixBinaryExpression<Expression<Real[_,_]>,Expression<Real[_,_]>,
    Real[_,_]>(l, r) {  
  override function doRows() -> Integer {
    return global.rows(l!);
  }
  
  override function doColumns() -> Integer {
    return global.columns(l!);
  }
  
  override function doCompute() {
    x <- global.eval(l!) + global.eval(r!);
  }

  override function doGrad(gen:Integer) {
    count_grad(l!, gen, d!);
    count_grad(r!, gen, d!);
  }

  override function graftLinearMatrixGaussian() ->
      TransformLinearMatrix<MatrixGaussian>? {
    t:TransformLinearMatrix<MatrixGaussian>?;
    if !hasValue() {
      x1:MatrixGaussian?;

      if (t <- graft_linear_matrix_gaussian(l!))? {
        t!.add(r!);
      } else if (t <- graft_linear_matrix_gaussian(r!))? {
        t!.add(l!);
      } else if (x1 <- graft_matrix_gaussian(l!))? {
        t <- TransformLinearMatrix<MatrixGaussian>(box(identity(global.rows(r!))), x1!, r!);
      } else if (x1 <- graft_matrix_gaussian(r!))? {
        t <- TransformLinearMatrix<MatrixGaussian>(box(identity(global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }

  override function graftLinearMatrixNormalInverseWishart(compare:Distribution<LLT>) ->
      TransformLinearMatrix<MatrixNormalInverseWishart>? {
    t:TransformLinearMatrix<MatrixNormalInverseWishart>?;
    if !hasValue() {
      x1:MatrixNormalInverseWishart?;

      if (t <- graft_linear_matrix_normal_inverse_wishart(l!, compare))? {
        t!.add(r!);
      } else if (t <- graft_linear_matrix_normal_inverse_wishart(r!, compare))? {
        t!.add(l!);
      } else if (x1 <- graft_matrix_normal_inverse_wishart(l!, compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(identity(global.rows(l!))), x1!, r!);
      } else if (x1 <- graft_matrix_normal_inverse_wishart(r!, compare))? {
        t <- TransformLinearMatrix<MatrixNormalInverseWishart>(box(identity(global.rows(r!))), x1!, l!);
      }
    }
    return t;
  }
}

/**
 * Lazy matrix addition.
 */
operator (l:Expression<Real[_,_]> + r:Expression<Real[_,_]>) -> MatrixAdd {
  assert global.rows(l) == global.rows(r);
  assert global.columns(l) == global.columns(r);
  return construct<MatrixAdd>(l, r);
}

/**
 * Lazy matrix addition.
 */
operator (l:Real[_,_] + r:Expression<Real[_,_]>) -> MatrixAdd {
  return box(l) + r;
}

/**
 * Lazy matrix addition.
 */
operator (l:Expression<Real[_,_]> + r:Real[_,_]) -> MatrixAdd {
  return l + box(r);
}
