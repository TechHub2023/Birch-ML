hpp{{
/**
 * Program function type.
 */
typedef int prog_t(int argc, char** argv);

/**
 * Default-constructible object factory function type.
 */
typedef birch::Object_* fact_t();

/**
 * Retrieve a program function.
 *
 * @param name Program name.
 *
 * @return The program function, or `nullptr` if it does not exist.
 */
extern "C" prog_t* retrieve_program(const std::string& name);

/**
 * Register a program function.
 *
 * @param name Program name.
 * @param f Program function.
 *
 * @return Zero.
 */
int register_program(const std::string& name, prog_t* f);

/**
 * Retrieve a factory function.
 *
 * @param name Class name.
 *
 * @return The factory function, or `nullptr` if it does not exist.
 */
extern "C" fact_t* retrieve_factory(const std::string& name);

/**
 * Register a factory function.
 *
 * @param name Class name.
 * @param f Factory function.
 *
 * @return Zero.
 */
int register_factory(const std::string& name, fact_t* f);

}}

cpp{{
#include <map>

/**
 * Program function registry.
 */
static std::map<std::string,prog_t*>& programs() {
  static std::map<std::string,prog_t*> programs;
  return programs;
}
/**
 * Default-constructible object factory function registry.
 */
static std::map<std::string,fact_t*>& factories() {
  static std::map<std::string,fact_t*> factories;
  return factories;
}

extern "C" prog_t* retrieve_program(const std::string& name) {
  auto iter = programs().find(name);
  if (iter != programs().end()) {
    return iter->second;
  } else {
    return nullptr;
  }
}

int register_program(const std::string& name, prog_t* f) {
  programs()[name] = f;
  return 0;
}

extern "C" fact_t* retrieve_factory(const std::string& name) {
  auto iter = factories().find(name);
  if (iter != factories().end()) {
    return iter->second;
  } else {
    return nullptr;
  }
}

int register_factory(const std::string& name, fact_t* f) {
  factories()[name] = f;
  return 0;
}

}}
