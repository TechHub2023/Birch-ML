/**
 * Boolean value.
 */
final class BooleanValue(value:Boolean) < Value {
  /**
   * The value.
   */
  value:Boolean <- value;
  
  override function accept(writer:Writer) {
    writer.visit(this);
  }
  
  override function getBoolean() -> Boolean? {
    return value;
  }

  override function getInteger() -> Integer? {
    return Integer(value);
  }

  override function getReal() -> Real? {
    return Real(value);
  }

  override function getBooleanVector() -> Boolean[_]? {
    return vector(value, 1);
  }

  override function getIntegerVector() -> Integer[_]? {
    return vector(Integer(value), 1);
  }

  override function getRealVector() -> Real[_]? {
    return vector(Real(value), 1);
  }

  override function getBooleanMatrix() -> Boolean[_,_]? {
    return matrix(value, 1, 1);
  }

  override function getIntegerMatrix() -> Integer[_,_]? {
    return matrix(Integer(value), 1, 1);
  }

  override function getRealMatrix() -> Real[_,_]? {
    return matrix(Real(value), 1, 1);
  }

  override function pushNil() -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.pushNil();
    return o;
  }

  override function push(x:Boolean) -> Value {
    return BooleanVectorValue([value, x]);
  }

  override function push(x:Integer) -> Value {
    return IntegerVectorValue([Integer(value), x]);
  }

  override function push(x:Real) -> Value {
    return RealVectorValue([Real(value), x]);
  }

  override function push(x:String) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Object) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Boolean[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Integer[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Real[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }
}

/**
 * Create a BooleanValue.
 */
function BooleanValue(value:Boolean) -> BooleanValue {
  return construct<BooleanValue>(value);
}
