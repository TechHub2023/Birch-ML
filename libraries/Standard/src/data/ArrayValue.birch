/**
 * Array value.
 */
final class ArrayValue < Value {
  /**
   * Elements of the array. This uses Array rather than List or similar to
   * avoid reaching stack size limits for large data sets.
   */
  elements:Array<Buffer>;

  override function accept(writer:Writer) {
    writer.visit(this);
  }

  override function size() -> Integer {
    return elements.size();
  }

  override function walk() -> Iterator<Buffer> {
    return elements.walk();
  }

  override function insert(value:Buffer) {
    elements.pushBack(value);
  }

  override function pushNil() -> Value {
    let buffer <- Buffer();
    buffer.setNil();
    insert(buffer);
    return this;
  }

  override function push(x:Boolean) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Integer) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Real) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:String) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Object) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Boolean[_]) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Integer[_]) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function push(x:Real[_]) -> Value {
    insert(Buffer(x));
    return this;
  }

  override function getBooleanMatrix() -> Boolean[_,_]? {
    let nrows <- size();
    let rows <- walk();
    if rows.hasNext() {
      /* determine number of columns from first row */
      let row <- rows.next();
      let ncols <- row.size();
      X:Boolean[nrows,ncols];

      let x <- row.getBooleanVector();
      if x? {
        X[1,1..ncols] <- x!;
       } else {
        return nil;
      }

      /* read in remaining rows, requiring that they have the same number of
       * columns as the first */
      let i <- 1;
      while rows.hasNext() {
        row <- rows.next();
        ncols <- row.size();
        if ncols == columns(X) {
          x <- row.getBooleanVector();
          if x? {
            i <- i + 1;
            X[i,1..ncols] <- x!;
          } else {
            return nil;
          }
        } else {
          return nil;
        }
      }
      assert i == nrows;
      return X;
    }
    return nil;
  }

  override function getIntegerMatrix() -> Integer[_,_]? {
    let nrows <- size();
    let rows <- walk();
    if rows.hasNext() {
      /* determine number of columns from first row */
      let row <- rows.next();
      let ncols <- row.size();
      X:Integer[nrows,ncols];

      let x <- row.getIntegerVector();
      if x? {
        X[1,1..ncols] <- x!;
       } else {
        return nil;
      }

      /* read in remaining rows, requiring that they have the same number of
       * columns as the first */
      let i <- 1;
      while rows.hasNext() {
        row <- rows.next();
        ncols <- row.size();
        if ncols == columns(X) {
          x <- row.getIntegerVector();
          if x? {
            i <- i + 1;
            X[i,1..ncols] <- x!;
          } else {
            return nil;
          }
        } else {
          return nil;
        }
      }
      assert i == nrows;
      return X;
    }
    return nil;
  }

  override function getRealMatrix() -> Real[_,_]? {
    let nrows <- size();
    let rows <- walk();
    if rows.hasNext() {
      /* determine number of columns from first row */
      let row <- rows.next();
      let ncols <- row.size();
      X:Real[nrows,ncols];

      let x <- row.getRealVector();
      if x? {
        X[1,1..ncols] <- x!;
       } else {
        return nil;
      }

      /* read in remaining rows, requiring that they have the same number of
       * columns as the first */
      let i <- 1;
      while rows.hasNext() {
        row <- rows.next();
        ncols <- row.size();
        if ncols == columns(X) {
          x <- row.getRealVector();
          if x? {
            i <- i + 1;
            X[i,1..ncols] <- x!;
          } else {
            return nil;
          }
        } else {
          return nil;
        }
      }
      assert i == nrows;
      return X;
    }
    return nil;
  }
}

/**
 * Create an ArrayValue.
 */
function ArrayValue() -> ArrayValue {
  return construct<ArrayValue>();
}
