/**
 * Integer vector value.
 */
final class IntegerVectorValue(value:Integer[_]) < Value {
  /**
   * The value.
   */
  value:Integer[_] <- value;

  override function accept(writer:Writer) {
    writer.visit(this);
  }
  
  override function size() -> Integer {
    return length(value);
  }
  
  override function getIntegerVector() -> Integer[_]? {
    return value;
  }

  override function getIntegerMatrix() -> Integer[_,_]? {
    return column(value);
  }

  override function getRealVector() -> Real[_]? {
    return Real(value);
  }

  override function getRealMatrix() -> Real[_,_]? {
    return column(Real(value));
  }

  override function pushNil() -> Value {
    let o <- ArrayValue();
    for i in 1..length(value) {
      o.push(value[i]);
    }
    o.pushNil();
    return o;
  }

  override function push(x:Boolean) -> Value {
    return push(Integer(x));
  }

  override function push(x:Integer) -> Value {
    cpp{{
    value.insert(value.size(), x);
    }}
    return this;
  }

  override function push(x:Real) -> Value {
    let n <- length(value);
    return RealVectorValue(vector(\(i:Integer) -> Integer {
          return if_then_else(i == n + 1, x, Real(value[i]));
        }, n + 1));
  }

  override function push(x:String) -> Value {
    let o <- ArrayValue();
    for i in 1..length(value) {
      o.push(value[i]);
    }
    o.push(x);
    return o;
  }

  override function push(x:Object) -> Value {
    let o <- ArrayValue();
    for i in 1..length(value) {
      o.push(value[i]);
    }
    o.push(x);
    return o;
  }

  override function push(x:Boolean[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Integer[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Real[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }
}

/**
 * Create an IntegerVectorValue.
 */
function IntegerVectorValue(value:Integer[_]) -> IntegerVectorValue {
  return construct<IntegerVectorValue>(value);
}
