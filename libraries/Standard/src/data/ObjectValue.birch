/**
 * Object value.
 */
final class ObjectValue < Value {
  /**
   * Entries of the object. This uses Array rather than List or similar to
   * avoid reaching stack size limits for large data sets, and to keep
   * entries in the order given.
   */
  entries:Array<Entry>;

  override function accept(writer:Writer) {
    writer.visit(this);
  }

  override function find(key:String) -> Buffer? {
    let iter <- entries.walk();
    while iter.hasNext() {
      let entry <- iter.next();
      if entry.key == key {
        return entry.value;
      }
    }
    return nil;
  }
  
  override function insert(key:String, value:Buffer) {
    entries.pushBack(Entry(key, value));
  }

  override function pushNil() -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.pushNil();
    return o;
  }

  override function push(x:Boolean) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Integer) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Real) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:String) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Object) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Boolean[_]) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Integer[_]) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }

  override function push(x:Real[_]) -> Value {
    let b <- Buffer();
    b.content <- this;
    let o <- ArrayValue();
    o.push(b);
    o.push(x);
    return o;
  }
}

/**
 * Create an ObjectValue,
 */
function ObjectValue() -> ObjectValue {
  return construct<ObjectValue>();
}
