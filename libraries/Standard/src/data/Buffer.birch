/**
 * Data in memory.
 *
 * `Buffer` is used to temporarily store data in memory before writing to a
 * file, or after reading from a file. It follows the
 * [JSON](https://www.json.org) data model, where data is arranged
 * hierachically into *objects* (*dictionaries*, *mappings*) of *key*-*value*
 * *entries*, and *arrays* (*lists*, *sequences*) of *elements*. The
 * representation is schemaless.
 *
 * Keys are strings. Values and elements may be strings, reals, integers,
 * Booleans or nulls---or, recursively, other `Buffer` objects. Special
 * provisions are made for efficient storage of numerical vectors and
 * matrices.
 *
 * Set and retrieve entries from objects (in the JSON sense) using the `set()`
 * and `get()` member functions. Construct and iterate through arrays (in the
 * JSON sense) using the `push()` and `walk()` member functions.
 */
class Buffer {
  /*
   * The various values a buffer may take. These work as follows:
   *
   * - If `keys` is defined, then `values` is also defined, and the buffer
   *   represents an object (in the JSON sense). If `keys` and `values` are
   *   defined but empty, it represents an empty object.
   * - If `keys` is not defined, but `values` is defined, the buffer
   *   represents an array (in the JSON sense). If `values` is defined but
   *   empty, it represents an empty array.
   * - If one or more of the other values are defined, the buffer represents
   *   a scalar---or, if the value is one of the vector or matrix values,
   *   an array (in the JSON sense) but stored compactly for faster reading
   *   and writing.
   * - If none of the values are defined, the buffer represents nil. In JSON
   *   files, this is rendered as `null`.
   *
   * With the excepton of objects (in the JSON sense), where both `keys` and
   * `values` are defined, at most one of these values should be defined.
   */
  keys:String[_]?;
  values:Buffer[_]?;
  scalarString:String?;
  scalarReal:Real?;
  scalarInteger:Integer?;
  scalarBoolean:Boolean?;
  vectorReal:Real[_]?;
  vectorInteger:Integer[_]?;
  vectorBoolean:Boolean[_]?;
  matrixReal:Real[_,_]?;
  matrixInteger:Integer[_,_]?;
  matrixBoolean:Boolean[_,_]?;

  /**
   * Is the value nil?
   */
  function isNil() -> Boolean {
    return !(keys? || values? || scalarString? || scalarReal? ||
        scalarInteger? || scalarBoolean? || vectorReal? || vectorInteger? ||
        vectorBoolean? || matrixReal? || matrixInteger? || matrixBoolean?);
  }

  /**
   * Is the value of an entry nil? If the given key does not exist, returns
   * true.
   */
  function isNil(key:String) -> Boolean {
    let buffer <- get(key);
    if buffer? {
      return buffer!.isNil();
    } else {
      return true;
    }
  }

  /**
   * Set to nil.
   */
  function setNil() {
    keys <- nil;
    values <- nil;
    scalarString <- nil;
    scalarReal <- nil;
    scalarInteger <- nil;
    scalarBoolean <- nil;
    vectorReal <- nil;
    vectorInteger <- nil;
    vectorBoolean <- nil;
    matrixReal <- nil;
    matrixInteger <- nil;
    matrixBoolean <- nil;
  }

  /**
   * Set the value of an entry to nil.
   */
  function setNil(key:String) {
    let value <- Buffer();
    value.setNil();
    set(key, value);
  }

  /**
   * Is the value empty? A value is empty if it is nil, or an empty object, or
   * an empty array.
   */
  function isEmpty() -> Boolean {
    return isNil() || (values? && length(values!) == 0);
  }

  /**
   * Is the value of an entry empty? If the given key does not exist, returns
   * true.
   */
  function isEmpty(key:String) -> Boolean {
    let buffer <- get(key);
    if buffer? {
      return buffer!.isEmpty();
    } else {
      return true;
    }
  }

  /**
   * Set to an empty object.
   */
  function setEmptyObject() {
    setNil();
    keys:String[_];
    values:Buffer[_];
    this.keys <- keys;
    this.values <- values;
  }

  /**
   * Set the value of an entry to an empty object.
   */
  function setEmptyObject(key:String) {
    let value <- Buffer();
    value.setEmptyObject();
    set(key, value);
  }

  /**
   * Set to an empty array.
   */
  function setEmptyArray() {
    setNil();
    values:Buffer[_];
    this.values <- values;
  }

  /**
   * Set the value of an entry to an empty array.
   */
  function setEmptyArray(key:String) {
    let value <- Buffer();
    value.setEmptyArray();
    set(key, value);
  }

  /**
   * Split a vector into an array of single elements, or a matrix into an
   * array of vectors.
   */
  function split() {
    let iter <- walk();
    setNil();
    while iter.hasNext() {
      push(iter.next());
    }
    assert isEmpty() || (!keys? && values?);
  }

  /**
   * Size. For a nil buffer the size is zero, for an object or scalar it is
   * one, for an array it is the length. For an array, if it represents a
   * numerical vector, its length is the same as the length of that vector;
   * if it represents a numerical matrix, its length is the same as the number
   * of rows in that matrix.
   */
  function size() -> Integer {
    if keys? || scalarString? || scalarReal? || scalarInteger? ||
        scalarBoolean? {
      return 1;
    } else if values? {
      return length(values!);
    } else if vectorReal? {
      return length(vectorReal!);
    } else if vectorInteger? {
      return length(vectorInteger!);
    } else if vectorBoolean? {
      return length(vectorBoolean!);
    } else if matrixReal? {
      return rows(matrixReal!);
    } else if matrixInteger? {
      return rows(matrixInteger!);
    } else if matrixBoolean? {
      return rows(matrixBoolean!);
    } else {
      return 0;
    }
  }

  /**
   * Size of an entry.
   *
   * - key: Key of the entry.
   *
   * Returns: The size. In the case that the key does not exist, returns 0.
   */
  function size(key:String) -> Integer {
    let buffer <- get(key);
    if buffer? {
      return buffer!.size();
    } else {
      return 0;
    }
  }

  /**
   * Get the value.
   *
   * - Type: The desired type.
   *
   * Returns: An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>() -> Type? {
    x:Type?;
    return Type?(doGet(x));
  }

  /**
   * Get the value of an entry.
   *
   * - Type: The desired type.
   *
   * - key: Key of the entry.
   *
   * Returns: An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>(key:String) -> Type? {
    let buffer <- get(key);
    if buffer? {
      return buffer!.get<Type>();
    } else {
      return nil;
    }
  }

  /**
   * Get the value.
   *
   * - Type: The desired type.
   *
   * - o: Existing object.
   *
   * This version is used when reading objects of class type, where instead of
   * constructing a new object then calling its `read()` function, an existing
   * object is provided, calling its `read()` function directly.
   */
  function get<Type>(o:Type) {
    o.read(this);
  }

  /**
   * Get the value of an entry.
   *
   * - Type: The desired type.
   *
   * - key: Key of the entry.
   * - o: Existing object.
   *
   * This version is used when reading objects of class type, where instead of
   * constructing a new object then calling its `read()` function, an existing
   * object is provided, calling its `read()` function directly.
   */
  function get<Type>(key:String, o:Type) {
    let buffer <- get(key);
    if buffer? {
      buffer!.get<Type>(o);
    }
  }

  /**
   * Get the value of an entry as a buffer.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if the entry exists, otherwise no value.
   */
  function get(key:String) -> Buffer? {
    if keys? {
      for i in 1..length(keys!) {
        if keys![i] == key {
          return values![i];
        }
      }
    }
    return nil;
  }

  /**
   * Set as an object (in the JSON sense).
   *
   * - keys: Keys.
   * - values: Values.
   */
  function set(keys:String[_], values:Buffer[_]) {
    assert length(keys) == length(values);
    setNil();
    this.keys <- keys;
    this.values <- values;
  }

  /**
   * Set the value.
   *
   * - x: Value.
   */
  function set<Type>(x:Type) {
    doSet(x);
  }

  /**
   * Set the value.
   *
   * - t: Step number.
   * - x: Value.
   */
  function set<Type>(t:Integer, x:Type) {
    doSet(t, x);
  }

  /**
   * Set an entry as an object (in the JSON sense).
   *
   * - key: Key of the entry.
   * - keys: Keys.
   * - values: Values.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set(key:String, keys:String[_], values:Buffer[_]) {
    set(key, Buffer(keys, values));
  }

  /**
   * Set the value of an entry.
   *
   * - key: Key of the entry.
   * - x: Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set<Type>(key:String, x:Type) {
    set(key, Buffer(x));
  }

  /**
   * Set the value of an entry.
   *
   * - key: Key of the entry.
   * - t: Step number.
   * - x: Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set<Type>(key:String, t:Integer, x:Type) {
    set(key, Buffer(t, x));
  }

  /**
   * Set the value of an entry.
   *
   * - key: Key of the entry.
   * - x: Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set(key:String, x:Buffer) {
    if !keys? {
      setNil();
      keys <- [key];
      values <- [x];
    } else {
      keys <- stack(keys!, key);
      values <- stack(values!, x);
    }
  }

  /**
   * Obtain an iterator. For a nil buffer this is an empty iterator, for an
   * object or scalar it is a singleton iterator, for an array it is over the
   * elements. Where the array represents a numerical vector the iterator is
   * similarly over the elements of that vector; where it represents a
   * numerical matrix it is over the rows of that matrix.
   */
  function walk() -> Iterator<Buffer> {
    if keys? {
      return construct<ObjectBufferIterator>(keys!, values!);
    } else if values? {
      return construct<ArrayBufferIterator>(values!);
    } else if scalarString? {
      return construct<ScalarBufferIterator<String>>(scalarString!);
    } else if scalarReal? {
      return construct<ScalarBufferIterator<Real>>(scalarReal!);
    } else if scalarInteger? {
      return construct<ScalarBufferIterator<Integer>>(scalarInteger!);
    } else if scalarBoolean? {
      return construct<ScalarBufferIterator<Boolean>>(scalarBoolean!);
    } else if vectorReal? {
      return construct<VectorBufferIterator<Real>>(vectorReal!);
    } else if vectorInteger? {
      return construct<VectorBufferIterator<Integer>>(vectorInteger!);
    } else if vectorBoolean? {
      return construct<VectorBufferIterator<Boolean>>(vectorBoolean!);
    } else if matrixReal? {
      return construct<MatrixBufferIterator<Real>>(matrixReal!);
    } else if matrixInteger? {
      return construct<MatrixBufferIterator<Integer>>(matrixInteger!);
    } else if matrixBoolean? {
      return construct<MatrixBufferIterator<Boolean>>(matrixBoolean!);
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Obtain an iterator over an entry.
   *
   * - key: Key of the entry.
   *
   * Returns: The iterator. In the case that the key does not exist, returns
   * the empty iterator.
   */
  function walk(key:String) -> Iterator<Buffer> {
    let buffer <- get(key);
    if buffer? {
      return buffer!.walk();
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Push a value.
   *
   * - x: Value.
   *
   * If the buffer is empty, the result is an array with the single element
   * `x`. If the buffer is a non-empty object or scalar, the result is an
   * array with two elements: that value followed by `x`. If the buffer is a
   * non-empty array then `x` is appended to the end.
   */
  function push<Type>(x:Type) {
    doPush(x);
  }

  /**
   * Push a value.
   *
   * - t: Step number.
   * - x: Value.
   */
  function push<Type>(t:Integer, x:Type) {
    doPush(t, x);
  }

  /**
   * Push a value.
   *
   * - x: Value.
   */
  function push(x:Buffer) {
    if isEmpty() {
      keys <- nil;
      values <- [x];
    } else if !keys? && values? {
      values <- stack(values!, x);
    } else {
      split();
      push(x);
    }
  }

  /**
   * Push a value to an entry.
   *
   * - key: Key of the entry.
   * - x: Value.
   *
   * If the entry does not exists then it is created, its value an array
   * containing the single element `x`.
   */
  function push<Type>(key:String, x:Type) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- Buffer();
      set(key, buffer!);
    }
    buffer!.push(x);
  }

  /**
   * Push a value to an entry.
   *
   * - key: Key of the entry.
   * - t: Step number.
   * - x: Value.
   */
  function push<Type>(key:String, t:Integer, x:Type) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- Buffer();
      set(key, buffer!);
    }
    buffer!.push(t, x);
  }

  /**
   * Push a value to an entry .
   *
   * - key: Key of the entry.
   * - x: Value.
   */
  function push(key:String, x:Buffer) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- Buffer();
      set(key, buffer!);
    }
    buffer!.push(x);
  }

  /**
   * Push a nil value.
   */
  function pushNil() {
    push(Buffer());
  }

  /**
   * Push a nil value to an entry.
   *
   * - key: Key of the entry.
   */
  function pushNil(key:String) {
    push(key, Buffer());
  }

  function accept(writer:Writer) {
    if keys? {
      writer.visit(keys!, values!);
    } else if values? {
      writer.visit(values!);
    } else if scalarString? {
      writer.visit(scalarString!);
    } else if scalarReal? {
      writer.visit(scalarReal!);
    } else if scalarInteger? {
      writer.visit(scalarInteger!);
    } else if scalarBoolean? {
      writer.visit(scalarBoolean!);
    } else if vectorReal? {
      writer.visit(vectorReal!);
    } else if vectorInteger? {
      writer.visit(vectorInteger!);
    } else if vectorBoolean? {
      writer.visit(vectorBoolean!);
    } else if matrixReal? {
      writer.visit(matrixReal!);
    } else if matrixInteger? {
      writer.visit(matrixInteger!);
    } else if matrixBoolean? {
      writer.visit(matrixBoolean!);
    } else {
      writer.visitNil();
    }
  }

  function doGet(x:Boolean?) -> Boolean? {
    if scalarBoolean? {
      return scalarBoolean!;
    } else if scalarInteger? {
      return scalar<Boolean>(scalarInteger!);
    } else if scalarReal? {
      return scalar<Boolean>(scalarReal!);
    } else if scalarString? {
      return from_string<Boolean>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:Integer?) -> Integer? {
    if scalarBoolean? {
      return scalar<Integer>(scalarBoolean!);
    } else if scalarInteger? {
      return scalarInteger!;
    } else if scalarReal? {
      return scalar<Integer>(scalarReal!);
    } else if scalarString? {
      return from_string<Integer>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:Real?) -> Real? {
    if scalarBoolean? {
      return scalar<Real>(scalarBoolean!);
    } else if scalarInteger? {
      return scalar<Real>(scalarInteger!);
    } else if scalarReal? {
      return scalarReal!;
    } else if scalarString? {
      return from_string<Real>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:String?) -> String? {
    if scalarBoolean? {
      return to_string(scalarBoolean!);
    } else if scalarInteger? {
      return to_string(scalarInteger!);
    } else if scalarReal? {
      return to_string(scalarReal!);
    } else if scalarString? {
      return scalarString!;
    } else {
      return nil;
    }
  }

  function doGet<Type>(x:Type?) -> Type? {
    return make<Type>(this);
  }

  function doGet(x:Boolean[_]?) -> Boolean[_]? {
    if vectorBoolean? {
      return vectorBoolean!;
    } else if vectorInteger? {
      return vector<Boolean>(vectorInteger!);
    } else if vectorReal? {
      return vector<Boolean>(vectorReal!);
    } else {
      return doGetVector<Boolean>();
    }
  }

  function doGet(x:Integer[_]?) -> Integer[_]? {
    if vectorBoolean? {
      return vector<Integer>(vectorBoolean!);
    } else if vectorInteger? {
      return vectorInteger!;
    } else if vectorReal? {
      return vector<Integer>(vectorReal!);
    } else {
      return doGetVector<Integer>();
    }
  }

  function doGet(x:Real[_]?) -> Real[_]? {
    if vectorBoolean? {
      return vector<Real>(vectorBoolean!);
    } else if vectorInteger? {
      return vector<Real>(vectorInteger!);
    } else if vectorReal? {
      return vectorReal!;
    } else {
      return doGetVector<Real>();
    }
  }

  function doGet<Type>(x:Type[_]?) -> Type[_]? {
    return doGetVector<Type>();
  }

  function doGetVector<Type>() -> Type[_]? {
    if isNil() {
      return nil;
    } else {
      y:Type[_];
      let iter <- walk();
      while iter.hasNext() {
        let z <- iter.next().get<Type>();
        if z? {
          cpp{{
          y.push(z.value());
          }}
        } else {
          return nil;
        }
      }
      return y;
    }
  }

  function doGet(x:Boolean[_,_]?) -> Boolean[_,_]? {
    if matrixBoolean? {
      return matrixBoolean!;
    } else if matrixInteger? {
      return matrix<Boolean>(matrixInteger!);
    } else if matrixReal? {
      return matrix<Boolean>(matrixReal!);
    } else {
      return doGetMatrix<Boolean>();
    }
  }

  function doGet(x:Integer[_,_]?) -> Integer[_,_]? {
    if matrixBoolean? {
      return matrix<Integer>(matrixBoolean!);
    } else if matrixInteger? {
      return matrixInteger!;
    } else if matrixReal? {
      return matrix<Integer>(matrixReal!);
    } else {
      return doGetMatrix<Integer>();
    }
  }

  function doGet(x:Real[_,_]?) -> Real[_,_]? {
    if matrixBoolean? {
      return matrix<Real>(matrixBoolean!);
    } else if matrixInteger? {
      return matrix<Real>(matrixInteger!);
    } else if matrixReal? {
      return matrixReal!;
    } else {
      return doGetMatrix<Real>();
    }
  }

  function doGet<Type>(x:Type[_,_]?) -> Type[_,_]? {
    return doGetMatrix<Type>();
  }

  function doGetMatrix<Type>() -> Type[_,_]? {
    if isNil() {
      return nil;
    } else {
      y:Type[_];
      let nrows <- 0;
      let ncols <- 0;
      let iter <- walk();
      while iter.hasNext() {
        let z <- iter.next().get<Type[_]>();
        if z? && (nrows == 0 || ncols == length(z!)) {
          nrows <- nrows + 1;
          ncols <- length(z!);
          for i in 1..ncols {
            let element <- z![i];
            cpp{{
            y.push(element);
            }}
          }
        } else {
          return nil;
        }
      }
      return matrix(\(i:Integer, j:Integer) -> Type {
            return y[(i - 1)*ncols + j];
          }, nrows, ncols);
    }
  }

  function doSet(x:Boolean) {
    setNil();
    scalarBoolean <- x;
  }

  function doSet(x:Integer) {
    setNil();
    scalarInteger <- x;
  }

  function doSet(x:Real) {
    setNil();
    scalarReal <- x;
  }

  function doSet(x:String) {
    setNil();
    scalarString <- x;
  }

  function doSet<Type>(x:Type) {
    setNil();
    x.write(this);
  }

  function doSet<Type>(t:Integer, x:Type) {
    setNil();
    x.write(t, this);
  }

  function doSet(x:Boolean[_]) {
    setNil();
    vectorBoolean <- x;
  }

  function doSet(x:Integer[_]) {
    setNil();
    vectorInteger <- x;
  }

  function doSet(x:Real[_]) {
    setNil();
    vectorReal <- x;
  }

  function doSet<Type>(x:Type[_]) {
    setEmptyArray();
    for i in 1..length(x) {
      push(Buffer(x[i]));
    }
  }

  function doSet<Type>(t:Integer, x:Type[_]) {
    setEmptyArray();
    for i in 1..length(x) {
      push(Buffer(t, x[i]));
    }
  }

  function doSet(x:Boolean[_,_]) {
    setNil();
    matrixBoolean <- x;
  }

  function doSet(x:Integer[_,_]) {
    setNil();
    matrixInteger <- x;
  }

  function doSet(x:Real[_,_]) {
    setNil();
    matrixReal <- x;
  }

  function doPush(x:Boolean) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set([scalarBoolean!, x]);
    } else if scalarInteger? {
      set([scalarInteger!, scalar<Integer>(x)]);
    } else if scalarReal? {
      set([scalarReal!, scalar<Real>(x)]);
    } else if vectorBoolean? {
      cpp{{
      vectorBoolean.value().push(x);
      }}
    } else if vectorInteger? {
      push(scalar<Integer>(x));
    } else if vectorReal? {
      push(scalar<Real>(x));
    } else {
      push(Buffer(x));
    }
  }

  function doPush(x:Integer) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set([scalar<Integer>(scalarBoolean!), x]);
    } else if scalarInteger? {
      set([scalarInteger!, x]);
    } else if scalarReal? {
      set([scalarReal!, scalar<Real>(x)]);
    } else if vectorBoolean? {
      set(stack(vector<Integer>(vectorBoolean!), x));
    } else if vectorInteger? {
      cpp{{
      vectorInteger.value().push(x);
      }}
    } else if vectorReal? {
      push(scalar<Real>(x));
    } else {
      push(Buffer(x));
    }
  }

  function doPush(x:Real) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set([scalar<Real>(scalarBoolean!), x]);
    } else if scalarInteger? {
      set([scalar<Real>(scalarInteger!), x]);
    } else if scalarReal? {
      set([scalarReal!, x]);
    } else if vectorBoolean? {
      set(stack(vector<Real>(vectorBoolean!), x));
    } else if vectorInteger? {
      set(stack(vector<Real>(vectorInteger!), x));
    } else if vectorReal? {
      cpp{{
      vectorReal.value().push(x);
      }}
    } else {
      push(Buffer(x));
    }
  }

  function doPush(x:String) {
    push(Buffer(x));
  }

  function doPush<Type>(x:Type) {
    push(Buffer(x));
  }

  function doPush<Type>(t:Integer, x:Type) {
    push(Buffer(t, x));
  }

  function doPush(x:Boolean[_]) {
    if isEmpty() {
      set(row(x));
    } else if vectorBoolean? {
      set(stack(row(vectorBoolean!), row(x)));
    } else if matrixBoolean? && columns(matrixBoolean!) == length(x) {
      set(stack(matrixBoolean!, row(x)));
    } else if vectorInteger? || matrixInteger? {
      push(vector<Integer>(x));
    } else if vectorReal? || matrixReal? {
      push(vector<Real>(x));
    } else {
      push(Buffer(x));
    }
  }

  function doPush(x:Integer[_]) {
    if isEmpty() {
      set(row(x));
    } else if vectorBoolean? {
      set(stack(matrix<Integer>(row(vectorBoolean!)), row(x)));
    } else if matrixBoolean? && columns(matrixBoolean!) == length(x) {
      set(stack(matrix<Integer>(matrixBoolean!), row(x)));
    } else if vectorInteger? {
      set(stack(row(vectorInteger!), row(x)));
    } else if matrixInteger? && columns(matrixInteger!) == length(x) {
      set(stack(matrixInteger!, row(x)));
    } else if vectorReal? || matrixReal? {
      push(vector<Real>(x));
    } else {
      push(Buffer(x));
    }
  }

  function doPush(x:Real[_]) {
    if isEmpty() {
      set(row(x));
    } else if vectorBoolean? {
      set(stack(matrix<Real>(row(vectorBoolean!)), row(x)));
    } else if matrixBoolean? && columns(matrixBoolean!) == length(x) {
      set(stack(matrix<Real>(matrixBoolean!), row(x)));
    } else if vectorInteger? {
      set(stack(matrix<Real>(row(vectorInteger!)), row(x)));
    } else if matrixInteger? && columns(matrixInteger!) == length(x) {
      set(stack(matrix<Real>(matrixInteger!), row(x)));
    } else if vectorReal? {
      set(stack(row(vectorReal!), row(x)));
    } else if matrixReal? && columns(matrixReal!) == length(x) {
      set(stack(matrixReal!, row(x)));
    } else {
      push(Buffer(x));
    }
  }
}

/**
 * Create a Buffer.
 */
function Buffer() -> Buffer {
  return construct<Buffer>();
}

/**
 * Create a Buffer.
 *
 * - root: Root value.
 */
function Buffer<Type>(root:Type) -> Buffer {
  o:Buffer;
  o.set(root);
  return o;
}

/**
 * Create a Buffer.
 *
 * - t: Step number.
 * - root: Root value.
 */
function Buffer<Type>(t:Integer, root:Type) -> Buffer {
  o:Buffer;
  o.set(t, root);
  return o;
}

/**
 * Create a Buffer representing an object (in the JSON sense).
 *
 * - keys: Keys.
 * - values: Values.
 */
function Buffer(keys:String[_], values:Buffer[_]) -> Buffer {
  o:Buffer;
  o.set(keys, values);
  return o;
}
