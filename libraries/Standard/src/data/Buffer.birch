/**
 * Buffer in memory.
 *
 * `Buffer` is used to temporarily store data in memory before writing to a
 * file, or after reading from a file. It follows the
 * [JSON](https://www.json.org) data model, where data is arranged
 * hierachically in *objects* (dictionaries) of key-value members, and
 * *arrays* of elements. Keys are strings. Values and elements may be strings,
 * reals, integers, Booleans or nulls. Special provisions are made for
 * efficient representation of numerical vectors and matrices. The
 * representation is schemaless and all types variant.
 *
 * Objects (in the JSON sense) are created using `set()`. Arrays (in the
 * JSON sense) are created using the various `push()` member functions. When
 * `push()` is called on a `Buffer` it may invoke a type conversion for the
 * values stored in that `Buffer`. Transitively, a scalar `Boolean` can be
 * converted to an `Integer`, can be converted to a `Real`. Similarly, a
 * scalar can be converted to a vector of the same basic type. So, for
 * example, calling `push(Real)` on a `Buffer` holding an `Integer` will
 * convert it to holding a `Real[_]` (`Integer` converts to `Real`, scalar
 * converts to vector).
 */
final class Buffer {
  /**
   * Contents of the buffer.
   */
  content:Value?;

  /**
   * Accept a generator.
   */
  function accept(writer:Writer) {
    if !content? {
      content <- NilValue();
    }
    content!.accept(writer);
  }

  /**
   * Remove all entries from an object.
   */
  function clear() {
    content <- nil;
  }

  /**
   * Find an entry in an object.
   */
  function find(key:String) -> Buffer? {
    if content? {
      return content!.find(key);
    } else {
      return nil;
    }
  }

  /**
   * Insert an entry in an object.
   */
  function insert(key:String, value:Buffer) {
    if !content? {
      content <- ObjectValue();
    }
    content!.insert(key, value);
  }

  /**
   * Insert an entry in an array.
   */
  function insert(value:Buffer) {
    if !content? {
      content <- ArrayValue();
    }
    content!.insert(value);
  }

  /**
   * Get this as a Boolean.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getBoolean() -> Boolean? {
    if content? {
      return content!.getBoolean();
    } else {
      return nil;
    }
  }

  /**
   * Get this as an integer.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getInteger() -> Integer? {
    if content? {
      return content!.getInteger();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a real.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getReal() -> Real? {
    if content? {
      return content!.getReal();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a string.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getString() -> String? {
    if content? {
      return content!.getString();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a vector of Booleans.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getBooleanVector() -> Boolean[_]? {
    if content? {
      return content!.getBooleanVector();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a vector of integers.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getIntegerVector() -> Integer[_]? {
    if content? {
      return content!.getIntegerVector();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a vector of reals.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getRealVector() -> Real[_]? {
    if content? {
      return content!.getRealVector();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a matrix of Booleans.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getBooleanMatrix() -> Boolean[_,_]? {
    if content? {
      return content!.getBooleanMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a matrix of integers.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getIntegerMatrix() -> Integer[_,_]? {
    if content? {
      return content!.getIntegerMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a matrix of reals.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getRealMatrix() -> Real[_,_]? {
    if content? {
      return content!.getRealMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get this as a factorized matrix.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getLLT() -> LLT? {
    if content? {
      let X <- content!.getRealMatrix();
      if X? {
        return llt(X!);
      }
    }
    return nil;
  }

  /**
   * Get this as a Boolean.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Boolean?) -> Boolean? {
    return getBoolean();
  }

  /**
   * Get this as an integer.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Integer?) -> Integer? {
    return getInteger();
  }
  
  /**
   * Get this as a real.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Real?) -> Real? {
    return getReal();
  }

  /**
   * Get this as a string.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:String?) -> String? {
    return getString();
  }

  /**
   * Get this as an object.
   *
   * - value: The object.
   *
   * Return: The object.
   */
  function get(value:Object?) -> Object? {
    if value? {
      value!.read(this);
    }
    return value;
  }

  /**
   * Get this as a vector of Booleans.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Boolean[_]?) -> Boolean[_]? {
    return getBooleanVector();
  }

  /**
   * Get this as a vector of integers.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Integer[_]?) -> Integer[_]? {
    return getIntegerVector();
  }

  /**
   * Get this as a vector of reals.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Real[_]?) -> Real[_]? {
    return getRealVector();
  }

  /**
   * Get this as a matrix of Booleans.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Boolean[_,_]?) -> Boolean[_,_]? {
    return getBooleanMatrix();
  }

  /**
   * Get this as a matrix of integers.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Integer[_,_]?) -> Integer[_,_]? {
    return getIntegerMatrix();
  }

  /**
   * Get this as a matrix of reals.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Real[_,_]?) -> Real[_,_]? {
    return getRealMatrix();
  }

  /**
   * Get this as a factorized matrix.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:LLT?) -> LLT? {
    return getLLT();
  }

  /**
   * Set this as nil.
   */
  function setNil() {
    content <- NilValue();
  }
  
  /**
   * Set this.
   */
  function set(value:Boolean) {
    content <- BooleanValue(value);
  }

  /**
   * Set this.
   */
  function set(value:Integer) {
    content <- IntegerValue(value);
  }

  /**
   * Set this.
   */
  function set(value:Real) {
    content <- RealValue(value);
  }

  /**
   * Set this.
   */
  function set(value:String) {
    content <- StringValue(value);
  }
  
  /**
   * Set this.
   */
  function set(value:Object) {
    value.write(this);
  }
  
  /**
   * Set this.
   */
  function set(value:Boolean[_]) {
    content <- BooleanVectorValue(value);
  }

  /**
   * Set this.
   */
  function set(value:Integer[_]) {
    content <- IntegerVectorValue(value);
  }

  /**
   * Set this.
   */
  function set(value:Real[_]) {
    content <- RealVectorValue(value);
  }

  /**
   * Set this.
   */
  function set(value:String[_]) {
    content <- ArrayValue();
    for i in 1..rows(value) {
      push(value[i]);
    }
  }

  /**
   * Set this.
   */
  function set(value:Object[_]) {
    content <- ArrayValue();
    for i in 1..rows(value) {
      push(value[i]);
    }
  }

  /**
   * Set this.
   */
  function set(value:Boolean[_,_]) {
    content <- ArrayValue();
    for i in 1..rows(value) {
      push(row(value, i));
    }
  }

  /**
   * Set this.
   */
  function set(value:Integer[_,_]) {
    content <- ArrayValue();
    for i in 1..rows(value) {
      push(row(value, i));
    }
  }

  /**
   * Set this.
   */
  function set(value:Real[_,_]) {
    content <- ArrayValue();
    for i in 1..rows(value) {
      push(row(value, i));
    }
  }

  /**
   * Set this.
   */
  function set(value:LLT) {
    set(canonical(value));
  }

  /**
   * Get an entry in an object as a Boolean.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getBoolean(key:String) -> Boolean? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getBoolean();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as an integer.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getInteger(key:String) -> Integer? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getInteger();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a real.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getReal(key:String) -> Real? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getReal();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a string.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getString(key:String) -> String? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getString();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a vector of Booleans.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getBooleanVector(key:String) -> Boolean[_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getBooleanVector();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a vector of integers.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getIntegerVector(key:String) -> Integer[_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getIntegerVector();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a vector of reals.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getRealVector(key:String) -> Real[_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getRealVector();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a matrix of Booleans.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getBooleanMatrix(key:String) -> Boolean[_,_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getBooleanMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a matrix of integers.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getIntegerMatrix(key:String) -> Integer[_,_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getIntegerMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a matrix of reals.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getRealMatrix(key:String) -> Real[_,_]? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getRealMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a factorized matrix.
   *
   * - key: Key of the entry.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getLLT(key:String) -> LLT? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.getLLT();
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a Boolean.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(key:String, value:Boolean?) -> Boolean? {
    return getBoolean(key);
  }

  /**
   * Get an entry in an object as an integer.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(key:String, value:Integer?) -> Integer? {
    return getInteger(key);
  }

  /**
   * Get an entry in an object as a real.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(key:String, value:Real?) -> Real? {
    return getReal(key);
  }

  /**
   * Get an entry in an object as a string.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(key:String, value:String?) -> String? {
    return getString(key);
  }

  /**
   * Get an entry in an object as an object.
   *
   * - key: Key of the entry.
   * - value: The object.
   *
   * Return: The object.
   */
  function get(key:String, value:Object?) -> Object? {
    let buffer <- find(key);
    if buffer? {
      return buffer!.get(value);
    } else {
      return nil;
    }
  }

  /**
   * Get an entry in an object as a vector of Booleans.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(key:String, value:Boolean[_]?) -> Boolean[_]? {
    return getBooleanVector(key);
  }

  /**
   * Get an entry in an object as a vector of integers.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(key:String, value:Integer[_]?) -> Integer[_]? {
    return getIntegerVector(key);
  }

  /**
   * Get an entry in an object as a vector of reals.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(key:String, value:Real[_]?) -> Real[_]? {
    return getRealVector(key);
  }

  /**
   * Get an entry in an object as a matrix of Booleans.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(key:String, value:Boolean[_,_]?) -> Boolean[_,_]? {
    return getBooleanMatrix(key);
  }

  /**
   * Get an entry in an object as a matrix of integers.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(key:String, value:Integer[_,_]?) -> Integer[_,_]? {
    return getIntegerMatrix(key);
  }

  /**
   * Get an entry in an object as a matrix of reals.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(key:String, value:Real[_,_]?) -> Real[_,_]? {
    return getRealMatrix(key);
  }

  /**
   * Get an entry in an object as a factorized matrix.
   *
   * - key: Key of the entry.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(key:String, value:LLT?) -> LLT? {
    return getLLT(key);
  }

  /**
   * Set entry in an object as nil.
   *
   * - key: Key of the entry.
   */
  function setNil(key:String) {
    insert(key, Buffer());
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Boolean) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Integer) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Real) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:String) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Object) {
    let buffer <- Buffer();
    value.write(buffer);
    insert(key, buffer);
  }
  
  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Boolean[_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Integer[_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Real[_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:String[_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Object[_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Boolean[_,_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Integer[_,_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:Real[_,_]) {
    insert(key, Buffer(value));
  }

  /**
   * Set an entry in an object.
   *
   * - key: Key of the entry.
   * - value: Value of the entry.
   */
  function set(key:String, value:LLT) {
    insert(key, Buffer(canonical(value)));
  }

  /**
   * Get the size of the buffer. For an uninitialized buffer this is zero,
   * for an array it is the array length, for anything else it is one.
   */
  function size() -> Integer {
    if content? {
      return content!.size();
    } else {
      return 0;
    }
  }

  /**
   * Get the size of an entry. For an uninitialized buffer this is zero,
   * for an array it is the array length, for anything else it is one.
   *
   * - key: Key of the entry.
   */
  function size(key:String) -> Integer {
    let buffer <- find(key);
    if buffer? {
      return buffer!.size();
    } else {
      return 0;
    }
  }

  /**
   * Iterate through the elements of an array.
   */
  function walk() -> Iterator<Buffer> {
    if content? {
      return content!.walk();
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Iterate through the elements of an array entry.
   *
   * - key: Key of the entry.
   */
  function walk(key:String) -> Iterator<Buffer> {
    let buffer <- find(key);
    if buffer? {
      return buffer!.walk();
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Push a nil element onto the end of an array.
   */
  function pushNil() {
    if content? {
      content <- content!.pushNil();
    } else {
      content <- ArrayValue();
      content!.pushNil();
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Boolean) {
    if content? {
      content <- content!.push(value);
    } else {
      set([value]);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Integer) {
    if content? {
      content <- content!.push(value);
    } else {
      set([value]);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Real) {
    if content? {
      content <- content!.push(value);
    } else {
      set([value]);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:String) {
    if content? {
      content <- content!.push(value);
    } else {
      set([value]);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Object) {
    if content? {
      content <- content!.push(value);
    } else {
      set([value]);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Boolean[_]) {
    if content? {
      content <- content!.push(value);
    } else {
      content <- ArrayValue();
      content!.push(value);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Integer[_]) {
    if content? {
      content <- content!.push(value);
    } else {
      content <- ArrayValue();
      content!.push(value);
    }
  }

  /**
   * Push an element onto the end of an array.
   */
  function push(value:Real[_]) {
    if content? {
      content <- content!.push(value);
    } else {
      content <- ArrayValue();
      content!.push(value);
    }
  }
}

/**
 * Create a Buffer.
 *
 * - root: Root value.
 */
function Buffer<Type>(root:Type) -> Buffer {
  o:Buffer;
  o.set(root);
  return o;
}

/**
 * Create a Buffer.
 */
function Buffer() -> Buffer {
  return construct<Buffer>();
}
