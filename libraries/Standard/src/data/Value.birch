/**
 * Value.
 */
abstract class Value {
  /**
   * Accept a generator.
   */
  abstract function accept(writer:Writer);

  /**
   * Find an entry in an object.
   */
  function find(key:String) -> Buffer? {
    return nil;
  }

  /**
   * Insert an entry in an object.
   */
  function insert(key:String, value:Buffer) {
    error("not an object");
  }

  /**
   * Insert an element at the end of an array.
   */
  function insert(value:Buffer) {
    error("not an array");
  }

  /**
   * Get the size of the array. Returns 1 for a non-array value.
   */
  function size() -> Integer {
    return 1;
  }

  /**
   * Iterate through elements of an array.
   */
  function walk() -> Iterator<Buffer> {
    return EmptyIterator<Buffer>();
  }

  /**
   * Push a nil element onto the end of an array.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function pushNil() -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Boolean) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Integer) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Real) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:String) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Object) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Boolean[_]) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Integer[_]) -> Value;

  /**
   * Push an element onto the end of an array.
   *
   * - value: The element.
   *
   * Returns: A new `Value` to replace `this` if a type conversion was
   * necessary to perform the update, otherwise `this`.
   */
  abstract function push(value:Real[_]) -> Value;

  /**
   * Get this as a Boolean.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getBoolean() -> Boolean? {
    return nil;
  }

  /**
   * Get this as an integer.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getInteger() -> Integer? {
    return nil;
  }

  /**
   * Get this as a real.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getReal() -> Real? {
    return nil;
  }

  /**
   * Get this as a string.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getString() -> String? {
    return nil;
  }

  /**
   * Get this as a vector of Booleans.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getBooleanVector() -> Boolean[_]? {
    return nil;
  }

  /**
   * Get this as a vector of integers.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getIntegerVector() -> Integer[_]? {
    return nil;
  }

  /**
   * Get this as a vector of reals.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getRealVector() -> Real[_]? {
    return nil;
  }

  /**
   * Get this as a matrix of Booleans.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getBooleanMatrix() -> Boolean[_,_]? {
    return nil;
  }

  /**
   * Get this as a matrix of integers.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getIntegerMatrix() -> Integer[_,_]? {
    return nil;
  }

  /**
   * Get this as a matrix of reals.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getRealMatrix() -> Real[_,_]? {
    return nil;
  }
}
