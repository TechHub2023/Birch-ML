/**
 * String value.
 */
final class StringValue(value:String) < Value {
  /**
   * The value.
   */
  value:String <- value;

  override function accept(writer:Writer) {
    writer.visit(this);
  }

  override function getString() -> String? {
    return value;
  }

  override function pushNil() -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.pushNil();
    return o;
  }

  override function push(x:Boolean) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Integer) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Real) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:String) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Object) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Boolean[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Integer[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }

  override function push(x:Real[_]) -> Value {
    let o <- ArrayValue();
    o.push(value);
    o.push(x);
    return o;
  }
}

/**
 * Create a StringValue.
 */
function StringValue(value:String) -> StringValue {
  return construct<StringValue>(value);
}
