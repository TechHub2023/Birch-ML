/**
 * Nil value.
 */
final class NilValue < Value {
  override function accept(writer:Writer) {
    writer.visit(this);
  }

  override function pushNil() -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.pushNil();
    return o;
  }

  override function push(x:Boolean) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Integer) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Real) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:String) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Object) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Boolean[_]) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Integer[_]) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }

  override function push(x:Real[_]) -> Value {
    let o <- ArrayValue();
    o.pushNil();
    o.push(x);
    return o;
  }
}

/**
 * Create a NilValue.
 */
function NilValue() -> NilValue {
  return construct<NilValue>();
}
