/**
 * Iterator over the rows of a matrix, that wraps each row in a
 * [Buffer](../Buffer) object.
 *
 * - values: Values.
 */
final class MatrixBufferIterator<Type>(values:Type[_,_]) < Iterator<Buffer> {
  /**
   * Values.
   */
  values:Type[_,_] <- values;
  
  /**
   * Current index into the rows of the matrix.
   */
  i:Integer <- 0;

  /**
   * Is there a next element?
   */
  function hasNext() -> Boolean {
    return i < rows(values);
  }

  /**
   * Get the next element.
   */
  function next() -> Buffer {
    i <- i + 1;
    return Buffer(row(values, i));
  }
}

/**
 * Create a MatrixBufferIterator.
 */
function MatrixBufferIterator<Type>(values:Type[_,_]) ->
    MatrixBufferIterator<Type> {
  return construct<MatrixBufferIterator<Type>>(values);
}
