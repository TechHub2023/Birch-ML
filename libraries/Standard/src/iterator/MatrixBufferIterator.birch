/**
 * Iterator over the rows of a matrix, that wraps each row in a
 * [Buffer](../Buffer) object.
 *
 * - values: Values.
 */
final class MatrixBufferIterator<Type>(values:Type[_,_]) < Iterator<Buffer> {
  /**
   * Values.
   */
  values:Type[_,_] <- values;
  
  /**
   * Current index into the rows of the matrix.
   */
  i:Integer <- 0;

  /**
   * Is there a next element?
   */
  override function hasNext() -> Boolean {
    return i < rows(this.values);
  }

  /**
   * Get the next element.
   */
  override function next() -> Buffer {
    this.i <- this.i + 1;
    return make_buffer(row(this.values, this.i));
  }
}
