/**
 * Construct an object.
 *
 *   - Type: The class type.
 *
 * The class must have no initialization parameters.
 *
 * Returns: The object.
 */
function construct<Type>() -> Type {
  cpp{{
  return libbirch::make<Type>(handler_);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1>(arg1:Arg1) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2>(arg1:Arg1, arg2:Arg2) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3>(arg1:Arg1, arg2:Arg2, arg3:Arg3) ->
    Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3,Arg4>(arg1:Arg1, arg2:Arg2,
    arg3:Arg3, arg4:Arg4) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3, arg4);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3,Arg4,Arg5>(arg1:Arg1, arg2:Arg2,
    arg3:Arg3, arg4:Arg4, arg5:Arg5) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3, arg4, arg5);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(arg1:Arg1, arg2:Arg2,
    arg3:Arg3, arg4:Arg4, arg5:Arg5, arg6:Arg6) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3, arg4, arg5, arg6);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(arg1:Arg1,
    arg2:Arg2, arg3:Arg3, arg4:Arg4, arg5:Arg5, arg6:Arg6, arg7:Arg7) ->
    Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3, arg4, arg5, arg6,
      arg7);
  }}
}

/**
 * Construct an object.
 *
 * - Type: The class type.
 *
 * Arguments provide the initialization arguments of the class.
 *
 * Returns: The object.
 */
function construct<Type,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(arg1:Arg1,
    arg2:Arg2, arg3:Arg3, arg4:Arg4, arg5:Arg5, arg6:Arg6, arg7:Arg7,
    arg8:Arg8) -> Type {
  cpp{{
  return libbirch::make<Type>(handler_, arg1, arg2, arg3, arg4, arg5, arg6,
      arg7, arg8);
  }}
}
