/**
 * 64-bit (double precision) floating point.
 */
type Real;

/*
 * Operators
 */
operator (+x:Real) -> Real;
operator (x:Real > y:Real) -> Boolean;
operator (x:Real >= y:Real) -> Boolean;
operator (x:Real <= y:Real) -> Boolean;
operator (x:Real == y:Real) -> Boolean;
operator (x:Real != y:Real) -> Boolean;

/**
 * Modulus.
 */
function mod(x:Real, y:Real) -> Real {
  cpp {{
  return ::fmod(x, y);
  }}
}

/**
 * Maximum of two values.
 */
function max(x:Real, y:Real) -> Real {
  cpp {{
  return std::max(x, y);
  }}
}

/**
 * Minimum of two values.
 */
function min(x:Real, y:Real) -> Real {
  cpp {{
  return std::min(x, y);
  }}
}

/**
 * Is the value `inf`?
 */
function isinf(x:Real) -> Boolean {
  cpp{{
  return std::isinf(x);
  }}
}

/**
 * Is the value `nan`?
 */
function isnan(x:Real) -> Boolean {
  cpp{{
  return std::isnan(x);
  }}
}

/**
 * Is the value finite (i.e. not `inf` or `nan`)?
 */
function isfinite(x:Real) -> Boolean {
  cpp{{
  return std::isfinite(x);
  }}
}

function rows(x:Real) -> Integer {
  return 1;
}

function columns(x:Real) -> Integer {
  return 1;
}

function length(x:Real) -> Integer {
  return 1;
}

function size(x:Real) -> Integer {
  return 1;
}

function value(x:Real) -> Real {
  return x;
}

function peak(x:Real) -> Real {
  return x;
}

function eval(x:Real) -> Real {
  return x;
}

function reval(x:Real) -> Real {
  return x;
}

function grad<Gradient>(x:Real, d:Gradient) {
  //
}

function label(x:Real, gen:Integer) {
  //
}

function prune(x:Real, gen:Integer) {
  //
}

function constant(x:Real) {
  //
}
