/**
 * Base class for objects supporting delayed sampling.
 *
 * ```mermaid
 * classDiagram
 *    Delay <|-- Expression
 *    Delay <|-- Distribution
 *    Expression <|-- Random
 *
 *    link Delay "../Delay/"
 *    link Expression "../Expression/"
 *    link Random "../Random/"
 * ```
 *
 * Classes derived from Delay support delayed sampling. Ostensibly this
 * includes all Distribution and Expression classes, although among Expression
 * classes only Random actually implements the interface.
 *
 * ### Design & Implementation
 *
 * The $M$-path for delayed sampling is kept as a singly-linked list of Delay
 * objects directed from root to leaf along the $M$-path. While all objects in
 * the path are ostensibly of abstract type Delay, they are alternately of
 * concrete type Random and Distribution (`R*` denotes a Random object, `D*` a
 * Distribution object):
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3))
 * ```
 *
 * The root is necessarily of type Random, but the leaf may be of either type
 * Distribution (as above) or, if a Random has been associated with that
 * Distribution, of type Random. In the latter case the final node is
 * doubly-linked:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3))
 *    R3((R3)) .-> D3
 * ```
 *
 * While, if the leaf node is of type Random, it has a backward link to its
 * associated Distribution, note that all other nodes of type Random only have
 * a forward link to the distribution associated with their next node on the
 * $M$-path.
 *
 * User code maintains external references to the Random objects, but
 * typically not the Distribution objects. Delayed sampling operations are
 * triggered by the use of these references.
 *
 * !!! tip
 *     One advantage of this arrangement is that variable elimination
 *     naturally occurs as a result of garbage collection. Once no references
 *     remain to a Random that is the root of an $M$-path it is collected,
 *     usually along with the next Distribution in the list. Not only has it
 *     then been *marginalized out* in establishing the $M$-path, but it has
 *     now been *eliminated* as the program has discarded it without it ever
 *     being sampled.
 *
 * Events on the list are triggered by user operations on the Random objects,
 * to which the user code maintains references.
 *
 * The *graft* operation occurs when the leaf node is a Random, and that
 * Random enters the construction of a new Distribution object in a form that
 * allows it to be marginalized out. The Distribution is appened to the list
 * and the existing backward link remove:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4))
 * ```
 *
 * If a Random is subsequently associated with the Distribution it is added as
 * before:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4)) --> R4((R4))
 *    R4((R4)) .-> D4
 * ```
 *
 * If a Random leaf node must be *realized* it simply simulates a value from
 * its associated distribution and removes its backward link:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4)) --> R4
 * ```
 *
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4'))
 * ```
 */
abstract class Delay {
  /**
   * Next node on the $M$-path.
   */
  next:Delay?;

  /**
   * Side node on the $M$-path. This is used only for peculiar cases to
   * establish joint distributions over two or more Randoms, such as for the
   * normal-inverse-gamma distribution.
   */
  side:Delay?;

  /**
   * Is there a next node on the $M$-path?
   */
  final function hasNext() -> Boolean {
    return next?;
  }

  /**
   * Set the next node on the $M$-path.
   *
   * - node: Next node.
   */
  final function setNext(node:Delay?) {
    this.next <- node;
  }

  /**
   * Get the next node on the $M$-path.
   */
  final function getNext() -> Delay {
    assert next?;
    return next!;
  }

  /**
   * Set the next node on the $M$-path to nil and return its previous value.
   */
  final function takeNext() -> Delay? {
    let r <- next;
    next <- nil;
    return r;
  }
  
  /**
   * Get a proceeding node on the $M$-path.
   *
   * - n: Number of steps to the desired node, e.g. 1 for the next node, 2 for
   *  the node after that, etc. Must be greater than zero.
   *
   * Return: The proceeding node on the $M$-path that is `n` steps from this.
   * If there is no such node, returns nil. If there is a loop at the end of
   * the $M$-path, will iterate through that loop as many times as given and
   * return non-nil.
   */
  final function getNext(n:Integer) -> Delay? {
    assert n > 0;
    if n == 1 {
      return next;
    } else if next? {
      return next!.getNext(n - 1);
    } else {
      return nil;
    }
  }

  /**
   * Is there a side node on the $M$-path?
   */
  final function hasSide() -> Boolean {
    return side?;
  }

  /**
   * Set the side node on the $M$-path.
   *
   * - node: Side node.
   */
  final function setSide(node:Delay?) {
    this.side <- node;
  }

  /**
   * Get the side node on the $M$-path.
   */
  final function getSide() -> Delay {
    assert side?;
    return side!;
  }

  /**
   * Set the side node on the $M$-path to nil and return its previous value.
   */
  final function takeSide() -> Delay? {
    let r <- side;
    side <- nil;
    return r;
  }

  /**
   * Get a proceeding side node on the $M$-path.
   *
   * - n: Number of steps to the desired node, e.g. 1 for the next node, 2 for
   *  the node after that, etc. Must be greater than zero.
   *
   * Return: The proceeding side node on the $M$-path that is `n` steps from
   * this. If there is no such node, returns nil. If there is a loop at the
   * end of the $M$-path, will iterate through that loop as many times as
   * given and return non-nil.
   */
  final function getSide(n:Integer) -> Delay? {
    assert n > 0;
    if n == 1 {
      return side;
    } else if side? {
      return side!.getSide(n - 1);
    } else {
      return nil;
    }
  }

  /**
   * Is this an internal node on the $M$-path? A node is internal if
   * `hasNext()` is true, and it is not part of a loop at the end of the
   * $M$-path.
   */
  final function isInternal() -> Boolean {
    return next? && next!.next != this;
  }

  /**
   * Is this a subordinate distribution? A subordinate distribution is aside
   * some other distribution.
   */
  function isSubordinate() -> Boolean {
    return false;
  }

  /**
   * Set this as a subordinate distribution.
   */
  function setSubordinate() {
    assert false;
  }

  /**
   * Prune the $M$-path from below this.
   *
   * Return: If this is a Random node, then this. If this is a Distribution
   * node, then the updated Distribution for the first parent, which is now
   * the leaf of the $M$-path.
   */
  function prune() -> Delay {
    assert !next?;  // otherwise prune() should have been overridden
    return this;
  }

  /**
   * Construct a lazy expression for the log-pdf of this node.
   */
  function hoist() -> Expression<Real>? {
    return nil;
  }

  /**
   * Render the node constant.
   */
  function constant() {
    //
  }

  /**
   * Is this a random variable?
   */
  function isRandom() -> Boolean {
    return false;
  }

  /**
   * Is this a distribution?
   */
  function isDistribution() -> Boolean {
    return false;
  }

  function isGaussian() -> Boolean {
    return false;
  }

  function getGaussian() -> (Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isBeta() -> Boolean {
    return false;
  }

  function getBeta() -> (Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isGamma() -> Boolean {
    return false;
  }

  function getGamma() -> (Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isInverseGamma() -> Boolean {
    return false;
  } 

  function getInverseGamma() -> (Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isInverseWishart() -> Boolean {
    return false;
  } 

  function getInverseWishart() -> (Expression<Real[_,_]>, Expression<Real>) {
    assert false;
  } 

  function isNormalInverseGamma() -> Boolean {
    return false;
  }

  function getNormalInverseGamma() -> (Expression<Real>, Expression<Real>,
      Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isNormalInverseGammaGaussian() -> Boolean {
    return false;
  }

  function getNormalInverseGammaGaussian() -> (Expression<Real>,
      Expression<Real>, Expression<Real>, Expression<Real>, Expression<Real>,
      Expression<Real>, Expression<Real>) {
    assert false;
  }

  function joinNormalInverseGammaGaussian() ->
      (Expression<Real[_]>, Expression<Real[_]>, Expression<Real>,
      Expression<Real>, Expression<Real>, Expression<Real>,
      Expression<Real[_]>, Expression<Real[_]>) {
    assert false;
  }

  function isDirichlet() -> Boolean {
    return false;
  }

  function getDirichlet() -> Expression<Real[_]> {
    assert false;
  }

  function isRestaurant() -> Boolean {
    return false;
  }

  function getRestaurant() -> (Expression<Real>, Expression<Real>,
      Expression<Integer[_]>) {
    assert false;
  }

  function isMultivariateGaussian() -> Boolean {
    return false;
  }

  function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>) {
    assert false;
  }

  function isMultivariateNormalInverseGamma() -> Boolean {
    return false;
  }

  function getMultivariateNormalInverseGamma() -> (Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real>, Expression<Real>) {
    assert false;
  }

  function isMultivariateNormalInverseWishart() -> Boolean {
    return false;
  }

  function getMultivariateNormalInverseWishart() -> (Expression<Real[_]>,
      Expression<Real>, Expression<Real[_,_]>, Expression<Real>) {
    assert false;
  }

  function isMatrixGaussian() -> Boolean {
    return false;
  }

  function getMatrixGaussian() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>) {
    assert false;
  }

  function isMatrixNormalInverseWishart() -> Boolean {
    return false;
  }

  function getMatrixNormalInverseWishart() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>) {
    assert false;
  }

  function isDiscrete() -> Boolean {
    return false;
  }

  function getDiscrete() -> DiscreteDistribution {
    assert false;
  }

  function isBoundedDiscrete() -> Boolean {
    return false;
  }

  function getBoundedDiscrete() -> BoundedDiscreteDistribution {
    assert false;
  }
}
