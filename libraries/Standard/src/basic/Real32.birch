/**
 * 32-bit (single precision) floating point.
 */
type Real32;

/**
 * Convert to Real32.
 */
function Real32(x:Real64) -> Real32 {
  cpp{{
  return static_cast<birch::type::Real32>(x);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Real32) -> Real32 {
  return x;
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer64) -> Real32 {
  cpp{{
  return static_cast<birch::type::Real32>(x);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer32) -> Real32 {
  cpp{{
  return static_cast<birch::type::Real32>(x);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer16) -> Real32 {
  cpp{{
  return static_cast<birch::type::Real32>(x);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer8) -> Real32 {
  cpp{{
  return static_cast<birch::type::Real32>(x);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Boolean) -> Real32 {
  if x {
    return Real32(1.0);
  } else {
    return Real32(0.0);
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:String) -> Real32 {
  cpp{{
  return ::strtof(x.c_str(), nullptr);
  }}
}

/**
 * Convert to Real32.
 */
function Real32(x:Real64?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:Real32?) -> Real32? {
  return x;
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer64?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer32?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer16?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:Integer8?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/**
 * Convert to Real32.
 */
function Real32(x:String?) -> Real32? {
  if x? {
    return Real32(x!);
  } else {
    return nil;
  }
}

/*
 * Operators
 */
operator (x:Real32 + y:Real32) -> Real32;
operator (x:Real32 - y:Real32) -> Real32;
operator (x:Real32 * y:Real32) -> Real32;
operator (x:Real32 / y:Real32) -> Real32;
operator (+x:Real32) -> Real32;
operator (-x:Real32) -> Real32;
operator (x:Real32 > y:Real32) -> Boolean;
operator (x:Real32 < y:Real32) -> Boolean;
operator (x:Real32 >= y:Real32) -> Boolean;
operator (x:Real32 <= y:Real32) -> Boolean;
operator (x:Real32 == y:Real32) -> Boolean;
operator (x:Real32 != y:Real32) -> Boolean;

/**
 * Absolute value.
 */
function abs(x:Real32) -> Real32 {
  cpp {{
  return std::abs(x);
  }}
}

/**
 * Power.
 */
function pow(x:Real32, y:Real32) -> Real32 {
  cpp {{
  return ::powf(x, y);
  }}
}

/**
 * Modulus.
 */
function mod(x:Real32, y:Real32) -> Real32 {
  cpp {{
  return ::fmodf(x, y);
  }}
}

/**
 * Maximum of two values.
 */
function max(x:Real32, y:Real32) -> Real32 {
  cpp {{
  return std::max(x, y);
  }}
}

/**
 * Minimum of two values.
 */
function min(x:Real32, y:Real32) -> Real32 {
  cpp {{
  return std::min(x, y);
  }}
}

/**
 * Is the value `inf`?
 */
function isinf(x:Real32) -> Boolean {
  cpp{{
  return std::isinf(x);
  }}
}

/**
 * Is the value `nan`?
 */
function isnan(x:Real32) -> Boolean {
  cpp{{
  return std::isnan(x);
  }}
}

/**
 * Is the value finite (i.e. not `inf` or `nan`)?
 */
function isfinite(x:Real32) -> Boolean {
  cpp{{
  return std::isfinite(x);
  }}
}

function canonical(x:Real32) -> Real32 {
  return x;
}

function length(x:Real32) -> Integer {
  return 1;
}

function size(x:Real32) -> Integer {
  return 1;
}

function rows(x:Real32) -> Integer {
  return 1;
}

function columns(x:Real32) -> Integer {
  return 1;
}

function depth(x:Real32) -> Integer {
  return 0;
}

function value(x:Real32) -> Real32 {
  return x;
}

function eval(x:Real32) -> Real32 {
  return x;
}

function eval(x:Real32, gen:Integer) -> Real32 {
  return x;
}

function count_eval(x:Real32, gen:Integer) -> Real32 {
  return x;
}

function reval(x:Real32) -> Real32 {
  return x;
}

function reval(x:Real32, gen:Integer) -> Real32 {
  return x;
}

function count_reval(x:Real32, gen:Integer) -> Real32 {
  return x;
}

function grad<Gradient>(x:Real32, d:Gradient) {
  //
}

function grad<Gradient>(x:Real32, gen:Integer, d:Gradient) {
  //
}

function count_grad<Gradient>(x:Real32, gen:Integer, d:Gradient) {
  //
}

function count_grad(x:Real32, gen:Integer, d:Real, i:Integer) {
  //
}

function count_grad(x:Real32, gen:Integer, d:Real, i:Integer, j:Integer) {
  //
}

function graft_beta(x:Real32) -> Beta? {
  return nil;
}

function graft_dirichlet(x:Real32) -> Dirichlet? {
  return nil;
}

function graft_restaurant(x:Real32) -> Restaurant? {
  return nil;
}

function graft_gamma(x:Real32) -> Gamma? {
  return nil;
}

function graft_scaled_gamma(x:Real32) ->  TransformLinear<Gamma>? {
  return nil;
}

function graft_inverse_gamma(x:Real32) -> InverseGamma? {
  return nil;
}

function graft_inverse_wishart(x:Real32) -> InverseWishart? {
  return nil;
}

function graft_gaussian(x:Real32) -> Gaussian? {
  return nil;
}

function graft_linear_gaussian(x:Real32) -> TransformLinear<Gaussian>? {
  return nil;
}

function graft_normal_inverse_gamma(x:Real32, compare:Distribution<Real>) ->
    NormalInverseGamma? {
  return nil;
}

function graft_linear_normal_inverse_gamma(x:Real32, compare:Distribution<Real>) ->
    TransformLinear<NormalInverseGamma>? {
  return nil;
}

function graft_multivariate_gaussian(x:Real32) -> MultivariateGaussian? {
  return nil;
}

function graft_linear_multivariate_gaussian(x:Real32) ->
    TransformLinearMultivariate<MultivariateGaussian>? {
  return nil;
}

function graft_dot_multivariate_gaussian(x:Real32) ->
    TransformDot<MultivariateGaussian>? {
  return nil;
}

function graft_multivariate_normal_inverse_gamma(x:Real32, compare:Distribution<Real>) ->
    MultivariateNormalInverseGamma? {
  return nil;
}

function graft_linear_multivariate_normal_inverse_gamma(x:Real32, compare:Distribution<Real>) ->
    TransformLinearMultivariate<MultivariateNormalInverseGamma>? {
  return nil;
}

function graft_dot_multivariate_normal_inverse_gamma(x:Real32, compare:Distribution<Real>) ->
    TransformDot<MultivariateNormalInverseGamma>? {
  return nil;
}

function graft_matrix_gaussian(x:Real32) -> MatrixGaussian? {
  return nil;
}

function graft_linear_matrix_gaussian(x:Real32) ->
    TransformLinearMatrix<MatrixGaussian>? {
  return nil;
}

function graft_dot_matrix_gaussian(x:Real32) ->
    TransformDotMultivariate<MatrixGaussian>? {
  return nil;
}

function graft_matrix_normal_inverse_wishart(x:Real32, compare:Distribution<LLT>) ->
    MatrixNormalInverseWishart? {
  return nil;
}

function graft_linear_matrix_normal_inverse_wishart(x:Real32, compare:Distribution<LLT>) ->
    TransformLinearMatrix<MatrixNormalInverseWishart>? {
  return nil;
}

function graft_dot_matrix_normal_inverse_wishart(x:Real32, compare:Distribution<LLT>) ->
    TransformDotMultivariate<MatrixNormalInverseWishart>? {
  return nil;
}

function graft_discrete(x:Real32) -> Discrete? {
  return nil;
}

function graft_bounded_discrete(x:Real32) -> BoundedDiscrete? {
  return nil;
}
