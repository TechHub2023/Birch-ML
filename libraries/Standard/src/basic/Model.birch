/**
 * Model.
 */
abstract class Model {
  /**
   * Distribution and Random objects for move, by step.
   */
  Ξ:Array<Array<Delay>>;

  /**
   * Factors for move, by step.
   */
  Φ:Array<Array<Expression<Real>>>;

  /**
   * Factors for move, by step.
   */
  π:Expression<Real>?;

  /**
   * Start execution.
   */
  function simulate() {
    //
  }

  /**
   * Step execution.
   *
   * - t: The step number, beginning at 1.
   */
  function simulate(t:Integer) {
    //
  }

  final function hoist() {
    π <- nil;
    for i in 1..Ξ.size() {
      for j in 1..Ξ[i].size() {
        if !Ξ[i][j].isSubordinate() {
          let ξ <- Ξ[i][j].hoist();
          if ξ? {
            if π? {
              π <- box(π! + ξ!);
            } else {
              π <- ξ!;
            }
          }
        }
      }
    }
    for i in 1..Φ.size() {
      for j in 1..Φ[i].size() {
        let φ <- Φ[i][j];
        if π? {
          π <- box(π! + φ);
        } else {
          π <- φ;
        }
      }
    }
  }

  final function constant(nlags:Integer) {
    π <- nil;
    while Ξ.size() >= nlags {
      for j in 1..Ξ.front().size() {
        Ξ.front()[j].constant();
      }
      Ξ.popFront();
    }
    while Φ.size() >= nlags {
      for j in 1..Φ.front().size() {
        Φ.front()[j].constant();
      }
      Φ.popFront();
    }
  }

  /**
   * Read at start.
   */
  override function read(buffer:Buffer) {
    super.read(buffer);
  }

  /**
   * Read for step `t`.
   */
  override function read(t:Integer, buffer:Buffer) {
    //
  }

  /**
   * Write at start.
   */
  override function write(buffer:Buffer) {
    super.write(buffer);
  }

  /**
   * Write for step `t`.
   */
  override function write(t:Integer, buffer:Buffer) {
    //
  }
}
