/**
 * Signed integer. This is represented with a 32-bit signed integer.
 */
type Integer;

hpp{{
using Integer = int;
}}

/**
 * Modulus.
 */
function mod(x:Integer, y:Integer) -> Integer {
  cpp {{
  return x % y;
  }}
}

/**
 * Maximum of two values.
 */
function max(x:Integer, y:Integer) -> Integer {
  cpp{{
  return std::max(x, y);
  }}
}

/**
 * Minimum of two values.
 */
function min(x:Integer, y:Integer) -> Integer {
  cpp{{
  return std::min(x, y);
  }}
}

function rows(x:Integer) -> Integer {
  return 1;
}

function columns(x:Integer) -> Integer {
  return 1;
}

function length(x:Integer) -> Integer {
  return 1;
}

function size(x:Integer) -> Integer {
  return 1;
}

function link(x:Integer) {
  //
}

function value(x:Integer) -> Integer {
  return x;
}

function peek(x:Integer) -> Integer {
  return x;
}

function eval(x:Integer) -> Integer {
  return x;
}

function grad<Gradient>(x:Integer, d:Gradient) {
  //
}

function label(x:Integer, gen:Integer) {
  //
}

function constant(x:Integer, gen:Integer) {
  //
}

function constant(x:Integer) {
  //
}
