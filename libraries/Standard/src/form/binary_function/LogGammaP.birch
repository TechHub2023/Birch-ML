struct LogGammaP<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:LogGammaP<Left,Right>) -> {
  return lgamma(value(x.l), value(x.r));
}

function peek<Left,Right>(x:LogGammaP<Left,Right>) -> {
  return lgamma(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:LogGammaP<Left,Right>) -> {
  return lgamma(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:LogGammaP<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let y <- 0.0;
  for i in 1..r {
    y <- y + digamma(l + 0.5*(1 - i));
  }
  grad(x.l, d*y);
  grad(x.r, 0.0);
}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma<Left,Right>(l:Left, r:Right) -> LogGammaP<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<LogGammaP<Left,Right>>(l, r);
}

function lgamma(x:Real, p:Integer) -> Real {
  assert p > 0;
  let y <- 0.25*(p*(p - 1))*log(Ï€);
  for i in 1..p {
    y <- y + lgamma(x + 0.5*(1 - i));
  }
  return y;
}

function lgamma(x:Integer, p:Integer) -> Real {
  return lgamma(scalar<Real>(x), p);
}
