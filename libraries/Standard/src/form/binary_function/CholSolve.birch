struct CholSolve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(cholsolve)
  }}
}

function grad<Left,Right,Gradient>(x:CholSolve<Left,Right>, d:Gradient) {
  let l <- cholinv(peek(x.l));
  let r <- peek(x.r);
  grad(x.l, -l*outer(d, r)*l);
  grad(x.r, inner(l, d));
}

hpp{{
namespace birch {
using numbirch::cholsolve;

/**
 * Solve a system of equations where the left argument is a symmetric
 * positive-definite matrix. The solution is via the Cholesky factorization.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
CholSolve<Left,Right> cholsolve(const Left& l, const Right& r) {
  return construct<CholSolve<Left,Right>>(l, r);
}
}
}}
