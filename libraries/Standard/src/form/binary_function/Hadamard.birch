struct Hadamard<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Hadamard<Left,Right>, d:Gradient) {
  grad(x.l, hadamard(d, peek(x.r)));
  grad(x.r, hadamard(d, peek(x.l)));
}

/**
 * Hadamard (element-wise) product.
 */
function hadamard<Left,Right>(l:Left, r:Right) -> Hadamard<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Hadamard<Left,Right>>(l, r);
}
