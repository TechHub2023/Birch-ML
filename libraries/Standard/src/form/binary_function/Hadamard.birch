struct Hadamard<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(hadamard)
  }}
}

function grad<Left,Right,Gradient>(x:Hadamard<Left,Right>, d:Gradient) {
  grad(x.l, hadamard(d, peek(x.r)));
  grad(x.r, hadamard(d, peek(x.l)));
}

hpp{{
namespace birch {
/**
 * Hadamard (element-wise) product.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Hadamard<Left,Right> hadamard(const Left& l, const Right& r) {
  return construct<Hadamard<Left,Right>>(l, r);
}
}
}}
