struct Hadamard<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Hadamard<Left,Right>, d:Gradient) {
  grad(x.l, hadamard(d, peek(x.r)));
  grad(x.r, hadamard(d, peek(x.l)));
}

hpp{{
namespace birch {
/**
 * Hadamard (element-wise) product.
 */
template<class Left, class Right, std::enable_if_t<is_delay<Left>::value ||
    is_delay<Right>::value,int> = 0>
Hadamard<Left,Right> hadamard(Left&& l, Right&& r) {
  return construct<Hadamard<Left,Right>>(std::forward<Left>(l),
      std::forward<Right>(r));
}
}
}}
