struct Inner<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(inner)
  }}
}

function grad<Left,Right,Gradient>(x:Inner<Left,Right>, d:Gradient) {
  grad(x.l, outer(peek(x.r), d));
  grad(x.r, peek(x.l)*d);
}

hpp{{
namespace birch {
/**
 * Inner product.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Inner<Left,Right> inner(const Left& l, const Right& r) {
  return construct<Inner<Left,Right>>(l, r);
}
}
}}
