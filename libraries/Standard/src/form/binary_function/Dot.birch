struct Dot<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(dot)
  }}
}

function grad<Left,Right,Gradient>(x:Dot<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_dot(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

hpp{{
namespace birch {
/**
 * Dot product.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Dot<Left,Right> dot(const Left& l, const Right& r) {
  return construct<Dot<Left,Right>>(l, r);
}
}
}}

function grad_dot<Gradient,Left,Right>(d:Gradient, l:Left[_], r:Right[_]) -> {
  return (r*d, l*d);
}
