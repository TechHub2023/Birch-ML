struct Pow<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(pow)
  }}
}

function grad<Left,Right,Gradient>(x:Pow<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let dl <- hadamard(hadamard(d, r), pow(l, r - 1.0));
  let dr <- hadamard(hadamard(d, pow(l, r)), log(l));
  grad(x.l, dl);
  grad(x.r, dr);
}

hpp{{
namespace birch {
/**
 * Power.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Pow<Left,Right> pow(const Left& l, const Right& r) {
  return construct<Pow<Left,Right>>(l, r);
}
}
}}

function pow(l:Real, r:Real) -> Real {
  cpp{{
  return numbirch::pow(l, r);
  }}
}
