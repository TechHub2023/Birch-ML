struct Pow<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Pow<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let dl <- d*r*pow(l, r - 1.0);
  let dr <- d*pow(l, r)*log(l);   ///@todo Assumes l is positive
  grad(x.l, dl);
  grad(x.r, dr);
}

hpp{{
namespace birch {
/**
 * Power.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Pow<Left,Right> pow(const Left& l, const Right& r) {
  return construct<Pow<Left,Right>>(l, r);
}
}
}}

function pow(l:Real, r:Real) -> Real {
  cpp{{
  return numbirch::pow(l, r);
  }}
}
