struct LChoose<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:LChoose<Left,Right>) -> {
  return lchoose(value(x.l), value(x.r));
}

function peek<Left,Right>(x:LChoose<Left,Right>) -> {
  return lchoose(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:LChoose<Left,Right>) -> {
  return lchoose(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:LChoose<Left,Right>, d:Gradient) {
  let (dx, dy) <- lchoose_grad(d, peek(x.l), peek(x.r));
  grad(x.l, hadamard(d, dx));
  grad(x.r, hadamard(d, dy));
}

hpp{{
namespace birch {
/**
 * Logarithm of the binomial coefficient.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
LChoose<Left,Right> lchoose(const Left& l, const Right& r) {
  return construct<LChoose<Left,Right>>(l, r);
}

/**
 * Logarithm of the binomial coefficient.
 */
template<class T, class U, std::enable_if_t<!is_delay<T,U>::value,int> = 0>
auto lchoose(const T& x, const U& y) {
  return numbirch::lchoose<Real>(x, y);
}
}
}}

/**
 * Gradient of `lchoose()`.
 */
function lchoose_grad(d:Real, x:Integer, y:Integer) -> (Real, Real) {
  cpp{{
  auto pair = numbirch::lchoose_grad(d, x, y);
  return std::make_pair(pair.first, pair.second);
  }}
}
