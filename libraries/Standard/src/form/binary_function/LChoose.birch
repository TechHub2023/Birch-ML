struct LChoose<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(lchoose)
  }}
}

function grad<Left,Right,Gradient>(x:LChoose<Left,Right>, d:Gradient) {
  let (dx, dy) <- lchoose_grad(d, peek(x.l), peek(x.r));
  grad(x.l, hadamard(d, dx));
  grad(x.r, hadamard(d, dy));
}

hpp{{
namespace birch {
using numbirch::lchoose;
using numbirch::lchoose_grad;

/**
 * Logarithm of the binomial coefficient.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
LChoose<Left,Right> lchoose(const Left& l, const Right& r) {
  return construct<LChoose<Left,Right>>(l, r);
}
}
}}
