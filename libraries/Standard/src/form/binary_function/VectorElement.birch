/*
 * Element of a vector.
 */
struct VectorElement<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(element)
  }}
}

function grad<Left,Right,Gradient>(x:VectorElement<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  grad(x.l, d*single<Real>(peek(x.r), length(l)));
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Element of a vector.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
VectorElement<Left,Right> element(const Left& l, const Right& r) {
  return construct<VectorElement<Left,Right>>(l, r);
}
}
}}

/**
 * Element of a vector.
 */
function element<Type>(x:Type[_], i:Integer) -> Type! {
  cpp{{
  return x.slice(i);
  }}
}

/**
 * Element of a vector.
 */
function element<Type>(x:Type[_], i:Integer!) -> Type! {
  return element(x, i!);
}
