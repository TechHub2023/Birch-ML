struct CopySign<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(copysign)
  }}
}

function grad<Left,Right,Gradient>(x:CopySign<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  grad(x.l, if_then_else(copysign(l, r) == l, d, -d));
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Copy sign of a number.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
CopySign<Left,Right> copysign(const Left& l, const Right& r) {
  return construct<CopySign<Left,Right>>(l, r);
}
}
}}

/**
 * Copy sign of a number.
 */
function copysign(l:Real, r:Real) -> Real {
  cpp{{
  return numbirch::copysign(l, r);
  }}
}
