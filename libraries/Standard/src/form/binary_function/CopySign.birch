struct CopySign<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:CopySign<Left,Right>) -> {
  return copysign(value(x.l), value(x.r));
}

function peek<Left,Right>(x:CopySign<Left,Right>) -> {
  return copysign(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:CopySign<Left,Right>) -> {
  return copysign(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:CopySign<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  grad(x.l, if_then_else(copysign(l, r) == l, d, -d));
  grad(x.r, 0.0);
}

/**
 * Copy sign of a number.
 */
function copysign<Left,Right>(l:Left, r:Right) -> CopySign<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<CopySign<Left,Right>>(l, r);
}

function copysign(l:Real, r:Real) -> Real {
  cpp {{
  return std::copysign(l, r);
  }}
}

function copysign(l:Integer, r:Integer) -> Integer {
  return if_then_else(r >= 0, abs(l), -abs(l));
}

function copysign(l:Integer, r:Real) -> Real {
  return if_then_else(r >= 0, abs(l), -abs(l));
}

function copysign(l:Real, r:Integer) -> Real {
  return if_then_else(r >= 0, abs(l), -abs(l));
}
