struct Diagonal<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Diagonal<Left,Right>, d:Gradient) {
  grad(x.l, trace(d));
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Create diagonal matrix, filling the diagonal with a given scalar value.
 *
 * - x: The value.
 * - length: Number of rows/columns.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Diagonal<Left,Right> diagonal(Left&& l, Right&& r) {
  return construct<Diagonal<Left,Right>>(std::forward<Left>(l),
      std::forward<Right>(r));
}
}
}}

/**
 * Create diagonal matrix, filling the diagonal with a given scalar value.
 *
 * - x: The value.
 * - length: Number of rows/columns.
 */
function diagonal<Type>(l:Type, r:Integer) -> {
  cpp{{
  return numbirch::diagonal(l, r);
  }}
}
