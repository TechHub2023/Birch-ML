struct Frobenius<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Frobenius<Left,Right>) -> {
  return frobenius(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Frobenius<Left,Right>) -> {
  return frobenius(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Frobenius<Left,Right>) -> {
  return frobenius(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Frobenius<Left,Right>, d:Gradient) {
  grad(x.l, d*peek(x.r));
  grad(x.r, d*peek(x.l));
}

/**
 * Frobenius product.
 */
function frobenius<Left,Right>(l:Left, r:Right) -> Frobenius<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Frobenius<Left,Right>>(l, r);
}
