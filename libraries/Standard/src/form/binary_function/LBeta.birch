struct LBeta<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:LBeta<Left,Right>) -> {
  return lbeta(value(x.l), value(x.r));
}

function peek<Left,Right>(x:LBeta<Left,Right>) -> {
  return lbeta(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:LBeta<Left,Right>) -> {
  return lbeta(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:LBeta<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  grad(x.l, d*(digamma(l) - digamma(l + r)));
  grad(x.r, d*(digamma(r) - digamma(l + r)));
}

hpp{{
namespace birch {
/**
 * Logarithm of the beta function.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
LBeta<Left,Right> lbeta(const Left& l, const Right& r) {
  return construct<LBeta<Left,Right>>(l, r);
}
}
}}

/**
 * Logarithm of the beta function.
 */
function lbeta(x:Real, y:Real) -> Real {
  cpp{{
  return numbirch::lbeta(x, y);
  }}
}
