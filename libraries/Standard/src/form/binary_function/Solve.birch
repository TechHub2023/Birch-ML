struct Solve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Solve<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let l1 <- inv(l);
  grad(x.l, -l1*outer(d, r)*l1);
  grad(x.r, inner(l1, d));
}

/**
 * Solve a system of equations.
 */
function solve<Left,Right>(l:Left, r:Right) -> Solve<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Solve<Left,Right>>(l, r);
}
