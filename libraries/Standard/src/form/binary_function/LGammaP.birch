struct LGammaP<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(lgamma)
  }}
}

function grad<Left,Right,Gradient>(x:LGammaP<Left,Right>, d:Gradient) {
  grad(x.l, hadamard(d, digamma(peek(x.l), peek(x.r))));
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
using numbirch::lgamma;

/**
 * Logarithm of the multivariate gamma function.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
LGammaP<Left,Right> lgamma(const Left& l, const Right& r) {
  return construct<LGammaP<Left,Right>>(l, r);
}
}
}}
