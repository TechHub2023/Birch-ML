struct Transpose<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Transpose<Middle>) -> {
  return transpose(value(x.m));
}

function peek<Middle>(x:Transpose<Middle>) -> {
  return transpose(peek(x.m));
}

function eval<Middle>(x:Transpose<Middle>) -> {
  return transpose(eval(x.m));
}

function grad<Middle,Gradient>(x:Transpose<Middle>, d:Gradient) {
  grad(x.m, transpose(d));
}

/**
 * Matrix transpose.
 */
function transpose<Middle>(m:Middle) -> Transpose<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Transpose<Middle>>(m);
}
