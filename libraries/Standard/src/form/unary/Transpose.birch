struct Transpose<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Transpose<Middle>) -> {
  return transpose(value(x.m));
}

function peek<Middle>(x:Transpose<Middle>) -> {
  return transpose(peek(x.m));
}

function eval<Middle>(x:Transpose<Middle>) -> {
  return transpose(eval(x.m));
}

function grad<Middle,Gradient>(x:Transpose<Middle>, d:Gradient) {
  grad(x.m, transpose(d));
}

/**
 * Matrix transpose.
 */
function transpose<Middle>(m:Middle) -> Transpose<Middle> {
  return construct<Transpose<Middle>>(m);
}

/**
 * Transpose of a scalar (identity operation).
 */
function transpose(m:Real) -> Real {
  return m;
}

/**
 * Transpose of a vector into a matrix.
 */
function transpose(x:Real[_]) -> Real[_,_] {
  Y:Real[1,length(x)];
  cpp{{
  numbirch::transpose(Y.rows(), Y.columns(), Real(1.0), x.data(), x.stride(),
      Y.data(), Y.stride());
  }}
  return Y;
}

/**
 * Transpose of a matrix.
 */
function transpose(X:Real[_,_]) -> Real[_,_] {
  Y:Real[columns(X), rows(X)];
  cpp{{
  numbirch::transpose(Y.rows(), Y.columns(), Real(1.0), X.data(), X.stride(),
      Y.data(), Y.stride());
  }}
  return Y;
}
