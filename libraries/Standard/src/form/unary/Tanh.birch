struct Tanh<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Tanh<Middle>) -> {
  return tanh(value(x.m));
}

function peek<Middle>(x:Tanh<Middle>) -> {
  return tanh(peek(x.m));
}

function eval<Middle>(x:Tanh<Middle>) -> {
  return tanh(eval(x.m));
}

function grad<Middle,Gradient>(x:Tanh<Middle>, d:Gradient) {
  let m <- peek(x.m);
  grad(x.m, transform(d, m, \(d:Real, m:Real) -> Real {
        return d*(1.0 + pow(tanh(m), 2.0));
      }));
}

/**
 * Hyperbolic tangent.
 */
function tanh<Middle>(m:Middle) -> Tanh<Middle> {
  return construct<Tanh<Middle>>(m);
}

/**
 * Hyperbolic sine.
 */
function tanh(m:Integer) -> Real {
  return tanh(scalar<Real>(m));
}

/**
 * Hyperbolic tangent.
 */
function tanh(m:Real) -> Real {
  cpp{{
  return std::tanh(m);
  }}
}

/**
 * Hyperbolic tangent.
 */
function tanh(m:Real[_]) -> Real[_] {
  return transform(m, \(x:Real) -> Real { return tanh(x); });
}

/**
 * Hyperbolic tangent.
 */
function tanh(m:Real[_,_]) -> Real[_,_] {
  return transform(m, \(x:Real) -> Real { return tanh(x); });
}
