struct Round<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Round<Middle>) -> {
  return round(value(x.m));
}

function peek<Middle>(x:Round<Middle>) -> {
  return round(peek(x.m));
}

function eval<Middle>(x:Round<Middle>) -> {
  return round(eval(x.m));
}

function grad<Middle,Gradient>(x:Round<Middle>, d:Gradient) {
  grad(x.m, 0.0);
}

/**
 * Round to nearest integer value.
 */
function round<Middle>(m:Middle) -> Round<Middle> {
  return construct<Round<Middle>>(m);
}

/**
 * Round to nearest integer value.
 */
function round(x:Real) -> Real {
  cpp {{
  return std::round(x);
  }}
}
