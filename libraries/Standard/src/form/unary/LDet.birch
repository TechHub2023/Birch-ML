struct LDet<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(ldet)
  BIRCH_UNARY_FUNCTION_GRAD(ldet_grad)
  BIRCH_FUNCTION_FORM(ldet)
  }}
}

hpp{{
namespace birch {
using numbirch::ldet;
using numbirch::ldet_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
LDet<Middle> ldet(const Middle& m) {
  return construct<LDet<Middle>>(m);
}
}
}}

/**
 * Logarithm of the absolute value of the determinant of a square matrix.
 * 
 * @param A Matrix $A$.
 * 
 * @return Result $\log |\det A|$.
 */
function ldet(A:RealMatrixLike) -> RealScalarLike;

function ldet<Arg>(A:DiagonalScalar<Arg>) -> {
  return A.n*log(A.m);
}

function ldet<Arg>(A:DiagonalVector<Arg>) -> {
  return sum(log(A.m));
}
