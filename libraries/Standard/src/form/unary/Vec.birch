struct Vec<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(vec, vec_grad)
  BIRCH_FUNCTION_FORM(vec, vec_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::vec;
using numbirch::vec_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Vec<Middle> vec(const Middle& m) {
  return construct<Vec<Middle>>(m);
}
}
}}

/**
 * Vectorize.
 *
 * @param x Argument.
 * 
 * @return If @p x is a scalar then returns a vector with a single element. If
 * @p x is a vector then returns it as-is. If @p x is a matrix then forms a
 * vector by stacking its columns atop one another.
 *
 * @see [mat](../../functions/mat), [scal](../../functions/scal)
 */
function vec(x:NumericLike) -> NumericVectorLike;
