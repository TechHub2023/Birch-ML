struct Expm1<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Expm1<Middle>) -> {
  return expm1(value(x.m));
}

function peek<Middle>(x:Expm1<Middle>) -> {
  return expm1(peek(x.m));
}

function eval<Middle>(x:Expm1<Middle>) -> {
  return expm1(eval(x.m));
}

function grad<Middle,Gradient>(x:Expm1<Middle>, d:Gradient) {
  grad(x.m, d*exp(peek(x.m)));
}

/**
 * Exponential minus one.
 */
function expm1<Middle>(m:Middle) -> Expm1<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Expm1<Middle>>(m);
}

/**
 * Exponential minus one.
 */
function expm1(m:Integer) -> Real {
  return expm1(scalar<Real>(m));
}

/**
 * Exponential minus one.
 */
function expm1(m:Real) -> Real {
  cpp {{
  return std::expm1(m);
  }}
}

