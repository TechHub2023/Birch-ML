final class LogGammaFunction {
function compute<Value>(m:Value) -> {
    return lgamma(m);
  }

function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return d*digamma(m);
  }
}
class LogGamma<Middle> = Unary<LogGammaFunction,Middle>;

/**
 * Logarithm of the gamma function.
 */
function lgamma<Middle>(m:Middle) -> {
  return construct<LogGamma<Middle>>(m);
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Integer) -> Real {
  return lgamma(scalar<Real>(x));
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Real) -> Real {
  cpp {{
  return std::lgamma(x);
  }}
}
