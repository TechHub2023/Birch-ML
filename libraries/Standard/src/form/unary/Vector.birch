struct Vector<Value,Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function eval<Value,Middle>(x:Vector<Value,Middle>) -> {
  return vector<Value>(eval(x.m));
}

function value<Value,Middle>(x:Vector<Value,Middle>) -> {
  return vector<Value>(value(x.m));
}

function peek<Value,Middle>(x:Vector<Value,Middle>) -> {
  return vector<Value>(peek(x.m));
}

function grad<Value,Middle,Gradient>(x:Vector<Value,Middle>, d:Gradient) {
  grad(x.m, grad_vector<Value>(d, peek(x.m)));
}

/**
 * Convert to vector.
 */
function vector<Value,Middle>(m:Middle) -> Vector<Value,Middle> {
  return construct<Vector<Value,Middle>>(m);
}

/**
 * Convert to vector.
 */
function vector<Value,Type>(m:Type[_]) -> Value[_] {
  return transform(m, \(x:Type) -> Value { return scalar<Value>(x); });
}

/**
 * Convert to vector.
 */
function vector<Value,Type>(m:Type[_,_]) -> Value[_] {
  assert columns(m) == 1;
  return vector<Value>(m[1..rows(m),1]);
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Boolean) -> Value[_] {
  return [scalar<Value>(m)];
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Integer) -> Value[_] {
  return [scalar<Value>(m)];
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Real) -> Value[_] {
  return [scalar<Value>(m)];
}

function grad_vector<Gradient,Value>(d:Gradient[_], m:Value) -> {
  return scalar<Value>(d);
}

function grad_vector<Gradient,Value>(d:Gradient[_], m:Value[_]) -> {
  return vector<Value>(d);
}

function grad_vector<Gradient,Value>(d:Gradient[_], m:Value[_,_]) -> {
  return matrix<Value>(d);
}
