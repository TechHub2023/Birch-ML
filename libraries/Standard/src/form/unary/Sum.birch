struct SumFunction {
  function compute<Value>(m:Value) -> {
    return sum(m);
  }

  function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return d;
  }

  function grad<Gradient,Value>(d:Gradient, m:Value[_]) -> {
    return vector(d, length(m));
  }

  function grad<Gradient,Value>(d:Gradient, m:Value[_,_]) -> {
    return vector(d, rows(m), columns(m));
  }
}
struct Sum<Middle> = Unary<SumFunction,Middle>;

/**
 * Sum.
 */
function sum<Middle>(m:Middle) -> {
  return construct<Sum<Middle>>(m);
}

/**
 * Sum scalar.
 */
function sum(x:Integer) -> Integer {
  return x;
}

/**
 * Sum scalar.
 */
function sum(x:Real) -> Real {
  return x;
}

/**
 * Sum vector.
 */
function sum(x:Integer[_]) -> Integer {
  return reduce(x, 0, \(x:Integer, y:Integer) -> { return x + y; });
}

/**
 * Sum matrix.
 */
function sum(X:Integer[_,_]) -> Integer {
  return reduce(X, 0, \(x:Integer, y:Integer) -> { return x + y; });
}

/**
 * Sum vector.
 */
function sum(x:Real[_]) -> Real {
  cpp{{
  return numbirch::sum(x.rows(), x.data(), x.rowStride());
  }}
}

/**
 * Sum matrix.
 */
function sum(X:Real[_,_]) -> Real {
  cpp{{
  return numbirch::sum(X.rows(), X.columns(), X.data(), X.rowStride());
  }}
}
