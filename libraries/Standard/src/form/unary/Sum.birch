struct Sum<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Sum<Middle>) -> {
  return sum(value(x.m));
}

function peek<Middle>(x:Sum<Middle>) -> {
  return sum(peek(x.m));
}

function eval<Middle>(x:Sum<Middle>) -> {
  return sum(eval(x.m));
}

function grad<Middle,Gradient>(x:Sum<Middle>, d:Gradient) {
  grad(x.m, grad_sum(d, peek(x.m)));
}

/**
 * Sum.
 */
function sum<Middle>(m:Middle) -> Sum<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Sum<Middle>>(m);
}

function grad_sum<Gradient,Value>(d:Gradient, m:Value) {
  return d;
}

function grad_sum<Gradient,Value>(d:Gradient, m:Value[_]) {
  return vector(d, length(m));
}

function grad_sum<Gradient,Value>(d:Gradient, m:Value[_,_]) {
  return matrix(d, rows(m), columns(m));
}
