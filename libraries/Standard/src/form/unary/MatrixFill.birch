struct MatrixFill<Middle>(a:Middle, m:Integer, n:Integer) < Unary<Middle>(a) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Number of rows.
   */
  k:Integer <- m;

  /**
   * Number of columns.
   */
  l:Integer <- n;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(fill, fill_grad, k, l)

  int rows() const {
    return k;
  }

  int columns() const {
    return l;
  }

  int length() const {
    return k;
  }

  int size() const {
    return k*l;
  }
  }}
}

hpp{{
namespace birch {
using numbirch::fill;
using numbirch::fill_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
MatrixFill<Middle> fill(const Middle& a, const int m, const int n) {
  return construct<MatrixFill<Middle>>(a, m, n);
}

}
}}

/**
 * Construct a matrix filled with a given value.
 * 
 * @param x Value.
 * @param m Number of rows.
 * @param n Number of columns.
 * 
 * @return Matrix.
 */
function fill(x:NumberScalarLike, m:Integer, n:Integer) -> NumberMatrixLike;

/**
 * Construct a matrix form filled with a given value.
 * 
 * @param x Value.
 * @param m Number of rows.
 * @param n Number of columns.
 * 
 * @return Matrix form.
 */
function Fill<Arg>(x:Arg, m:Integer, n:Integer) -> MatrixFill<Arg> {
  return construct<MatrixFill<Arg>>(x, m, n);
}
