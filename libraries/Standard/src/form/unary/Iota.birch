struct Iota<Middle>(m:Middle, n:Integer) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Length.
   */
  n:Integer <- n;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(iota, iota_grad, n)
  BIRCH_FUNCTION_FORM(iota, iota_grad, n)
  }}
}

hpp{{
namespace birch {
using numbirch::iota;
using numbirch::iota_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Iota<Middle> iota(const Middle& m, const int n) {
  return construct<Iota<Middle>>(m, n);
}

}
}}

/**
 * Construct a vector filled with a sequence of values increasing by one each
 * time.
 * 
 * @param x Starting value.
 * @param n Length.
 * 
 * @return Vector.
 */
function iota(x:NumberScalarLike, n:Integer) -> NumberVectorLike;
