struct IsNan<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(isnan)
  BIRCH_UNARY_FUNCTION_GRAD(isnan_grad)
  BIRCH_FUNCTION_FORM(isnan)
  }}
}

hpp{{
namespace birch {
using numbirch::isnan;
using numbirch::isnan_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
IsNan<Middle> isnan(const Middle& m) {
  return construct<IsNan<Middle>>(m);
}
}
}}

/**
 * Is value NaN?
 */
function isnan(x:NumberLike) -> BooleanLike;
