struct Diagonal<Middle>(m:Middle, n:Integer) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Number of rows and columns.
   */
  n:Integer <- n;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(diagonal, diagonal_grad, n)
  }}
}

hpp{{
namespace birch {
using numbirch::diagonal;
using numbirch::diagonal_grad;

/**
 * Create diagonal matrix, filling the diagonal with a given scalar value.
 *
 * - x: The value.
 * - n: Number of rows/columns.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Diagonal<Middle> diagonal(const Middle& m, const int n) {
  return construct<Diagonal<Middle>>(m, n);
}
}
}}
