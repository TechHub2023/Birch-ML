struct DiagonalScalar<Middle>(m:Middle, n:Integer) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Number of rows and columns.
   */
  n:Integer <- n;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(diagonal, diagonal_grad, n)
  }}
}

struct DiagonalVector<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(diagonal, diagonal_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::diagonal;
using numbirch::diagonal_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
DiagonalScalar<Middle> diagonal(const Middle& m, const int n) {
  return construct<DiagonalScalar<Middle>>(m, n);
}

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
DiagonalVector<Middle> diagonal(const Middle& m) {
  return construct<DiagonalVector<Middle>>(m);
}
}
}}

/**
 * Create identity matrix.
 *
 * @param n Number of rows and columns.
 */
function identity(n:Integer) -> Real[_,_] {
  return diagonal(1.0, n);
}
