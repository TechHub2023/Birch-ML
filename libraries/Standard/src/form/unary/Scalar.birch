final class ScalarFunction<Value> {
  function compute<MiddleValue>(m:MiddleValue) -> {
    return scalar<Value>(m);
  }

  function grad<Gradient,MiddleValue>(d:Gradient, m:MiddleValue) -> {
    return grad_scalar(d, m);
  }
}
class Scalar<Value,Middle> = Unary<ScalarFunction<Value>,Middle>;

/**
 * Convert to scalar.
 */
function scalar<Value,Middle>(m:Middle) -> {
  return construct<Scalar<Value,Middle>>(m);
}

/**
 * Convert to scalar.
 */
function scalar<Value,Type>(m:Type[_]) -> Value {
  assert length(m) == 1;
  return scalar<Value>(m[1]);
}

/**
 * Convert to scalar.
 */
function scalar<Value,Type>(m:Type[_,_]) -> Value {
  assert rows(m) == 1 && columns(m) == 1;
  return scalar<Value>(m[1,1]);
}

/**
 * Convert to scalar.
 */
function scalar<Value>(m:Boolean) -> Value {
  cpp{{
  return static_cast<Value>(m);
  }}
}

/**
 * Convert to scalar.
 */
function scalar<Value>(m:Integer) -> Value {
  cpp{{
  return static_cast<Value>(m);
  }}
}

/**
 * Convert to scalar.
 */
function scalar<Value>(m:Real) -> Value {
  cpp{{
  return static_cast<Value>(m);
  }}
}

/**
 * Gradient of `scalar()`.
 */
function grad_scalar<Gradient,Value>(d:Gradient, m:Value) -> {
  return scalar<Value>(d);
}

/**
 * Gradient of `scalar()`.
 */
function grad_scalar<Gradient,Value>(d:Gradient, m:Value[_]) -> {
  return vector<Value>(d);
}

/**
 * Gradient of `scalar()`.
 */
function grad_scalar<Gradient,Value>(d:Gradient, m:Value[_,_]) -> {
  return matrix<Value>(d);
}
