struct Sin<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Sin<Middle>) -> {
  return sin(value(x.m));
}

function peek<Middle>(x:Sin<Middle>) -> {
  return sin(peek(x.m));
}

function eval<Middle>(x:Sin<Middle>) -> {
  return sin(eval(x.m));
}

function grad<Middle,Gradient>(x:Sin<Middle>, d:Gradient) {
  grad(x.m, d*cos(peek(x.m)));
}

/**
 * Sine.
 */
function sin<Middle>(m:Middle) -> Sin<Middle> {
  return construct<Sin<Middle>>(m);
}

/**
 * Sine.
 */
function sin(m:Integer) -> Real {
  return sin(scalar<Real>(m));
}

/**
 * Sine.
 */
function sin(m:Real) -> Real {
  cpp {{
  return std::sin(m);
  }}
}
