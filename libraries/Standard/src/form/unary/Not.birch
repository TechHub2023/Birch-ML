struct Not<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(operator!)
  BIRCH_UNARY_FUNCTION_GRAD(not_grad)
  BIRCH_FUNCTION_FORM(operator!)
  }}
}

hpp{{
namespace birch {
using numbirch::operator!;
using numbirch::not_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Not<Middle> operator!(const Middle& m) {
  return construct<Not<Middle>>(m);
}
}
}}

/**
 * Logical `not`.
 */
operator (!x:NumberLike) -> BooleanLike;

operator<Arg> (!x:Not<Arg>) -> Arg {
  return x.m;
}
