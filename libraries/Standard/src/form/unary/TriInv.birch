struct TriInv<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(triinv, triinv_grad)
  BIRCH_FUNCTION_FORM(triinv, triinv_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::triinv;
using numbirch::triinv_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
TriInv<Middle> triinv(const Middle& m) {
  return construct<TriInv<Middle>>(m);
}
}
}}

/**
 * Inverse of a triangular matrix.
 * 
 * @param L Lower-triangular matrix $L$.
 * 
 * @return Result $L^{-1}$.
 */
function triinv(L:RealMatrixLike) -> RealMatrixLike;

function triinv<Arg>(L:DiagonalScalar<Arg>) -> {
  return Diagonal(1.0/L.m, L.n);
}

function triinv<Arg>(L:DiagonalVector<Arg>) -> {
  return Diagonal(1.0/L.m);
}
