struct Asin<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Asin<Middle>) -> {
  return asin(value(x.m));
}

function peek<Middle>(x:Asin<Middle>) -> {
  return asin(peek(x.m));
}

function eval<Middle>(x:Asin<Middle>) -> {
  return asin(eval(x.m));
}

function grad<Middle,Gradient>(x:Asin<Middle>, d:Gradient) {
  return grad(x.m, d/sqrt(1.0 - pow(peek(x.m), 2.0)));
}

/**
 * Arc sine.
 */
function asin<Middle>(m:Middle) -> Asin<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Asin<Middle>>(m);
}

/**
 * Arc sine.
 */
function asin(m:Integer) -> Real {
  return asin(scalar<Real>(m));
}

/**
 * Arc sine.
 */
function asin(m:Real) -> Real {
  cpp {{
  return std::asin(m);
  }}
}
