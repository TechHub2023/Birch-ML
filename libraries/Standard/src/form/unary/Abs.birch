struct Abs<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Abs<Middle>) -> {
  return abs(value(x.m));
}

function peek<Middle>(x:Abs<Middle>) -> {
  return abs(peek(x.m));
}

function eval<Middle>(x:Abs<Middle>) -> {
  return abs(eval(x.m));
}

function grad<Middle,Gradient>(x:Abs<Middle>, d:Gradient) {
  grad(x.m, copysign(d, peek(x.m)));
}

/**
 * Absolute value.
 */
function abs<Middle>(m:Middle) -> Abs<Middle> {
  return construct<Abs<Middle>>(m);
}

/**
 * Absolute value.
 */
function abs(x:Integer) -> Integer {
  cpp {{
  return std::abs(x);
  }}
}

/**
 * Absolute value.
 */
function abs(x:Real) -> Real {
  cpp {{
  return std::abs(x);
  }}
}
