struct Trace<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Trace<Middle>) -> {
  return trace(value(x.m));
}

function peek<Middle>(x:Trace<Middle>) -> {
  return trace(peek(x.m));
}

function eval<Middle>(x:Trace<Middle>) -> {
  return trace(eval(x.m));
}

function grad<Middle,Gradient>(x:Trace<Middle>, d:Gradient) {
  grad(x.m, grad_trace(d, peek(x.m)));
}

/**
 * Trace.
 */
function trace<Middle>(m:Middle) -> Trace<Middle> {
  return construct<Trace<Middle>>(m);
}

/**
 * Trace.
 */
function trace(m:Real) -> Real {
  return m;
}

/**
 * Trace.
 */
function trace(x:Real[_]) -> Real {
  return sum(x);
}

/**
 * Trace.
 */
function trace(A:Real[_,_]) -> Real {
  cpp{{
  return numbirch::trace(A.rows(), A.columns(), A.data(), A.stride());
  }}
}

function grad_trace<Gradient,Value>(d:Gradient, m:Value) -> {
  return d;
}

function grad_trace<Gradient,Value>(d:Gradient, m:Value[_]) -> {
  return vector(d, length(m));
}

function grad_trace<Gradient,Value>(d:Gradient, m:Value[_,_]) -> {
  return diagonal(d, rows(m));
}
