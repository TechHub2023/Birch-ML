struct Scal<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(scal, scal_grad)
  BIRCH_FUNCTION_FORM(scal, scal_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::scal;
using numbirch::scal_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Scal<Middle> scal(const Middle& m) {
  return construct<Scal<Middle>>(m);
}
}
}}

/**
 * Scalarize.
 *
 * @param x Argument.
 * 
 * @return If @p x is a scalar then returns that scalar. If @p x is a vector
 * or matrix with a single element then returns that element as though a
 * slice.
 *
 * @see [mat](../../functions/mat), [vec](../../functions/vec)
 */
function scal(x:NumericLike) -> NumericScalarLike;
