struct Atan<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Atan<Middle>) -> {
  return atan(value(x.m));
}

function peek<Middle>(x:Atan<Middle>) -> {
  return atan(peek(x.m));
}

function eval<Middle>(x:Atan<Middle>) -> {
  return atan(eval(x.m));
}

function grad<Middle,Gradient>(x:Atan<Middle>, d:Gradient) {
  grad(x.m, d/(1.0 + pow(peek(x.m), 2.0)));
}

/**
 * Arc tangent.
 */
function atan<Middle>(m:Middle) -> Atan<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Atan<Middle>>(m);
}

/**
 * Arc cosine.
 */
function atan(m:Integer) -> Real {
  return atan(scalar<Real>(m));
}

/**
 * Arc cosine.
 */
function atan(m:Real) -> Real {
  cpp {{
  return std::atan(m);
  }}
}
