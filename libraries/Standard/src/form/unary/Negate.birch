struct NegateFunction {
  function compute<Value>(m:Value) -> {
    return -m;
  }

  function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return -d;
  }
}
struct Negate<Middle> = Unary<NegateFunction,Middle>;

/**
 * Negation.
 */
operator<Middle> (-m:Middle) -> {
  return construct<Negate<Middle>>(m);
}

/**
 * Negation.
 */
operator (-x:Integer) -> Integer;

/**
 * Negation.
 */
operator (-x:Real) -> Real;

/**
 * Negation.
 */
operator (-x:Real[_]) -> Real[_] {
  y:Real[length(x)];
  cpp{{
  numbirch::neg(x.rows(), x.data(), x.stride(), y.data(), y.stride());
  }}
  return y;
}

/**
 * Negation.
 */
operator (-X:Real[_,_]) -> Real[_,_] {
  Y:Real[rows(X), columns(X)];
  cpp{{
  numbirch::neg(X.rows(), X.columns(), X.data(), X.stride(), Y.data(),
      Y.stride());
  }}
  return Y;
}
