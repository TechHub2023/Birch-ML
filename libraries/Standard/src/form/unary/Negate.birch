struct Negate<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Negate<Middle>) -> {
  return -value(x.m);
}

function peek<Middle>(x:Negate<Middle>) -> {
  return -peek(x.m);
}

function eval<Middle>(x:Negate<Middle>) -> {
  return -eval(x.m);
}

function grad<Middle,Gradient>(x:Negate<Middle>, d:Gradient) {
  grad(x.m, -d);
}

/**
 * Negation.
 */
operator<Middle> (-m:Middle) -> Negate<Middle> {
  return construct<Negate<Middle>>(m);
}

/**
 * Negation.
 */
operator (-x:Integer) -> Integer;

/**
 * Negation.
 */
operator (-x:Real) -> Real;

/**
 * Negation.
 */
operator (-x:Real[_]) -> Real[_] {
  y:Real[length(x)];
  cpp{{
  numbirch::neg(x.rows(), x.data(), x.stride(), y.data(), y.stride());
  }}
  return y;
}

/**
 * Negation.
 */
operator (-X:Real[_,_]) -> Real[_,_] {
  Y:Real[rows(X), columns(X)];
  cpp{{
  numbirch::neg(X.rows(), X.columns(), X.data(), X.stride(), Y.data(),
      Y.stride());
  }}
  return Y;
}
