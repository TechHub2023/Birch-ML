struct Negate<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Negate<Middle>) -> {
  return -value(x.m);
}

function peek<Middle>(x:Negate<Middle>) -> {
  return -peek(x.m);
}

function eval<Middle>(x:Negate<Middle>) -> {
  return -eval(x.m);
}

function grad<Middle,Gradient>(x:Negate<Middle>, d:Gradient) {
  grad(x.m, -d);
}

/**
 * Negation.
 */
operator<Middle> (-m:Middle) -> Negate<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Negate<Middle>>(m);
}

/**
 * Negation.
 */
operator (-x:Integer) -> Integer;

/**
 * Negation.
 */
operator (-x:Real) -> Real;
