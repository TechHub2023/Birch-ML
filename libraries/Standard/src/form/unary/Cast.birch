struct Cast<To,Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(cast<To>)
  BIRCH_UNARY_FUNCTION_GRAD(cast_grad<To>)
  BIRCH_FUNCTION_FORM(cast<To>)
  }}
}

hpp{{
namespace birch {
using numbirch::cast;
using numbirch::cast_grad;

template<class To, class Middle, std::enable_if_t<
    is_delay_v<Middle>,int> = 0>
Cast<To,Middle> cast(const Middle& m) {
  return construct<Cast<To,Middle>>(m);
}
}
}}

/**
 * Cast.
 * 
 * @tparam To Element type `Real`, `Integer` or `Boolean`.
 * 
 * @param x Argument.
 * 
 * @return a copy of @p x with element type converted to @p To.
 */
function cast<To>(x:NumberLike) -> NumberLike;
