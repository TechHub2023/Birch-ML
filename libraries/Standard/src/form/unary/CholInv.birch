struct CholInvFunction {
  function compute<Value>(m:Value) -> {
    return cholinv(m);
  }

  function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    let m1 <- cholinv(m);
    return -m1*d*m1;
  }
}
struct CholInv<Middle> = Unary<CholInvFunction,Middle>;

/**
 * Inverse of a symmetric positive-definite matrix via the Cholesky
 * factorization.
 */
function cholinv<Middle>(m:Middle) -> {
  return construct<CholInv<Middle>>(m);
}

/**
 * Inverse of a symmetric positive-definite matrix via the Cholesky
 * factorization.
 */
function cholinv(S:Real[_,_]) -> Real[_,_] {
  B:Real[rows(S), columns(S)];
  cpp{{
  numbirch::cholinv(S.rows(), S.data(), S.rowStride(), B.data(),
      B.rowStride());
  }}
  return B;
}
