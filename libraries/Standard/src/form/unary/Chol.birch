struct Chol<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(chol, chol_grad)
  BIRCH_FUNCTION_FORM(chol, chol_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::chol;
using numbirch::chol_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Chol<Middle> chol(const Middle& m) {
  return construct<Chol<Middle>>(m);
}
}
}}

/**
 * Cholesky factorization of a symmetric positive definite matrix.
 * 
 * @param S Symmetric positive definite matrix $S$.
 * 
 * @return Lower-triangular Cholesky factor $L$ such that $S = LL^\top$. If
 * the factorization fails, then $L$ is filled with NaN.
 */
function chol(S:RealMatrixLike) -> RealMatrixLike;

function chol<Arg>(S:DiagonalScalar<Arg>) -> {
  return Diagonal(sqrt(S.m), S.n);
}

function chol<Arg>(S:DiagonalVector<Arg>) -> {
  return Diagonal(sqrt(S.m));
}
