struct Inv<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(inv)
  BIRCH_UNARY_FUNCTION_GRAD(inv_grad)
  BIRCH_FUNCTION_FORM(inv)
  }}
}

hpp{{
namespace birch {
using numbirch::inv;
using numbirch::inv_grad;

template<class Middle, std::enable_if_t<is_delay_v<Middle>,int> = 0>
Inv<Middle> inv(const Middle& m) {
  return construct<Inv<Middle>>(m);
}
}
}}

/**
 * Inverse of a square matrix.
 * 
 * @param A Square matrix $A$.
 * 
 * @return Result $B = A^{-1}$.
 */
function inv(A:RealMatrixLike) -> RealMatrixLike;

function inv<Arg>(L:DiagonalScalar<Arg>) -> {
  return Diagonal(1.0/L.m, L.n);
}

function inv<Arg>(L:DiagonalVector<Arg>) -> {
  return Diagonal(1.0/L.m);
}
