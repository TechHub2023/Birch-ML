struct Matrix<Value,Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(value(x.m));
}

function peek<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(peek(x.m));
}

function eval<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(eval(x.m));
}

function grad<Value,Middle,Gradient>(x:Matrix<Value,Middle>, d:Gradient) {
  grad(x.m, grad_matrix<Value>(d, peek(x.m)));
}

/**
 * Convert to matrix.
 */
function matrix<Value,Middle>(m:Middle) -> Matrix<Value,Middle> {
  return construct<Matrix<Value,Middle>>(m);
}

/**
 * Convert to matrix.
 */
function matrix<Value,Type>(m:Type[_]) -> Value[_,_] {
  return matrix<Value>(mat(m, 1));
}

/**
 * Convert to matrix.
 */
function matrix<Value,Type>(m:Type[_,_]) -> Value[_,_] {
  return transform(m, \(x:Type) -> Value { return scalar<Value>(x); });
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Boolean) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Integer) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Real) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

function grad_matrix<Gradient,Value>(d:Gradient[_,_], m:Value) -> {
  return scalar<Value>(d);
}

function grad_matrix<Gradient,Value>(d:Gradient[_,_], m:Value[_]) -> {
  return vector<Value>(d);
}

function grad_matrix<Gradient,Value>(d:Gradient[_,_], m:Value[_,_]) -> {
  return matrix<Value>(d);
}
