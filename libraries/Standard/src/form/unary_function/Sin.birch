struct Sin<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(sin)
  }}
}

function grad<Middle,Gradient>(x:Sin<Middle>, d:Gradient) {
  grad(x.m, d*cos(peek(x.m)));
}

hpp{{
namespace birch {
using numbirch::sin;

/**
 * Sine.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Sin<Middle> sin(const Middle& m) {
  return construct<Sin<Middle>>(m);
}
}
}}
