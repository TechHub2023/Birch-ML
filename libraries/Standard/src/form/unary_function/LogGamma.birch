struct LogGamma<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:LogGamma<Middle>) -> {
  return lgamma(value(x.m));
}

function peek<Middle>(x:LogGamma<Middle>) -> {
  return lgamma(peek(x.m));
}

function eval<Middle>(x:LogGamma<Middle>) -> {
  return lgamma(eval(x.m));
}

function grad<Middle,Gradient>(x:LogGamma<Middle>, d:Gradient) {
  return grad(x.m, d*digamma(peek(x.m)));
}

/**
 * Logarithm of the gamma function.
 */
function lgamma<Middle>(m:Middle) -> LogGamma<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<LogGamma<Middle>>(m);
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Integer) -> Real {
  return lgamma(scalar<Real>(x));
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Real) -> Real {
  cpp {{
  return std::lgamma(x);
  }}
}
