struct Ceil<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Ceil<Middle>) -> {
  return ceil(value(x.m));
}

function peek<Middle>(x:Ceil<Middle>) -> {
  return ceil(peek(x.m));
}

function eval<Middle>(x:Ceil<Middle>) -> {
  return ceil(eval(x.m));
}

function grad<Middle,Gradient>(x:Ceil<Middle>, d:Gradient) {
  grad(x.m, 0.0);
}

/**
 * Round to smallest integer value not less than argument.
 */
function ceil<Middle>(m:Middle) -> Ceil<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Ceil<Middle>>(m);
}

/**
 * Round to smallest integer value not less than argument.
 */
function ceil(x:Real) -> Real {
  cpp {{
  return std::ceil(x);
  }}
}
