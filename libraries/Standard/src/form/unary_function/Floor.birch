struct Floor<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Floor<Middle>) -> {
  return floor(value(x.m));
}

function peek<Middle>(x:Floor<Middle>) -> {
  return floor(peek(x.m));
}

function eval<Middle>(x:Floor<Middle>) -> {
  return floor(eval(x.m));
}

function grad<Middle,Gradient>(x:Floor<Middle>, d:Gradient) {
  grad(x.m, 0.0);
}

hpp{{
namespace birch {
/**
 * Round to largest integer value not greater than argument.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Floor<Middle> floor(Middle&& m) {
  return construct<Floor<Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Round to largest integer value not greater than argument.
 */
function floor(m:Real) -> Real {
  cpp{{
  return std::floor(m);
  }}
}
