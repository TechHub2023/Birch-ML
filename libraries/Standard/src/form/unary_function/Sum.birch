struct Sum<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(sum)
  }}
}

function grad<Middle,Gradient>(x:Sum<Middle>, d:Gradient) {
  grad(x.m, grad_sum(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Sum of elements.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Sum<Middle> sum(const Middle& m) {
  return construct<Sum<Middle>>(m);
}
}
}}

function grad_sum<Gradient,Type>(d:Gradient, m:Type) -> {
  return d;
}

function grad_sum<Gradient,Type>(d:Gradient, m:Type[_]) -> {
  return vector(d, length(m));
}

function grad_sum<Gradient,Type>(d:Gradient, m:Type[_,_]) -> {
  return matrix(d, rows(m), columns(m));
}
