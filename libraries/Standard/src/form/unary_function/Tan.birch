struct Tan<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Tan<Middle>) -> {
  return tan(value(x.m));
}

function peek<Middle>(x:Tan<Middle>) -> {
  return tan(peek(x.m));
}

function eval<Middle>(x:Tan<Middle>) -> {
  return tan(eval(x.m));
}

function grad<Middle,Gradient>(x:Tan<Middle>, d:Gradient) {
  grad(x.m, d*(1.0 + pow(tan(peek(x.m)), 2.0)));
}

hpp{{
namespace birch {
/**
 * Tangent.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Tan<Middle> tan(Middle&& m) {
  return construct<Tan<Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Tangent.
 */
function tan(m:Real) -> Real {
  cpp{{
  return std::tan(m);
  }}
}
