struct Tan<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(tan)
  }}
}

function grad<Middle,Gradient>(x:Tan<Middle>, d:Gradient) {
  grad(x.m, d*(1.0 + pow(tan(peek(x.m)), 2.0)));
}

hpp{{
namespace birch {
using numbirch::tan;

/**
 * Tangent.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Tan<Middle> tan(const Middle& m) {
  return construct<Tan<Middle>>(m);
}
}
}}
