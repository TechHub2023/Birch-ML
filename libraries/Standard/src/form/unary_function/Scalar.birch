struct Scalar<Value,Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Value,Middle>(x:Scalar<Value,Middle>) -> {
  return scalar<Value>(value(x.m));
}

function peek<Value,Middle>(x:Scalar<Value,Middle>) -> {
  return scalar<Value>(peek(x.m));
}

function eval<Value,Middle>(x:Scalar<Value,Middle>) -> {
  return scalar<Value>(eval(x.m));
}

function grad<Value,Middle,Gradient>(x:Scalar<Value,Middle>, d:Gradient) -> {
  grad(x.m, grad_scalar(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Convert to scalar.
 */
template<class Value, class Middle,
    std::enable_if_t<is_delay<Middle>::value,int> = 0>
Scalar<Value,Middle> scalar(const Middle& m) {
  return construct<Scalar<Value,Middle>>(m);
}
}
}}

/**
 * Convert to scalar.
 */
function scalar<Value,Type>(m:Type) -> Value {
  cpp{{
  return static_cast<Value>(m);
  }}
}

/**
 * Convert to scalar.
 */
function scalar<Value,Type>(m:Type[_]) -> Value {
  assert length(m) == 1;
  return scalar<Value>(m[1]);
}

/**
 * Convert to scalar.
 */
function scalar<Value,Type>(m:Type[_,_]) -> Value {
  assert rows(m) == 1 && columns(m) == 1;
  return scalar<Value>(m[1,1]);
}

function grad_scalar<Gradient,Type>(d:Gradient, m:Type) -> {
  return scalar<Type>(d);
}

function grad_scalar<Gradient,Type>(d:Gradient, m:Type[_]) -> {
  return vector<Type>(d);
}

function grad_scalar<Gradient,Type>(d:Gradient, m:Type[_,_]) -> {
  return matrix<Type>(d);
}
