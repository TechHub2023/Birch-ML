struct Sqrt<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(value(x.m));
}

function peek<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(peek(x.m));
}

function eval<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(eval(x.m));
}

function grad<Middle,Gradient>(x:Sqrt<Middle>, d:Gradient) {
  grad(x.m, d*0.5/sqrt(peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Square root.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Sqrt<Middle> sqrt(const Middle& m) {
  return construct<Sqrt<Middle>>(m);
}
}
}}

/**
 * Square root.
 */
function sqrt(m:Real) -> Real {
  cpp{{
  return std::sqrt(m);
  }}
}
