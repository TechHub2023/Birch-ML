struct Sqrt<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(value(x.m));
}

function peek<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(peek(x.m));
}

function eval<Middle>(x:Sqrt<Middle>) -> {
  return sqrt(eval(x.m));
}

function grad<Middle,Gradient>(x:Sqrt<Middle>, d:Gradient) {
  grad(x.m, d*0.5/sqrt(peek(x.m)));
}

/**
 * Square root.
 */
function sqrt<Middle>(m:Middle) -> Sqrt<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Sqrt<Middle>>(m);
}

/**
 * Square root.
 */
function sqrt(m:Integer) -> Real {
  return sqrt(scalar<Real>(m));
}

/**
 * Square root.
 */
function sqrt(x:Real) -> Real {
  cpp {{
  return std::sqrt(x);
  }}
}
