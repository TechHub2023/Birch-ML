struct Abs<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(abs)
  }}
}

function grad<Middle,Gradient>(x:Abs<Middle>, d:Gradient) {
  grad(x.m, copysign(d, peek(x.m)));
}

hpp{{
namespace birch {
using numbirch::abs;

/**
 * Absolute value.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Abs<Middle> abs(const Middle& m) {
  return construct<Abs<Middle>>(m);
}
}
}}
