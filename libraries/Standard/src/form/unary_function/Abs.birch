struct Abs<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Abs<Middle>) -> {
  return abs(value(x.m));
}

function peek<Middle>(x:Abs<Middle>) -> {
  return abs(peek(x.m));
}

function eval<Middle>(x:Abs<Middle>) -> {
  return abs(eval(x.m));
}

function grad<Middle,Gradient>(x:Abs<Middle>, d:Gradient) {
  grad(x.m, copysign(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Absolute value.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Abs<Middle> abs(Middle&& m) {
  return construct<Abs<Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Absolute value.
 */
function abs(m:Real) -> Real {
  cpp{{
  return std::abs(m);
  }}
}
