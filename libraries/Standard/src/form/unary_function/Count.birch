struct Count<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(count)
  }}
}

function grad<Middle,Gradient>(x:Count<Middle>, d:Gradient) {
  grad(x.m, grad_count(d, peek(x.m)));
}

hpp{{
namespace birch {
using numbirch::count;

/**
 * Count of nonzero elements.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Count<Middle> count(const Middle& m) {
  return construct<Count<Middle>>(m);
}
}
}}

function grad_count<Gradient,Type>(d:Gradient, m:Type) -> {
  return 0.0;
}

function grad_count<Gradient,Type>(d:Gradient, m:Type[_]) -> {
  return vector(0.0, length(m));
}

function grad_count<Gradient,Type>(d:Gradient, m:Type[_,_]) -> {
  return matrix(0.0, rows(m), columns(m));
}
