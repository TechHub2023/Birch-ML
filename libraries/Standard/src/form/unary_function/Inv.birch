struct Inv<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(inv)
  }}
}

function grad<Middle,Gradient>(x:Inv<Middle>, d:Gradient) {
  let A <- inv(peek(x.m));
  grad(x.m, -outer(inner(A, d), A));
}

hpp{{
namespace birch {
using numbirch::inv;

/**
 * Inverse of a matrix.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Inv<Middle> inv(const Middle& m) {
  return construct<Inv<Middle>>(m);
}
}
}}
