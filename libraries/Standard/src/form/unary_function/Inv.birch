struct Inv<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Inv<Middle>) -> {
  return inv(value(x.m));
}

function peek<Middle>(x:Inv<Middle>) -> {
  return inv(peek(x.m));
}

function eval<Middle>(x:Inv<Middle>) -> {
  return inv(eval(x.m));
}

function grad<Middle,Gradient>(x:Inv<Middle>, d:Gradient) {
  let A <- inv(peek(x.m));
  grad(x.m, -outer(inner(A, d), A));
}

/**
 * Inverse of a matrix.
 */
function inv<Middle>(m:Middle) -> Inv<Middle> {
  return construct<Inv<Middle>>(m);
}
