struct Matrix<Value,Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(value(x.m));
}

function peek<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(peek(x.m));
}

function eval<Value,Middle>(x:Matrix<Value,Middle>) -> {
  return matrix<Value>(eval(x.m));
}

function grad<Value,Middle,Gradient>(x:Matrix<Value,Middle>, d:Gradient) {
  grad(x.m, grad_matrix<Value>(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Convert to matrix.
 */
template<class Value, class Middle,
    std::enable_if_t<is_delay<Middle>::value,int> = 0>
Matrix<Value,Middle> matrix(Middle&& m) {
  return construct<Matrix<Value,Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Convert to matrix.
 */
function matrix<Value,Type>(m:Type[_]) -> Value[_,_] {
  return matrix<Value>(mat(m, 1));
}

/**
 * Convert to matrix.
 */
function matrix<Value,Type>(m:Type[_,_]) -> Value[_,_] {
  return transform(m, \(x:Type) -> Value { return scalar<Value>(x); });
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Boolean) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Integer) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

/**
 * Convert to matrix.
 */
function matrix<Value>(m:Real) -> Value[_,_] {
  return [[scalar<Value>(m)]];
}

function grad_matrix<Gradient,Type>(d:Gradient[_,_], m:Type) -> {
  return scalar<Type>(d);
}

function grad_matrix<Gradient,Type>(d:Gradient[_,_], m:Type[_]) -> {
  return vector<Type>(d);
}

function grad_matrix<Gradient,Type>(d:Gradient[_,_], m:Type[_,_]) -> {
  return matrix<Type>(d);
}
