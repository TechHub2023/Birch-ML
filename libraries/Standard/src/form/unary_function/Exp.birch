struct Exp<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(exp)
  }}
}

function grad<Middle,Gradient>(x:Exp<Middle>, d:Gradient) {
  grad(x.m, d*exp(peek(x.m)));
}

hpp{{
namespace birch {
using numbirch::exp;

/**
 * Exponential.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Exp<Middle> exp(const Middle& m) {
  return construct<Exp<Middle>>(m);
}
}
}}
