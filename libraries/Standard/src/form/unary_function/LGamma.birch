struct LGamma<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(lgamma)
  }}
}

function grad<Middle,Gradient>(x:LGamma<Middle>, d:Gradient) -> {
  return grad(x.m, hadamard(d, digamma(peek(x.m))));
}

hpp{{
namespace birch {
using numbirch::lgamma;

/**
 * Logarithm of the gamma function.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
LGamma<Middle> lgamma(const Middle& m) {
  return construct<LGamma<Middle>>(m);
}
}
}}
