struct LFact<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(lfact)
  }}
}

function grad<Middle,Gradient>(x:LFact<Middle>, d:Gradient) {
  return grad(x.m, hadamard(d, lfact_grad(d, peek(x.m))));
}

hpp{{
namespace birch {
/**
 * Logarithm of the factorial function.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
LFact<Middle> lfact(const Middle& m) {
  return construct<LFact<Middle>>(m);
}

/**
 * Logarithm of the factorial function.
 */
template<class T, std::enable_if_t<!is_delay<T>::value,int> = 0>
auto lfact(const T& x) {
  return numbirch::lfact<Real>(x);
}

/**
 * Gradient of lfact().
 */
template<class G, class T, std::enable_if_t<!is_delay<T>::value,int> = 0>
auto lfact_grad(const G& d, const T& x) {
  return numbirch::lfact_grad<Real>(d, x);
}
}
}}
