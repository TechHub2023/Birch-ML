struct Transpose<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(transpose)
  }}
}

function grad<Middle,Gradient>(x:Transpose<Middle>, d:Gradient) {
  grad(x.m, transpose(d));
}

hpp{{
namespace birch {
using numbirch::transpose;

/**
 * Matrix transpose.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Transpose<Middle> transpose(const Middle& m) {
  return construct<Transpose<Middle>>(m);
}
}
}}
