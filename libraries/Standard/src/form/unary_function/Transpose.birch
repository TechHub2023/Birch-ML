struct Transpose<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Transpose<Middle>) -> {
  return transpose(value(x.m));
}

function peek<Middle>(x:Transpose<Middle>) -> {
  return transpose(peek(x.m));
}

function eval<Middle>(x:Transpose<Middle>) -> {
  return transpose(eval(x.m));
}

function grad<Middle,Gradient>(x:Transpose<Middle>, d:Gradient) {
  grad(x.m, transpose(d));
}

hpp{{
namespace birch {
/**
 * Matrix transpose.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Transpose<Middle> transpose(Middle&& m) {
  return construct<Transpose<Middle>>(std::forward<Middle>(m));
}
}
}}
