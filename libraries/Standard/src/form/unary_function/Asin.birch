struct Asin<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Asin<Middle>) -> {
  return asin(value(x.m));
}

function peek<Middle>(x:Asin<Middle>) -> {
  return asin(peek(x.m));
}

function eval<Middle>(x:Asin<Middle>) -> {
  return asin(eval(x.m));
}

function grad<Middle,Gradient>(x:Asin<Middle>, d:Gradient) {
  return grad(x.m, d/sqrt(1.0 - pow(peek(x.m), 2.0)));
}

hpp{{
namespace birch {
/**
 * Arc sine.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Asin<Middle> asin(const Middle& m) {
  return construct<Asin<Middle>>(m);
}
}
}}

/**
 * Arc sine.
 */
function asin(m:Real) -> Real {
  cpp{{
  return std::asin(m);
  }}
}
