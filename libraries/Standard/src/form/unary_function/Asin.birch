struct Asin<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(asin)
  }}
}

function grad<Middle,Gradient>(x:Asin<Middle>, d:Gradient) {
  return grad(x.m, d/sqrt(1.0 - pow(peek(x.m), 2.0)));
}

hpp{{
namespace birch {
using numbirch::asin;

/**
 * Arc sine.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Asin<Middle> asin(const Middle& m) {
  return construct<Asin<Middle>>(m);
}
}
}}
