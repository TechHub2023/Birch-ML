struct Diagonal<Middle>(m:Middle, n:Integer) < Unary<Middle>(m) {
  /**
   * Number of rows and columns.
   */
  n:Integer <- n;
}

function value<Middle>(x:Diagonal<Middle>) -> {
  return diagonal(value(x.m), x.n);
}

function peek<Middle>(x:Diagonal<Middle>) -> {
  return diagonal(peek(x.m), x.n);
}

function eval<Middle>(x:Diagonal<Middle>) -> {
  return diagonal(eval(x.m), x.n);
}

function grad<Middle,Gradient>(x:Diagonal<Middle>, d:Gradient) {
  grad(x.m, trace(d));
}

hpp{{
namespace birch {
using numbirch::diagonal;

/**
 * Create diagonal matrix, filling the diagonal with a given scalar value.
 *
 * - x: The value.
 * - n: Number of rows/columns.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Diagonal<Middle> diagonal(const Middle& m, const int n) {
  return construct<Diagonal<Middle>>(m, n);
}
}
}}
