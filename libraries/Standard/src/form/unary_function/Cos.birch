struct Cos<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Cos<Middle>) -> {
  return cos(value(x.m));
}

function peek<Middle>(x:Cos<Middle>) -> {
  return cos(peek(x.m));
}

function eval<Middle>(x:Cos<Middle>) -> {
  return cos(eval(x.m));
}

function grad<Middle,Gradient>(x:Cos<Middle>, d:Gradient) {
  grad(x.m, -d*sin(peek(x.m)));
}

/**
 * Cosine.
 */
function cos<Middle>(m:Middle) -> Cos<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Cos<Middle>>(m);
}

/**
 * Cosine.
 */
function cos(m:Integer) -> Real {
  return cos(scalar<Real>(m));
}

/**
 * Cosine.
 */
function cos(m:Real) -> Real {
  cpp {{
  return std::cos(m);
  }}
}
