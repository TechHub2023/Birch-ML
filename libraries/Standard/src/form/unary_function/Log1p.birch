struct Log1p<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Log1p<Middle>) -> {
  return log1p(value(x.m));
}

function peek<Middle>(x:Log1p<Middle>) -> {
  return log1p(peek(x.m));
}

function eval<Middle>(x:Log1p<Middle>) -> {
  return log1p(eval(x.m));
}

function grad<Middle,Gradient>(x:Log1p<Middle>, d:Gradient) {
  grad(x.m, d/(1.0 + peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Logarithm of one plus argument.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Log1p<Middle> log1p(const Middle& m) {
  return construct<Log1p<Middle>>(m);
}
}
}}

/**
 * Logarithm of one plus argument.
 */
function log1p(m:Real) -> Real {
  cpp{{
  return std::log1p(m);
  }}
}
