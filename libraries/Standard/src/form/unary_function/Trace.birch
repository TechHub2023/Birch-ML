struct Trace<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Trace<Middle>) -> {
  return trace(value(x.m));
}

function peek<Middle>(x:Trace<Middle>) -> {
  return trace(peek(x.m));
}

function eval<Middle>(x:Trace<Middle>) -> {
  return trace(eval(x.m));
}

function grad<Middle,Gradient>(x:Trace<Middle>, d:Gradient) {
  grad(x.m, grad_trace(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Trace.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Trace<Middle> trace(const Middle& m) {
  return construct<Trace<Middle>>(m);
}
}
}}

function grad_trace<Gradient,Type>(d:Gradient, m:Type) -> {
  return d;
}

function grad_trace<Gradient,Type>(d:Gradient, m:Type[_]) -> {
  return vector(d, length(m));
}

function grad_trace<Gradient,Type>(d:Gradient, m:Type[_,_]) -> {
  return diagonal(d, rows(m));
}
