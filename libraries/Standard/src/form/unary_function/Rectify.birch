struct Rectify<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Rectify<Middle>) -> {
  return rectify(value(x.m));
}

function peek<Middle>(x:Rectify<Middle>) -> {
  return rectify(peek(x.m));
}

function eval<Middle>(x:Rectify<Middle>) -> {
  return rectify(eval(x.m));
}

function grad<Middle,Gradient>(x:Rectify<Middle>, d:Gradient) {
  grad(x.m, rectify_grad(d, peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Rectification.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Rectify<Middle> rectify(const Middle& m) {
  return construct<Rectify<Middle>>(m);
}
}
}}

/**
 * Rectification.
 */
function rectify(x:Real) -> Real {
  return max(0.0, x);
}

/*
 * Gradient of `rectify()`.
 */
function rectify_grad<Gradient,Type>(d:Gradient, x:Type) -> {
  cpp{{
  return numbirch::rectify_grad(d, x);
  }}
}
