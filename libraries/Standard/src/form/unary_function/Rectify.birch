struct Rectify<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Rectify<Middle>) -> {
  return rectify(value(x.m));
}

function peek<Middle>(x:Rectify<Middle>) -> {
  return rectify(peek(x.m));
}

function eval<Middle>(x:Rectify<Middle>) -> {
  return rectify(eval(x.m));
}

function grad<Middle,Gradient>(x:Rectify<Middle>, d:Gradient) {
  grad(x.m, transform(d, peek(x.m), \(d:Real, m:Real) -> Real {
        return if_then_else(m > 0.0, d, 0.0);
      }));
}

/**
 * Rectify.
 */
function rectify<Middle>(m:Middle) -> Rectify<Middle> {
  cpp{{
  static_assert(is_form<Middle>::value, "argument types not supported");
  }}
  return construct<Rectify<Middle>>(m);
}

/**
 * Rectify scalar.
 */
function rectify(x:Real) -> Real {
  return max(0.0, x);
}
