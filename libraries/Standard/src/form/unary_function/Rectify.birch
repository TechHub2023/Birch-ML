struct Rectify<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Rectify<Middle>) -> {
  return rectify(value(x.m));
}

function peek<Middle>(x:Rectify<Middle>) -> {
  return rectify(peek(x.m));
}

function eval<Middle>(x:Rectify<Middle>) -> {
  return rectify(eval(x.m));
}

function grad<Middle,Gradient>(x:Rectify<Middle>, d:Gradient) {
  grad(x.m, transform(d, peek(x.m), \(d:Real, m:Real) -> Real {
        return if_then_else(m > 0.0, d, 0.0);
      }));
}

hpp{{
namespace birch {
/**
 * Rectification.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Rectify<Middle> rectify(Middle&& m) {
  return construct<Rectify<Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Rectification.
 */
function rectify(x:Real) -> Real {
  return max(0.0, x);
}
