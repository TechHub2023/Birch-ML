struct Rectify<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_FUNCTION_FORM(rectify)
  }}
}

function grad<Middle,Gradient>(x:Rectify<Middle>, d:Gradient) {
  grad(x.m, rectify_grad(d, peek(x.m)));
}

hpp{{
namespace birch {
using numbirch::rectify;
using numbirch::rectify_grad;

/**
 * Rectification.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Rectify<Middle> rectify(const Middle& m) {
  return construct<Rectify<Middle>>(m);
}
}
}}
