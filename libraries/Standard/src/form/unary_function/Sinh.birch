struct Sinh<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Sinh<Middle>) -> {
  return sinh(value(x.m));
}

function peek<Middle>(x:Sinh<Middle>) -> {
  return sinh(peek(x.m));
}

function eval<Middle>(x:Sinh<Middle>) -> {
  return sinh(eval(x.m));
}

function grad<Middle,Gradient>(x:Sinh<Middle>, d:Gradient) {
  grad(x.m, d*cosh(peek(x.m)));
}

hpp{{
namespace birch {
/**
 * Hyperbolic sine.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Sinh<Middle> sinh(Middle&& m) {
  return construct<Sinh<Middle>>(std::forward<Middle>(m));
}
}
}}

/**
 * Hyperbolic sine.
 */
function sinh(m:Real) -> Real {
  cpp{{
  return std::sinh(m);
  }}
}
