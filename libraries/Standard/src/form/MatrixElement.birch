/*
 * Element of a matrix.
 */
final class MatrixElement<Left,Middle,Right>(l:Left, i:Middle, j:Right) {
  /**
   * Matrix.
   */
  l:Left? <- l;

  /**
   * Row index.
   */
  m:Middle? <- m;

  /**
   * Column index.
   */
  r:Right? <- r;

  function value() -> {
    return global.value(l!)[global.value(m!), global.value(r!)];
  }

  function peak() -> {
    return global.peak(l!)[global.peak(m!), global.peak(r!)];
  }

  function eval() -> {
    return global.eval(l!)[global.eval(m!), global.eval(r!)];
  }

  function reval() -> {
    return global.reval(l!)[global.reval(m!), global.reval(r!)];
  }

  function grad<Gradient>(d:Gradient) {
    global.grad(l!, d, global.peak(m!), global.peak(r!));
  }

  function label(gen:Integer) {
    global.label(l!, gen);
    global.label(m!, gen);
    global.label(r!, gen);
  }

  function prune(gen:Integer) {
    global.prune(l!, gen);
    global.prune(m!, gen);
    global.prune(r!, gen);
  }

  function constant() {
    if l? {
      global.constant(l!);
      l <- nil;
    }
    if m? {
      global.constant(m!);
      m <- nil;
    }
    if r? {
      global.constant(r!);
      r <- nil;
    }
  }
}

/**
 * Element of a matrix.
 */
function element<Value,Form,Middle,Right>(x:MatrixSplitExpression<Value,Form>, i:Middle, j:Right) -> {
  return construct<MatrixElement<MatrixSplitExpression<Value,Form>,Middle,Right>>(x, i, j);
}

/**
 * Element of a matrix.
 */
function element(x:Boolean[_,_], i:Integer, j:Integer) -> Boolean {
  return x[i,j];
}

/**
 * Element of a matrix.
 */
function element(x:Integer[_,_], i:Integer, j:Integer) -> Integer {
  return x[i,j];
}

/**
 * Element of a matrix.
 */
function element(x:Real[_,_], i:Integer, j:Integer) -> Real {
  return x[i,j];
}
