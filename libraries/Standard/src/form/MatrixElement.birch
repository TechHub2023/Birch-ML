/*
 * Element of a matrix.
 */
struct MatrixElement<Left,Middle,Right>(l:Left, i:Middle, j:Right) {
  /**
   * Matrix.
   */
  l:Left <- l;

  /**
   * Row index.
   */
  m:Middle <- m;

  /**
   * Column index.
   */
  r:Right <- r;

  function value() -> {
    return global.value(l)[global.value(m), global.value(r)];
  }

  function peek() -> {
    return global.peek(l)[global.peek(m), global.peek(r)];
  }

  function eval() -> {
    return global.eval(l)[global.eval(m), global.eval(r)];
  }

  function reval() -> {
    return global.reval(l)[global.reval(m), global.reval(r)];
  }

  function grad<Gradient>(d:Gradient) {
    global.grad(l, d, global.peek(m), global.peek(r));
  }

  function label(gen:Integer) {
    global.label(l, gen);
    global.label(m, gen);
    global.label(r, gen);
  }

  function constant(gen:Integer) {
    global.constant(l, gen);
    global.constant(m, gen);
    global.constant(r, gen);
  }

  function constant() {
    global.constant(l);
    global.constant(m);
    global.constant(r);
  }
}

/**
 * Element of a matrix.
 */
function element<Value,Form,Middle,Right>(x:MatrixSplitExpression<Value,Form>, i:Middle, j:Right) -> {
  return construct<MatrixElement<MatrixSplitExpression<Value,Form>,Middle,Right>>(x, i, j);
}

/**
 * Element of a matrix.
 */
function element(x:Boolean[_,_], i:Integer, j:Integer) -> Boolean {
  return x[i,j];
}

/**
 * Element of a matrix.
 */
function element(x:Integer[_,_], i:Integer, j:Integer) -> Integer {
  return x[i,j];
}

/**
 * Element of a matrix.
 */
function element(x:Real[_,_], i:Integer, j:Integer) -> Real {
  return x[i,j];
}
