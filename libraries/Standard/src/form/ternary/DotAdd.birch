struct DotAddFunction {  
  function compute<LeftValue,MiddleValue,RightValue>(l:LeftValue,
      m:MiddleValue, r:RightValue) -> {
    return dot_add(l, m, r);
  }

  function grad<Gradient,LeftValue,MiddleValue,RightValue>(d:Gradient,
      l:LeftValue, m:MiddleValue, r:RightValue) -> {
    return (m*d, outer(l, d), d);
  }
}
struct DotAdd<Left,Middle,Right> = Ternary<DotAddFunction,Left,Middle,Right>;

/**
 * Dot product and add.
 */
function dot_add<Left,Middle,Right>(l:Left, m:Middle, r:Right) -> {
  return construct<DotAdd<Left,Middle,Right>>(l, m, r);
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Integer[_], r:Integer) -> Integer {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Integer[_], r:Real) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Real[_], r:Integer) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Real[_], r:Real) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Integer[_], r:Integer) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Integer[_], r:Real) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Real[_], r:Integer) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Real[_], r:Real) -> Real {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Integer[_,_], r:Integer[_]) -> Integer[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Integer[_,_], r:Real[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Real[_,_], r:Integer[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Integer[_], m:Real[_,_], r:Real[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Integer[_,_], r:Integer[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Integer[_,_], r:Real[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Real[_,_], r:Integer[_]) -> Real[_] {
  return dot(l, m) + r;
}

/**
 * Dot product and add.
 */
function dot_add(l:Real[_], m:Real[_,_], r:Real[_]) -> Real[_] {
  return dot(l, m) + r;
}
