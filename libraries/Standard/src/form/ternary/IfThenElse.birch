struct IfThenElse<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_TERNARY_FUNCTION_FORM(if_then_else, if_then_else_grad)
  }}
}

hpp{{
namespace birch {
/**
 * If `l` is true then return `m`, else return `r`.
 */
template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay<Left,Middle,Right>::value,int> = 0>
IfThenElse<Left,Middle,Right> if_then_else(const Left& l, const Middle& m,
    const Right& r) {
  return construct<IfThenElse<Left,Middle,Right>>(l, m, r);
}
}
}}

/**
 * If `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type, y:Type) -> Type {
  if cond {
    return x;
  } else {
    return y;
  }
}

/**
 * If `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type!, y:Type) -> Type! {
  if cond {
    return x;
  } else {
    return y;
  }
}

/**
 * If `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type, y:Type!) -> Type! {
  if cond {
    return x;
  } else {
    return y;
  }
}

/**
 * If `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type!, y:Type!) -> Type! {
  if cond {
    return x;
  } else {
    return y;
  }
}

function if_then_else_grad1<Gradient,Value,Left,Middle,Right>(g:Gradient,
    x:Value, l:Left, m:Middle, r:Right) -> {
  return 0.0;
}

function if_then_else_grad2<Gradient,Value,Left,Middle,Right>(g:Gradient,
    x:Value, l:Left, m:Middle, r:Right) -> {
  return if_then_else(l, g, 0.0);
}

function if_then_else_grad3<Gradient,Value,Left,Middle,Right>(g:Gradient,
    x:Value, l:Left, m:Middle, r:Right) -> {
  return if_then_else(l, 0.0, g);
}
