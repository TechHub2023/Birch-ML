struct MatrixGather<Left,Middle,Right>(A:Left, I:Middle, J:Right) <
    Ternary<Left,Middle,Right>(A, I, J) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_TERNARY_FUNCTION_FORM(gather)
  BIRCH_TERNARY_FUNCTION_GRAD(gather_grad)
  BIRCH_FUNCTION_FORM(gather)
  }}
}

hpp{{
namespace birch {
using numbirch::gather;
using numbirch::gather_grad1;
using numbirch::gather_grad2;
using numbirch::gather_grad3;

template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay_v<Left,Middle,Right>,int> = 0>
MatrixGather<Left,Middle,Right> gather(const Left& l, const Middle& m,
    const Right& r) {
  return construct<MatrixGather<Left,Middle,Right>>(l, m, r);
}

}
}}

/**
 * Matrix gather.
 */
function gather(A:NumberMatrixLike, I:IntegerMatrixLike,
    J:IntegerMatrixLike) -> NumberMatrixLike;
