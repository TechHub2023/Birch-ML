struct Where<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_TERNARY_FUNCTION_FORM(where, where_grad)
  BIRCH_FUNCTION_FORM(where, where_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::where;
using numbirch::where_grad1;
using numbirch::where_grad2;
using numbirch::where_grad3;

template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay_v<Left,Middle,Right>,int> = 0>
Where<Left,Middle,Right> where(const Left& l, const Middle& m,
    const Right& r) {
  return construct<Where<Left,Middle,Right>>(l, m, r);
}
}
}}

/**
 * Conditional.
 * 
 * @param x Argument.
 * @param y Argument.
 * @param z Argument.
 * 
 * @return Where @p x is true, elements of @p y, elsewhere elements of @p z.
 */
function where(x:NumericLike, y:NumericLike, z:NumericLike) -> NumericLike;
