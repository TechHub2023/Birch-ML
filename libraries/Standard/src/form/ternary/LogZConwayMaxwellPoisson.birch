struct LogZConwayMaxwellPoisson<Left,Middle,Right>(l:Left, m:Middle,
    r:Right) < Ternary<Left,Middle,Right>(l, m, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_TERNARY_FUNCTION_FORM(logz_conway_maxwell_poisson, logz_conway_maxwell_poisson_grad)
  }}
}

hpp{{
namespace birch {
/**
 * Logarithm of the normalizing constant of a Conway-Maxwell-Poisson
 * distribution truncated on a finite interval $[0,n]$.
 *
 * @param μ Mode.
 * @param ν Dispersion.
 * @param n Truncation point.
 *
 * @return vector of probabilities on $[0,n]$.
 */
template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay_v<Left,Middle,Right>,int> = 0>
LogZConwayMaxwellPoisson<Left,Middle,Right> logz_conway_maxwell_poisson(
    const Left& λ, const Middle& ν, const Right& n) {
  return construct<LogZConwayMaxwellPoisson<Left,Middle,Right>>(λ, ν, n);
}
}
}}

function logz_conway_maxwell_poisson(μ:Real, ν:Real, n:Integer) -> Real {
  /* to avoid taking exp() of large negative values, renormalize each term in
   * this sum using the maximum term, which is the unnormalized log
   * probability at the mode; this is similar to log_sum_exp() */
  let log_λ <- ν*log(μ);
  let mode <- min(μ, cast<Real>(n));
  let mx <- mode*log_λ - ν*lfact(mode);

  /* sum renormalized terms for x in 0..n */
  let log_xf <- 0.0;  // accumulator of log(x!)
  let Z <- exp(-mx);  // x = 0 case
  for x in 1..n {
    log_xf <- log_xf + log(x);
    Z <- Z + exp(x*log_λ - ν*log_xf - mx);
  }
  return mx + log(Z);
}

function logz_conway_maxwell_poisson_grad1<Gradient,Value>(g:Gradient, x:Value,
    μ:Real, ν:Real, n:Integer) -> {
  let log_λ <- ν*log(μ);
  let mx <- μ*log_λ - ν*lfact(μ);  // renormalizer
  let log_xf <- 0.0;  // accumulator of lfact(x)
  let z <- 0.0;
  let Z <- exp(-mx);  // for x == 0
  let gλ <- 0.0;
  for x in 1..n {
    log_xf <- log_xf + log(x);
    z <- exp(x*log_λ - ν*log_xf - mx);
    Z <- Z + z;
    gλ <- gλ + x*z;
  }
  return g*gλ*ν/(μ*Z);
}

function logz_conway_maxwell_poisson_grad2<Gradient,Value>(g:Gradient, x:Value,
    μ:Real, ν:Real, n:Integer) -> {
  let log_λ <- ν*log(μ);
  let mx <- μ*log_λ - ν*lfact(μ);  // renormalizer
  let log_xf <- 0.0;  // accumulator of lfact(x)
  let z <- 0.0;
  let Z <- exp(-mx);  // for x == 0
  let gλ <- 0.0;
  let gν <- 0.0;
  for x in 1..n {
    log_xf <- log_xf + log(x);
    z <- exp(x*log_λ - ν*log_xf - mx);
    Z <- Z + z;
    gλ <- gλ + x*z;
    gν <- gν - log_xf*z;
  }
  return g*(gν + gλ*log(μ))/Z;
}

function logz_conway_maxwell_poisson_grad3<Gradient,Value>(g:Gradient, x:Value,
    μ:Real, ν:Real, n:Integer) -> {
  return 0.0;
}
