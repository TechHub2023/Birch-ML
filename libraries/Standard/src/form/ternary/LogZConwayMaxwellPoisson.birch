struct LogZConwayMaxwellPoissonFunction {
  function compute<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2, n:Arg3) -> {
    return logz_conway_maxwell_poisson(λ, ν, n);
  }

  function gradLeft<Gradient,Arg1,Arg2,Arg3>(d:Gradient, λ:Arg1, ν:Arg2,
      n:Arg3) -> {
    let z <- vector_lambda(\(x:Integer) -> {
          return log(x) + x*log(λ) - ν*lgamma(x + 1);
        }, n);
    return d*exp(log(λ) - log_sum_exp(z));
  }

  function gradMiddle<Gradient,Arg1,Arg2,Arg3>(d:Gradient, λ:Arg1, ν:Arg2,
      n:Arg3) -> {
    let z <- 0.0;
    for x in 1..n {
      z <- z + lgamma(x + 1)*exp(x*log(λ) - ν*lgamma(x + 1));
    }
    return -d/z;
  }

  function gradRight<Gradient,Arg1,Arg2,Arg3>(d:Gradient, λ:Arg1, ν:Arg2,
      n:Arg3) -> {
    return 0.0;
  }
}
struct LogZConwayMaxwellPoisson<Left,Middle,Right> = Ternary<
    LogZConwayMaxwellPoissonFunction,Left,Middle,Right>;

/**
 * Logarithm of the normalizing constant of a Conway-Maxwell-Poisson
 * distribution truncated on a finite interval $[0,n]$.
 */
function logz_conway_maxwell_poisson<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2, n:Arg3) -> {
  return construct<LogZConwayMaxwellPoisson<Arg1,Arg2,Arg3>>(λ, ν, n);
}

/*
 * Logarithm of the normalizing constant of a Conway-Maxwell-Poisson
 * distribution truncated on a finite interval $[0,n]$.
 *
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: vector of probabilities on $[0,n]$.
 */
function logz_conway_maxwell_poisson(λ:Real, ν:Real, n:Integer) -> Real {
  let log_λ <- log(λ);
  let z <- vector_lambda(\(x:Integer) -> {
        return if_then_else(x == 1, 0.0, (x - 1)*log_λ - ν*lgamma(x));
      }, n + 1);
  return log_sum_exp(z);
}
