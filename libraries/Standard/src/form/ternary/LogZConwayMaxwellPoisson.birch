struct LogZConwayMaxwellPoissonFunction {
  function compute<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2, n:Arg3) -> {
    return logz_conway_maxwell_poisson(λ, ν, n);
  }

  function grad<Gradient,Arg1,Arg2,Arg3>(d:Gradient, λ:Arg1, ν:Arg2,
      n:Arg3) -> {
    let log_λ <- log(λ);
    let μ <- min(pow(λ, 1.0/ν), scalar<Real>(n));  // mode
    let mx <- μ*log_λ - ν*lgamma(μ + 1);  // renormalizer
    let log_xf <- 0.0;  // accumulator of log(x!)
    let z <- 0.0;
    let Z <- exp(-mx);  // for x == 0
    let dλ <- 0.0;
    let dν <- 0.0;
    for x in 1..n {
      log_xf <- log_xf + log(x);
      z <- exp(x*log_λ - ν*log_xf - mx);
      Z <- Z + z;
      dλ <- dλ + x*z;
      dν <- dν + log_xf*z;
    }
    dλ <- d*dλ/(λ*Z);
    dν <- -d*dν/Z;

    return (dλ, dν, 0.0);
  }
}
struct LogZConwayMaxwellPoisson<Left,Middle,Right> = Ternary<
    LogZConwayMaxwellPoissonFunction,Left,Middle,Right>;

/**
 * Logarithm of the normalizing constant of a Conway-Maxwell-Poisson
 * distribution truncated on a finite interval $[0,n]$.
 */
function logz_conway_maxwell_poisson<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2,
    n:Arg3) -> {
  return construct<LogZConwayMaxwellPoisson<Arg1,Arg2,Arg3>>(λ, ν, n);
}

/*
 * Logarithm of the normalizing constant of a Conway-Maxwell-Poisson
 * distribution truncated on a finite interval $[0,n]$.
 *
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: vector of probabilities on $[0,n]$.
 */
function logz_conway_maxwell_poisson(λ:Real, ν:Real, n:Integer) -> Real {
  let log_λ <- log(λ);

  /* to avoid taking exp() of large negative values, normalize each term in
   * this sum using the maximum term, which is the unnormalized log
   * probability at the mode; this is similar to log_sum_exp() */
  let μ <- min(pow(λ, 1.0/ν), scalar<Real>(n));  // mode
  let mx <- μ*log_λ - ν*lgamma(μ + 1.0);  // max unnormalized log probability

  /* sum renormalized terms */
  let log_xf <- 0.0;  // accumulator of log(x!)
  let Z <- exp(-mx);  // for x == 0
  for x in 1..n {
    log_xf <- log_xf + log(x);
    Z <- Z + exp(x*log_λ - ν*log_xf - mx);
  }

  return mx + log(Z);
}
