/*
 * Base struct for function forms.
 */
struct Form {
  //
}

hpp{{
namespace birch {
/**
 * Is `T` an array type?
 */
template<class T>
struct is_array {
  static constexpr bool value = false;
};
template<class T>
struct is_array<T&> {
  static constexpr bool value = is_array<T>::value;
};
template<class T>
struct is_array<T&&> {
  static constexpr bool value = is_array<T>::value;
};
template<class T, int D>
struct is_array<numbirch::Array<T,D>> {
  static constexpr bool value = true;
};

/**
 * Is `T` an arithmetic type?
 */
template<class T>
struct is_basic {
  static constexpr bool value =
      is_array<typename std::decay<T>::type>::value ||
      std::is_arithmetic<typename std::decay<T>::type>::value;
};

/**
 * Is `T` a Form?
 */
template<class T>
struct is_form {
  static constexpr bool value = std::is_base_of<Form,
      typename std::decay<T>::type>::value;
};

/**
 * Is `T` an Expression?
 */
template<class T>
struct is_expression {
private:
  template<class U>
  static constexpr bool test(
        typename std::decay<U>::type::value_type::Value_*) {
    return std::is_base_of<
        Expression_<typename std::decay<U>::type::value_type::Value_>,
        typename std::decay<U>::type::value_type>::value;
  }
  template<class>
  static constexpr bool test(...) {
    return false;
  }

public:
  static constexpr bool value = test<T>(0);
};

/**
 * Is `T` either arithmetic, or a Form, or an Expression?
 */
template<class T>
struct is_basic_or_form_or_expression {
  static constexpr bool value = is_basic<T>::value ||
      is_form<T>::value || is_expression<T>::value;
};

/**
 * Are all of the given types either arithmetic, or a Form, or an Expression?
 */
template<class Arg, class... Args>
struct all_basic_or_form_or_expression {
  static constexpr bool value =
      is_basic_or_form_or_expression<Arg>::value &&
      all_basic_or_form_or_expression<Args...>::value;
};
template<class Arg>
struct all_basic_or_form_or_expression<Arg> {
  static constexpr bool value =
      is_basic_or_form_or_expression<Arg>::value;
};

/**
 * Are any of the given types a Form or Expression?
 */
template<class Arg, class... Args>
struct any_form_or_expression {
  static constexpr bool value = is_form<Arg>::value ||
      is_expression<Arg>::value || any_form_or_expression<Args...>::value;
};
template<class Arg>
struct any_form_or_expression<Arg> {
  static constexpr bool value = is_form<Arg>::value ||
      is_expression<Arg>::value;
};

/**
 * Are the given types compatible as operands in a delayed expression?
 */
template<class... Args>
struct is_delay {
  static constexpr bool value =
      all_basic_or_form_or_expression<Args...>::value &&
      any_form_or_expression<Args...>::value;
};

}
}}
