/*
 * Element of a vector.
 */
struct VectorElement<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(element)
  BIRCH_BINARY_FUNCTION_GRAD(element_grad)
  BIRCH_FUNCTION_FORM(element)
  }}
}

hpp{{
namespace birch {
using numbirch::element;
using numbirch::element_grad1;
using numbirch::element_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
VectorElement<Left,Right> element(const Left& l, const Right& r) {
  return construct<VectorElement<Left,Right>>(l, r);
}
}
}}

/**
 * Element of a vector.
 * 
 * @param x Vector.
 * @param i Index.
 * 
 * @return Element.
 */
function element(x:NumberVectorLike, i:IntegerScalarLike) -> NumberScalarLike;
