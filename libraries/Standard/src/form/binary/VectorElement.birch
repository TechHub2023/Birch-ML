/*
 * Element of a vector.
 */
struct VectorElement<Left,Right>(l:Left, r:Right) < Binary<Left,Right> {
  //
}

function value<Left,Right>(x:VectorElement<Left,Right>) -> {
  return value(x.l)[value(x.r)];
}

function peek<Left,Right>(x:VectorElement<Left,Right>) -> {
  return peek(x.l)[peek(x.r)];
}

function eval<Left,Right>(x:VectorElement<Left,Right>) -> {
  return eval(x.l)[eval(x.r)];
}

function grad<Left,Right,Gradient>(x:VectorElement<Left,Right>, d:Gradient) {
  grad(x.l, d, peek(x.r));
  grad(x.r, 0.0);
}

/**
 * Element of a vector.
 */
function element<Value,Form,Right>(x:VectorSplitExpression<Value,Form>,
    i:Right) -> {
  return construct<VectorElement<VectorSplitExpression<Value,Form>,Right>>(x,
      i);
}

/**
 * Element of a vector.
 */
function element<Left,Right>(x:Left, i:Right) -> {
  return element(vector_split(x), i);
}

/**
 * Element of a vector.
 */
function element(x:Boolean[_], i:Integer) -> Boolean {
  return x[i];
}

/**
 * Element of a vector.
 */
function element(x:Integer[_], i:Integer) -> Integer {
  return x[i];
}

/**
 * Element of a vector.
 */
function element(x:Real[_], i:Integer) -> Real {
  return x[i];
}
