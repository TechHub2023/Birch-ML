/**
 * Delayed form for subtraction. This is returned by the operator
 * [-](../../operators/sub_) with one or more form or expression arguments.
 */
struct Sub<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(operator-, sub_grad)
  BIRCH_FUNCTION_FORM(operator-, sub_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::operator-;
using numbirch::sub_grad1;
using numbirch::sub_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
Sub<Left,Right> operator-(const Left& l, const Right& r) {
  return construct<Sub<Left,Right>>(l, r);
}
}
}}

/**
 * Element-wise subtraction.
 */
operator (x:NumberLike - y:NumberLike) -> NumberLike;

operator<Arg1,Arg2> (x:VectorFill<Arg1> - y:Arg2) -> {
  ///@todo Check for compatible sizes
  return x.m - y;
}

operator<Arg1,Arg2> (x:Arg1 - y:VectorFill<Arg2>) -> {
  ///@todo Check for compatible sizes
  return x - y.m;
}

operator<Arg1,Arg2> (x:MatrixFill<Arg1> - y:Arg2) -> {
  ///@todo Check for compatible sizes
  return x.m - y;
}

operator<Arg1,Arg2> (x:Arg1 - y:MatrixFill<Arg2>) -> {
  ///@todo Check for compatible sizes
  return x - y.m;
}
