struct LessThanFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return l < r;
  }
  
  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (0.0, 0.0);
  }
}
struct LessThan<Left,Right> = Binary<LessThanFunction,Left,Right>;

/**
 * Less than.
 */
operator<Left,Right> (l:Left < r:Right) -> {
  return construct<LessThan<Left,Right>>(l, r);
}

/**
 * Less than.
 */
operator (l:Integer < r:Integer) -> Boolean;

/**
 * Less than.
 */
operator (l:Real < r:Real) -> Boolean;

/**
 * Less than.
 */
operator (l:Integer < r:Real) -> Boolean;

/**
 * Less than.
 */
operator (l:Real < r:Integer) -> Boolean;
