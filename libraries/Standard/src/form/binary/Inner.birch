struct Inner<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Inner<Left,Right>) -> {
  return inner(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Inner<Left,Right>) -> {
  return inner(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Inner<Left,Right>) -> {
  return inner(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Inner<Left,Right>, d:Gradient) {
  grad(x.l, outer(peek(x.r), d));
  grad(x.r, peek(x.l)*d);
}

/**
 * Inner product.
 */
function inner<Left,Right>(l:Left, r:Right) -> Inner<Left,Right> {
  return construct<Inner<Left,Right>>(l, r);
}

/**
 * Scalar-matrix inner product.
 */
function inner(x:Real[_,_], y:Real) -> Real[_,_] {
  Z:Real[columns(x),rows(x)];
  cpp{{
  numbirch::transpose(Z.rows(), Z.columns(), y, x.data(), x.stride(),
      Z.data(), Z.stride());
  }}
  return Z;
}

/**
 * Matrix-vector inner product.
 */
function inner(X:Real[_,_], y:Real[_]) -> Real[_] {
  assert rows(X) == length(y);
  
  z:Real[columns(X)];
  cpp{{
  numbirch::inner(z.rows(), X.rows(), X.data(), X.stride(), y.data(),
      y.stride(), z.data(), z.stride());
  }}
  return z;
}

/**
 * Matrix inner product.
 */
function inner(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(X) == rows(Y);

  Z:Real[columns(X), columns(Y)];
  cpp{{
  numbirch::inner(Z.rows(), Z.columns(), X.rows(), X.data(), X.stride(),
      Y.data(), Y.stride(), Z.data(), Z.stride());
  }}
  return Z;
}
