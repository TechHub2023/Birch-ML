struct InnerFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return inner(l, r);
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (outer(r, d), l*d);
  }
}
struct Inner<Left,Right> = Binary<InnerFunction,Left,Right>;

/**
 * Inner product.
 */
function inner<Left,Right>(l:Left, r:Right) -> {
  return construct<Inner<Left,Right>>(l, r);
}

/**
 * Scalar product.
 */
function inner(x:Real, y:Real) -> Real {
  return x*y;
}

/**
 * Scalar product.
 */
function inner(x:Integer, y:Real) -> Real {
  return inner(scalar<Real>(x), y);
}

/**
 * Scalar product.
 */
function inner(x:Real, y:Integer) -> Real {
  return inner(x, scalar<Real>(y));
}

/**
 * Scalar-vector product.
 */
function inner(x:Real, y:Real[_]) -> Real[_] {
  return x*y;
}

/**
 * Scalar-vector inner product.
 */
function inner(x:Integer, y:Real[_]) -> Real[_] {
  return inner(scalar<Real>(x), y);
}

/**
 * Scalar-vector inner product.
 */
function inner(x:Real[_], y:Real) -> Real[_,_] {
  Z:Real[1,length(x)];
  cpp{{
  numbirch::transpose(Z.rows(), Z.columns(), y, x.data(), x.rowStride(),
      Z.data(), Z.rowStride());
  }}
  return Z;
}

/**
 * Scalar-vector inner product.
 */
function inner(x:Real[_], y:Integer) -> Real[_,_] {
  return inner(x, scalar<Real>(y));
}

/**
 * Scalar-matrix inner product.
 */
function inner(x:Real, y:Real[_,_]) -> Real[_,_] {
  return x*y;
}

/**
 * Scalar-matrix inner product.
 */
function inner(x:Integer, y:Real[_,_]) -> Real[_,_] {
  return inner(scalar<Real>(x), y);
}

/**
 * Scalar-matrix inner product.
 */
function inner(x:Real[_,_], y:Real) -> Real[_,_] {
  Z:Real[columns(x),rows(x)];
  cpp{{
  numbirch::transpose(Z.rows(), Z.columns(), y, x.data(), x.rowStride(),
      Z.data(), Z.rowStride());
  }}
  return Z;
}

/**
 * Scalar-matrix inner product.
 */
function inner(x:Real[_,_], y:Integer) -> Real[_,_] {
  return inner(x, scalar<Real>(y));
}

/**
 * Vector inner product.
 */
function inner(x:Real[_], y:Real[_]) -> Real[_] {
  assert length(x) == length(y);

  z:Real[1];
  cpp{{
  numbirch::inner(1, x.rows(), x.data(), x.rowStride(), y.data(),
      y.rowStride(), z.data(), z.rowStride());
  }}
  return z;
}

/**
 * Matrix-vector inner product.
 */
function inner(X:Real[_,_], y:Real[_]) -> Real[_] {
  assert rows(X) == length(y);
  
  z:Real[columns(X)];
  cpp{{
  numbirch::inner(X.columns(), X.rows(), X.data(), X.rowStride(), y.data(),
      y.rowStride(), z.data(), z.rowStride());
  }}
  return z;
}

/**
 * Vector-matrix inner product.
 */
function inner(x:Real[_], Y:Real[_,_]) -> Real[_,_] {
  assert length(x) == rows(Y);

  Z:Real[1,columns(Y)];
  cpp{{
  numbirch::inner(1, Z.columns(), x.rows(), x.data(), x.rowStride(),
      Y.data(), Y.rowStride(), Z.data(), Z.rowStride());
  }}
  return Z;
}

/**
 * Matrix inner product.
 */
function inner(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(X) == rows(Y);

  Z:Real[columns(X), columns(Y)];
  cpp{{
  numbirch::inner(Z.rows(), Z.columns(), X.rows(), X.data(), X.rowStride(),
      Y.data(), Y.rowStride(), Z.data(), Z.rowStride());
  }}
  return Z;
}
