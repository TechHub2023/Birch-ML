struct TriInnerSolve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(triinnersolve, triinnersolve_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::triinnersolve;
using numbirch::triinnersolve_grad1;
using numbirch::triinnersolve_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
TriInnerSolve<Left,Right> triinnersolve(const Left& l, const Right& r) {
  return construct<TriInnerSolve<Left,Right>>(l, r);
}
}
}}

/**
 * Lower-triangular-matrix-scalar inner solve.
 * 
 * @param L Lower-triangular matrix $L$.
 * @param y Scalar $y$.
 * 
 * @return Solution of $B$ in $LB = Iy$.
 */
function triinnersolve(L:RealMatrixLike, y:RealScalarLike) -> RealMatrixLike; 

/**
 * Lower-triangular-matrix-vector inner solve.
 * 
 * @param L Lower-triangular matrix $L$.
 * @param y Vector $y$.
 * 
 * @return Solution of $x$ in $y = L^\top x$.
 */
function triinnersolve(L:RealMatrixLike, y:RealVectorLike) -> RealVectorLike;

/**
 * Lower-triangular-matrix-matrix inner solve.
 * 
 * @param L Lower-triangular matrix $L$.
 * @param C Matrix $C$.
 * 
 * @return Solution of $B$ in $C = L^\top B$.
 */
function triinnersolve(L:RealMatrixLike, C:RealMatrixLike) -> RealMatrixLike;
