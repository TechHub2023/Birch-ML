struct LessThanOrEqualFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return l <= r;
  }
  
  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (0.0, 0.0);
  }
}
struct LessThanOrEqual<Left,Right> = Binary<LessThanOrEqualFunction,Left,Right>;

/**
 * Less than or equal.
 */
operator<Left,Right> (l:Left <= r:Right) -> {
  return construct<LessThanOrEqual<Left,Right>>(l, r);
}

/**
 * Less than or equal.
 */
operator (l:Integer <= r:Integer) -> Boolean;

/**
 * Less than or equal.
 */
operator (l:Real <= r:Real) -> Boolean;

/**
 * Less than or equal.
 */
operator (l:Integer <= r:Real) -> Boolean;

/**
 * Less than or equal.
 */
operator (l:Real <= r:Integer) -> Boolean;
