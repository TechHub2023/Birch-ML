struct DotFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return dot(l, r);
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (r*d, outer(l, d));
  }
}
struct Dot<Left,Right> = Binary<DotFunction,Left,Right>;

/**
 * Dot product.
 */
function dot<Left,Right>(l:Left, r:Right) -> {
  return construct<Dot<Left,Right>>(l, r);
}

/**
 * Dot product of two vectors.
 */
function dot(x:Real[_], y:Real[_]) -> Real {
  assert length(x) == length(y);
  cpp{{
  return numbirch::dot(x.rows(), x.data(), x.rowStride(), y.data(),
      y.rowStride());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Real[_], Y:Real[_,_]) -> Real[_] {
  assert length(x) == rows(Y);

  z:Real[columns(Y)];
  cpp{{
  numbirch::inner(Y.columns(), Y.rows(), Y.data(), Y.rowStride(), x.data(),
      x.rowStride(), z.data(), z.rowStride());
  }}
  return z;
}
