struct Dot<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Dot<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_dot(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

/**
 * Dot product.
 */
function dot<Left,Right>(l:Left, r:Right) -> Dot<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Dot<Left,Right>>(l, r);
}

function grad_dot(d:Real, l:Real[_], r:Real[_]) -> (Real[_], Real[_]) {
  return (r*d, l*d);
}

function grad_dot(d:Real[_], l:Real[_], r:Real[_,_]) -> (Real[_], Real[_,_]) {
  return (r*d, outer(l, d));
}
