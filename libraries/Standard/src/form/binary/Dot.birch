struct Dot<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Dot<Left,Right>) -> {
  return dot(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Dot<Left,Right>, d:Gradient) {
  grad(x.l, peek(x.r)*d);
  grad(x.r, outer(peek(x.l), d));
}

/**
 * Dot product.
 */
function dot<Left,Right>(l:Left, r:Right) -> Dot<Left,Right> {
  return construct<Dot<Left,Right>>(l, r);
}

/**
 * Dot product of two vectors.
 */
function dot(x:Real[_], y:Real[_]) -> Real {
  assert length(x) == length(y);
  cpp{{
  return numbirch::dot(x.length(), x.data(), x.stride(), y.data(), y.stride());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `inner(Y, x)`.
 */
function dot(x:Real[_], Y:Real[_,_]) -> Real[_] {
  assert length(x) == rows(Y);

  z:Real[columns(Y)];
  cpp{{
  numbirch::inner(z.rows(), Y.rows(), Y.data(), Y.stride(), x.data(),
      x.stride(), z.data(), z.stride());
  }}
  return z;
}
