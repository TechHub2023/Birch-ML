struct Divide<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Divide<Left,Right>) -> {
  return value(x.l)/value(x.r);
}

function peek<Left,Right>(x:Divide<Left,Right>) -> {
  return peek(x.l)/peek(x.r);
}

function eval<Left,Right>(x:Divide<Left,Right>) -> {
  return eval(x.l)/eval(x.r);
}

function grad<Left,Right,Gradient>(x:Divide<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_divide(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

/**
 * Division.
 */
operator<Left,Right> (l:Left/r:Right) -> Divide<Left,Right> {
  return construct<Divide<Left,Right>>(l, r);
}

/**
 * Division.
 */
operator (x:Integer/y:Integer) -> Integer;

/**
 * Division.
 */
operator (x:Integer/y:Real) -> Real;

/**
 * Division.
 */
operator (x:Real/y:Integer) -> Real;

/**
 * Division.
 */
operator (x:Real/y:Real) -> Real;

/**
 * Division.
 */
operator (x:Real[_]/y:Real) -> Real[_] {
  z:Real[length(x)];
  cpp{{
  numbirch::div(1, x.length(), x.data(), x.stride(), y, z.data(), z.stride());
  }}
  return z;
}

/**
 * Division.
 */
operator (x:Real[_]/y:Integer) -> Real[_] {
  return x/scalar<Real>(y);
}

/**
 * Division.
 */
operator (X:Real[_,_]/y:Real) -> Real[_,_] {
  Z:Real[rows(X), columns(X)];
  cpp{{
  numbirch::div(X.rows(), X.columns(), X.data(), X.stride(), y, Z.data(),
      Z.stride());
  }}
  return Z;
}

/**
 * Division.
 */
operator (X:Real[_,_]/y:Integer) -> Real[_,_] {
  return X/scalar<Real>(y);
}

function grad_divide<Left,Right>(d:Real, l:Left, r:Right) -> (Real, Real) {
  return (d/r, d*l/-pow(r, 2.0));
}

function grad_divide<Left,Right>(d:Real[_], l:Left[_], r:Right) ->
    (Real[_], Real) {
  return (d/r, dot(d, l)/-pow(r, 2.0));
}

function grad_divide<Left,Right>(d:Real[_,_], l:Left[_,_], r:Right) ->
    (Real[_,_], Real) {
  return (d/r, frobenius(d, l)/-pow(r, 2.0));
}
