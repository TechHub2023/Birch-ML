struct Divide<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Divide<Left,Right>) -> {
  return value(x.l)/value(x.r);
}

function peek<Left,Right>(x:Divide<Left,Right>) -> {
  return peek(x.l)/peek(x.r);
}

function eval<Left,Right>(x:Divide<Left,Right>) -> {
  return eval(x.l)/eval(x.r);
}

function grad<Left,Right,Gradient>(x:Divide<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_divide(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

/**
 * Division.
 */
operator<Left,Right> (l:Left/r:Right) -> Divide<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Divide<Left,Right>>(l, r);
}

function grad_divide(d:Real, l:Real, r:Real) -> (Real, Real) {
  return (d/r, d*l/-pow(r, 2.0));
}

function grad_divide(d:Real[_], l:Real[_], r:Real) -> (Real[_], Real) {
  return (d/r, dot(d, l)/-pow(r, 2.0));
}

function grad_divide(d:Real[_,_], l:Real[_,_], r:Real) -> (Real[_,_], Real) {
  return (d/r, frobenius(d, l)/-pow(r, 2.0));
}
