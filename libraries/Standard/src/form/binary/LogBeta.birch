struct LogBeta<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:LogBeta<Left,Right>) -> {
  return lbeta(value(x.l), value(x.r));
}

function peek<Left,Right>(x:LogBeta<Left,Right>) -> {
  return lbeta(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:LogBeta<Left,Right>) -> {
  return lbeta(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:LogBeta<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  grad(x.l, d*(digamma(l) - digamma(l + r)));
  grad(x.r, d*(digamma(r) - digamma(l + r)));
}

/**
 * Logarithm of the beta function.
 */
function lbeta<Left,Right>(l:Left, r:Right) -> LogBeta<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<LogBeta<Left,Right>>(l, r);
}

function lbeta(l:Real, r:Real) -> Real {
  return lgamma(l) + lgamma(r) - lgamma(l + r);
}

function lbeta(l:Integer, r:Integer) -> Real {
  return lbeta(scalar<Real>(l), scalar<Real>(r));
}

function lbeta(l:Integer, r:Real) -> Real {
  return lbeta(scalar<Real>(l), r);
}

function lbeta(l:Real, r:Integer) -> Real {
  return lbeta(l, scalar<Real>(r));
}
