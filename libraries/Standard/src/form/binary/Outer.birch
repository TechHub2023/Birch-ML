final class OuterFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return outer(l, r);
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return d*r;
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return transpose(d)*l;
  }
}
class Outer<Left,Right> = Binary<OuterFunction,Left,Right>;

/**
 * Outer product of an argument with itself.
 */
function outer<Middle>(m:Middle) -> {
  return outer(m, m);
}

/**
 * Outer product of a scalar with itself.
 */
function outer(x:Integer) -> Integer {
  return outer(x, x);
}

/**
 * Outer product of a scalar with itself.
 */
function outer(x:Real) -> Real {
  return outer(x, x);
}

/**
 * Outer product of a vector with itself.
 */
function outer(x:Integer[_]) -> Integer[_,_] {
  return outer(x, x);
}

/**
 * Outer product of a vector with itself.
 */
function outer(x:Real[_]) -> Real[_,_] {
  return outer(x, x);
}

/**
 * Outer product of a matrix with itself.
 */
function outer(X:Integer[_,_]) -> Integer[_,_] {
  return outer(X, X);
}

/**
 * Outer product of a matrix with itself.
 */
function outer(X:Real[_,_]) -> Real[_,_] {
  return outer(X, X);
}

/**
 * Outer product.
 */
function outer<Left,Right>(l:Left, r:Right) -> {
  return construct<Outer<Left,Right>>(l, r);
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Integer) -> Integer {
  return x*y;
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Real) -> Real {
  return x*y;
}

/**
 * Outer product.
 */
function outer(x:Real, y:Integer) -> Real {
  return x*y;
}

/**
 * Outer product.
 */
function outer(x:Real, y:Real) -> Real {
  return x*y;
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Integer[_]) -> Integer[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Real[_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real, y:Integer[_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().cast<birch::type::Real>().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real, y:Real[_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_], y:Integer) -> Integer[_] {
  cpp{{
  return x.toEigen().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_], y:Real) -> Real[_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_], y:Integer) -> Real[_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_], y:Real) -> Real[_] {
  cpp{{
  return x.toEigen().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_], y:Integer[_]) -> Integer[_,_] {
  cpp{{
  return x.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_], y:Real[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_], y:Integer[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator*(y.toEigen().cast<birch::type::Real>().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_], y:Real[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer, y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real, y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().cast<birch::type::Real>().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real, y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().transpose().operator*(x);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_,_], y:Integer) -> Integer[_,_] {
  cpp{{
  return x.toEigen().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Integer[_,_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_,_], y:Integer) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(x:Real[_,_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator*(y);
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_,_], y:Integer[_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_,_], y:Real[_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().cast<birch::type::Real>().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_,_], y:Integer[_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().cast<birch::type::Real>().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_,_], y:Real[_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_], y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_], y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().cast<birch::type::Real>().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_], y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().cast<birch::type::Real>().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_], y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_,_], Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen().operator*(Y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Integer[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().cast<birch::type::Real>().operator*(Y.toEigen().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_,_], Y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(Y.toEigen().cast<birch::type::Real>().transpose());
  }}
}

/**
 * Outer product.
 */
function outer(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().operator*(Y.toEigen().transpose());
  }}
}
