struct Outer<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(outer, outer_grad)
  BIRCH_FUNCTION_FORM(outer, outer_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::outer;
using numbirch::outer_grad1;
using numbirch::outer_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
Outer<Left,Right> outer(const Left& l, const Right& r) {
  return construct<Outer<Left,Right>>(l, r);
}
}
}}

/**
 * Vector-vector outer product.
 * 
 * @param x Vector $x$.
 * @param y Vector $y$.
 * 
 * @return Result $C = xy^\top$.
 */
function outer(x:RealVectorLike, y:RealVectorLike) -> RealMatrixLike;

/**
 * Matrix-matrix outer product.
 * 
 * @param A Matrix $A$.
 * @param B Matrix $B$.
 * 
 * @return Result $C = AB^\top$.
 */
function outer(A:RealMatrixLike, B:RealMatrixLike) -> RealMatrixLike;
