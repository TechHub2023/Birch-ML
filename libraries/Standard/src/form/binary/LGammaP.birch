struct LGammaP<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(lgamma)
  BIRCH_BINARY_FUNCTION_GRAD(lgamma_grad)
  BIRCH_FUNCTION_FORM(lgamma)
  }}
}

hpp{{
namespace birch {
using numbirch::lgamma;
using numbirch::lgamma_grad1;
using numbirch::lgamma_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
LGammaP<Left,Right> lgamma(const Left& l, const Right& r) {
  return construct<LGammaP<Left,Right>>(l, r);
}
}
}}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma(x:NumberLike, p:NumberLike) -> RealLike;
