struct Frobenius<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(frobenius)
  BIRCH_BINARY_FUNCTION_GRAD(frobenius_grad)
  BIRCH_FUNCTION_FORM(frobenius)
  }}
}

hpp{{
namespace birch {
using numbirch::frobenius;
using numbirch::frobenius_grad1;
using numbirch::frobenius_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
Frobenius<Left,Right> frobenius(const Left& l, const Right& r) {
  return construct<Frobenius<Left,Right>>(l, r);
}
}
}}

/**
 * Matrix-matrix Frobenius product.
 * 
 * @param A Matrix $A$.
 * @param B Matrix $B$.
 * 
 * @return Result $\langle A, B \rangle_\mathrm{F} = \mathrm{Tr}(A^\top B) =
 * \sum_{ij} A_{ij} B_{ij}$ as a scalar.
 */
function frobenius(A:RealMatrixLike, B:RealMatrixLike) -> RealScalarLike;
