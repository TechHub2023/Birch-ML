struct VectorScatter<Left,Right>(l:Left, r:Right, n:Integer) <
    Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Length of result.
   */
  n:Integer <- n;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(scatter, scatter_grad, n)
  BIRCH_FUNCTION_FORM(scatter, scatter_grad, n)
  }}
}

hpp{{
namespace birch {
using numbirch::scatter;
using numbirch::scatter_grad1;
using numbirch::scatter_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
VectorScatter<Left,Right> scatter(const Left& l, const Right& r,
    const int n) {
  return construct<VectorScatter<Left,Right>>(l, r, n);
}

}
}}

/**
 * Vector scatter.
 */
function scatter(x:NumberVectorLike, y:IntegerVectorLike, n:Integer) ->
    NumberVectorLike;
