struct TriMul<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(trimul, trimul_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::trimul;
using numbirch::trimul_grad1;
using numbirch::trimul_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
TriMul<Left,Right> trimul(const Left& l, const Right& r) {
  return construct<TriMul<Left,Right>>(l, r);
}
}
}}

/**
 * Lower-triangular-matrix-vector product.
 * 
 * @param L Lower-triangular matrix $L$.
 * @param x Vector $x$.
 * 
 * @return Result $y = Lx$.
 */
function trimul(L:RealMatrixLike, x:RealVectorLike) -> RealVectorLike;

/**
 * Lower-triangular-matrix-matrix product.
 * 
 * @param L Lower-triangular matrix $L$.
 * @param B Matrix $B$.
 * 
 * @return Result $C = LB$.
 */
function trimul(L:RealMatrixLike, B:RealMatrixLike) -> RealMatrixLike;
