struct MatrixPack<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(pack)
  BIRCH_BINARY_FUNCTION_GRAD(pack_grad)
  BIRCH_FUNCTION_FORM(pack)
  }}
}

hpp{{
namespace birch {
using numbirch::pack;
using numbirch::pack_grad1;
using numbirch::pack_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
MatrixPack<Left,Right> pack(const Left& l, const Right& r) {
  return construct<MatrixPack<Left,Right>>(l, r);
}
}
}}

/**
 * Pack two arrays next to each other, concatenating their rows.
 * 
 * @param x Argument.
 * @param y Argument.
 * 
 * @return Result.
 * 
 * @p x and @p y must have the same number of rows. The result has this
 * number of rows, and a number of columns equal to the number of columns
 * of @p x plus the number of columns of @p y.
 */
function pack(x:NumberLike, y:NumberLike) -> NumberMatrixLike;
