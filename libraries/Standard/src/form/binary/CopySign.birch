struct CopySign<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(copysign, copysign_grad)
  BIRCH_FUNCTION_FORM(copysign, copysign_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::copysign;
using numbirch::copysign_grad1;
using numbirch::copysign_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
CopySign<Left,Right> copysign(const Left& l, const Right& r) {
  return construct<CopySign<Left,Right>>(l, r);
}
}
}}

/**
 * Copy sign.
 * 
 * @param x Argument.
 * @param y Argument.
 * 
 * @return Result with the absolute values of @p x but signs of @p y.
 */
function copysign(x:NumberLike, y:NumberLike) -> NumberLike;
