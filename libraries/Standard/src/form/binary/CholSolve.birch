struct CholSolve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(cholsolve)
  BIRCH_BINARY_FUNCTION_GRAD(cholsolve_grad)
  BIRCH_FUNCTION_FORM(cholsolve)
  }}
}

hpp{{
namespace birch {
using numbirch::cholsolve;
using numbirch::cholsolve_grad1;
using numbirch::cholsolve_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
CholSolve<Left,Right> cholsolve(const Left& l, const Right& r) {
  return construct<CholSolve<Left,Right>>(l, r);
}
}
}}

/**
 * Matrix-scalar solve via the Cholesky factorization.
 * 
 * @param L Lower-triangular Cholesky factor $L$ of the symmetric positive
 * definite matrix $S = LL^\top$.
 * @param y Scalar $y$.
 * 
 * @return Solution of $B$ in $SB = LL^\top B = Iy$.
 */
function cholsolve(L:RealMatrixLike, y:RealScalarLike) -> RealMatrixLike;

/**
 * Matrix-vector solve via the Cholesky factorization.
 * 
 * @param L Lower-triangular Cholesky factor $L$ of the symmetric positive
 * definite matrix $S = LL^\top$.
 * @param y Vector $y$.
 * 
 * @return Solution of $x$ in $Sx = LL^\top x = y$.
 */
function cholsolve(L:RealMatrixLike, y:RealVectorLike) -> RealVectorLike;

/**
 * Matrix-matrix solve via the Cholesky factorization.
 * 
 * @param L Lower-triangular Cholesky factor $L$ of the symmetric positive
 * definite matrix $S = LL^\top$.
 * @param C Matrix $C$.
 * 
 * @return Solution of $B$ in $SB = LL^\top B = C$.
 */
function cholsolve(L:RealMatrixLike, y:RealMatrixLike) -> RealMatrixLike;

function cholsolve<Arg1,Arg2>(L:DiagonalScalar<Arg1>, y:Arg2) -> {
  ///@todo Check for compatible sizes
  return y/pow(L.m, 2.0);
}

function cholsolve<Arg1,Arg2>(L:DiagonalVector<Arg1>, y:Arg2) -> {
  ///@todo Check for compatible sizes
  return y/pow(L.m, 2.0);
}
