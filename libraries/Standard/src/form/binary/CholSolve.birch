struct CholSolve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:CholSolve<Left,Right>) -> {
  return cholsolve(value(x.l), value(x.r));
}

function peek<Left,Right>(x:CholSolve<Left,Right>) -> {
  return cholsolve(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:CholSolve<Left,Right>) -> {
  return cholsolve(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:CholSolve<Left,Right>, d:Gradient) {
  let l <- cholinv(peek(x.l));
  let r <- peek(x.r);
  grad(x.l, -l*outer(d, r)*l);
  grad(x.r, inner(l, d));
}

/**
 * Solve a system of equations where the left argument is a symmetric
 * positive-definite matrix. The solution is via the Cholesky factorization.
 */
function cholsolve<Left,Right>(l:Left, r:Right) -> CholSolve<Left,Right> {
  return construct<CholSolve<Left,Right>>(l, r);
}

/**
 * Solve a system of equations via the Cholesky factorization.
 */
function cholsolve(S:Real[_,_], y:Real[_]) -> Real[_] {
  assert rows(S) == columns(S);
  assert rows(S) == length(y);

  x:Real[length(y)];
  cpp{{
  numbirch::cholsolve(x.rows(), S.data(), S.stride(), x.data(), x.stride(),
      y.data(), y.stride());
  }}
  return x;
}

/**
 * Solve a system of equations via the Cholesky factorization.
 */
function cholsolve(S:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(S) == columns(S);
  assert rows(S) == rows(Y);

  X:Real[rows(Y), columns(Y)];
  cpp{{
  numbirch::cholsolve(X.rows(), X.columns(), S.data(), S.stride(), X.data(),
      X.stride(), Y.data(), Y.stride());
  }}
  return X;
}
