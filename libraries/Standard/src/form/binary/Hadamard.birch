struct Hadamard<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Hadamard<Left,Right>) -> {
  return hadamard(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Hadamard<Left,Right>, d:Gradient) {
  grad(x.l, hadamard(d, peek(x.r)));
  grad(x.r, hadamard(d, peek(x.l)));
}

/**
 * Hadamard (element-wise) product.
 */
function hadamard<Left,Right>(l:Left, r:Right) -> Hadamard<Left,Right> {
  return construct<Hadamard<Left,Right>>(l, r);
}

/**
 * Hadamard (element-wise) vector product.
 */
function hadamard<Type>(x:Type[_], y:Type[_]) -> Type[_] {
  assert length(x) == length(y);
  z:Real[length(x)];
  cpp{{
  numbirch::hadamard(1, x.length(), x.data(), x.stride(), y.data(),
      y.stride(), z.data(), z.stride());
  }}
  return z;
}

/**
 * Hadamard (element-wise) matrix product.
 */
function hadamard<Type>(X:Type[_,_], Y:Type[_,_]) -> Type[_,_] {
  assert rows(X) == rows(Y);
  assert columns(X) == columns(Y);
  Z:Real[rows(X), columns(X)];
  cpp{{
  numbirch::hadamard(X.rows(), X.columns(), X.data(), X.stride(), Y.data(),
      Y.stride(), Z.data(), Z.stride());
  }}
  return Z;
}
