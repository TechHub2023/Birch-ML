struct And<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:And<Left,Right>) -> {
  return value(x.l) && value(x.r);
}

function peek<Left,Right>(x:And<Left,Right>) -> {
  return peek(x.l) && peek(x.r);
}

function eval<Left,Right>(x:And<Left,Right>) -> {
  return eval(x.l) && eval(x.r);
}

function grad<Left,Right,Gradient>(x:And<Left,Right>, d:Gradient) {
  grad(x.l, 0.0);
  grad(x.r, 0.0);
}

/**
 * Logical `and`.
 */
operator<Left,Right> (l:Left && r:Right) -> And<Left,Right> {
  return construct<And<Left,Right>>(l, r);
}

/**
 * Logical `and`.
 */
operator (l:Boolean && r:Boolean) -> Boolean;
