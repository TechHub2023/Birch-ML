struct Diagonal<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Diagonal<Left,Right>) -> {
  return diagonal(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Diagonal<Left,Right>, d:Gradient) {
  grad(x.l, trace(d));
  grad(x.r, 0.0);
}

/**
 * Create diagonal matrix, filling the diagonal with a given scalar value.
 *
 * - x: The value.
 * - length: Number of rows/columns.
 */
function diagonal<Left,Right>(l:Left, r:Right) -> Diagonal<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Diagonal<Left,Right>>(l, r);
}

function diagonal(x:Real, n:Integer) -> Real[_,_] {
  cpp{{
  return numbirch::diagonal(x, n);
  }}
}
