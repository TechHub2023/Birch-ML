struct AddFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return l + r;
  }
  
  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (d, d);
  }
}
struct Add<Left,Right> = Binary<AddFunction,Left,Right>;

/**
 * Addition.
 */
operator<Left,Right> (l:Left + r:Right) -> Add<Left,Right> {
  return construct<Add<Left,Right>>(l, r);
}

/**
 * Addition.
 */
operator (x:Integer + y:Integer) -> Integer;

/**
 * Addition.
 */
operator (x:Real + y:Real) -> Real;

/**
 * Addition.
 */
operator (x:Integer + y:Real) -> Real;

/**
 * Addition.
 */
operator (x:Real + y:Integer) -> Real;

/**
 * Addition.
 */
operator (x:Integer[_] + y:Integer[_]) -> Integer[_] {
  return transform(x, y, \(x:Integer, y:Integer) -> { return x + y; });
}

/**
 * Addition.
 */
operator (X:Integer[_,_] + Y:Integer[_,_]) -> Integer[_,_] {
  return transform(X, Y, \(x:Integer, y:Integer) -> { return x + y; });
}

/**
 * Addition.
 */
operator (x:Real[_] + y:Real[_]) -> Real[_] {
  assert length(x) == length(y);

  z:Real[length(x)];
  cpp{{
  numbirch::add(x.rows(), x.data(), x.rowStride(), y.data(), y.rowStride(),
      z.data(), z.rowStride());
  }}
  return z;
}

/**
 * Addition.
 */
operator (X:Real[_,_] + Y:Real[_,_]) -> Real[_,_] {
  assert rows(X) == rows(Y);
  assert columns(Y) == columns(Y);

  Z:Real[rows(X), columns(X)];
  cpp{{
  numbirch::add(X.rows(), X.columns(), X.data(), X.rowStride(), Y.data(),
      Y.rowStride(), Z.data(), Z.rowStride());
  }}
  return Z;
}
