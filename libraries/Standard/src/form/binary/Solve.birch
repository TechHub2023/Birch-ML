struct Solve<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Solve<Left,Right>) -> {
  return solve(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Solve<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let l1 <- inv(l);
  grad(x.l, -l1*outer(d, r)*l1);
  grad(x.r, inner(l1, d));
}

/**
 * Solve a system of equations.
 */
function solve<Left,Right>(l:Left, r:Right) -> Solve<Left,Right> {
  return construct<Solve<Left,Right>>(l, r);
}

/**
 * Solve a system of equations.
 */
function solve(A:Real[_,_], y:Real[_]) -> Real[_] {
  assert rows(A) == columns(A);
  assert rows(A) == length(y);

  x:Real[length(y)];
  cpp{{
  numbirch::solve(x.rows(), A.data(), A.stride(), x.data(), x.stride(),
      y.data(), y.stride());
  }}
  return x;
}

/**
 * Solve a system of equations.
 */
function solve(A:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(A) == columns(A);
  assert rows(A) == rows(Y);

  X:Real[rows(Y), columns(Y)];
  cpp{{
  numbirch::solve(X.rows(), X.columns(), A.data(), A.stride(), X.data(),
      X.stride(), Y.data(), Y.stride());
  }}
  return X;
}
