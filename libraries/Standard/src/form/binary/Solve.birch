struct SolveFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return solve(l, r);
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    let l1 <- inv(l);
    return (-l1*outer(d, r)*l1, inner(l1, d));
  }
}
struct Solve<Left,Right> = Binary<SolveFunction,Left,Right>;

/**
 * Solve a system of equations.
 */
function solve<Left,Right>(l:Left, r:Right) -> {
  return construct<Solve<Left,Right>>(l, r);
}

/**
 * Solve a system of equations.
 */
function solve(A:Real[_,_], y:Real[_]) -> Real[_] {
  assert rows(A) == columns(A);
  assert rows(A) == length(y);

  x:Real[length(y)];
  cpp{{
  numbirch::solve(x.rows(), A.data(), A.rowStride(), x.data(),
      x.rowStride(), y.data(), y.rowStride());
  }}
  return x;
}

/**
 * Solve a system of equations.
 */
function solve(A:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(A) == columns(A);
  assert rows(A) == rows(Y);

  X:Real[rows(Y), columns(Y)];
  cpp{{
  numbirch::solve(X.rows(), X.columns(), A.data(), A.rowStride(), X.data(),
      X.rowStride(), Y.data(), Y.rowStride());
  }}
  return X;
}
