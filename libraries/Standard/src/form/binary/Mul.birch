/**
 * Delayed form for multiplication. This is returned by the operator
 * [*](../../operators/mul_) with one or more form or expression arguments.
 */
struct Mul<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(operator*)
  BIRCH_BINARY_FUNCTION_GRAD(mul_grad)
  BIRCH_FUNCTION_FORM(operator*)
  }}
}

hpp{{
namespace birch {
using numbirch::operator*;
using numbirch::mul_grad1;
using numbirch::mul_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
Mul<Left,Right> operator*(const Left& l, const Right& r) {
  return construct<Mul<Left,Right>>(l, r);
}
}
}}

/**
 * Scalar multiplication.
 */
operator (x:NumberScalarLike*y:NumberLike) -> NumberLike;

/**
 * Scalar multiplication.
 */
operator (x:NumberLike*y:NumberScalarLike) -> NumberLike;

/**
 * Matrix-vector multiplication.
 */
operator (A:RealMatrixLike*x:RealVectorLike) -> RealVectorLike;

/**
 * Matrix-matrix multiplication.
 */
operator (A:RealMatrixLike*B:RealMatrixLike) -> RealMatrixLike;

operator<Arg1,Arg2> (A:DiagonalScalar<Arg1>*B:Arg2) -> {
  ///@todo Check for compatible sizes
  return A.m*B;
}

operator<Arg1,Arg2> (A:Arg1*B:DiagonalScalar<Arg2>) -> {
  ///@todo Check for compatible sizes
  return A*B.m;
}

operator<Arg1,Arg2> (A:DiagonalScalar<Arg1>*B:DiagonalScalar<Arg2>) -> {
  assert A.n == B.n;
  return Diagonal(A.m*B.m, A.n);
}
