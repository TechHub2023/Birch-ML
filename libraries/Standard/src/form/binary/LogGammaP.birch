final class LogGammaPFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return lgamma(l, r);
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    let y <- 0.0;
    for i in 1..r {
      y <- y + digamma(l + 0.5*(1 - i));
    }
    return d*y;
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return 0.0;
  }
}
class LogGammaP<Left,Right> = Binary<LogGammaPFunction,Left,Right>;

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma<Left,Right>(l:Left, r:Right) -> {
  return construct<LogGammaP<Left,Right>>(l, r);
}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma(x:Integer, p:Integer) -> Real {
  return lgamma(scalar<Real>(x), p);
}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma(x:Real, p:Integer) -> Real {
  assert p > 0;
  let y <- 0.25*(p*(p - 1))*log(Ï€);
  for i in 1..p {
    y <- y + lgamma(x + 0.5*(1 - i));
  }
  return y;
}
