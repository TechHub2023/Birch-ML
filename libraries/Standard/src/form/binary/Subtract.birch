struct SubtractFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return l - r;
  }
  
  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (d, -d);
  }
}
struct Subtract<Left,Right> = Binary<SubtractFunction,Left,Right>;

/**
 * Subtraction.
 */
operator<Left,Right> (l:Left - r:Right) -> Subtract<Left,Right> {
  return construct<Subtract<Left,Right>>(l, r);
}

/**
 * Subtraction.
 */
operator (x:Integer - y:Integer) -> Integer;

/**
 * Subtraction.
 */
operator (x:Real - y:Real) -> Real;

/**
 * Subtraction.
 */
operator (x:Integer - y:Real) -> Real;

/**
 * Subtraction.
 */
operator (x:Real - y:Integer) -> Real;

/**
 * Subtraction.
 */
operator (x:Integer[_] - y:Integer[_]) -> Integer[_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen());
  }}
}

/**
 * Subtraction.
 */
operator (x:Integer[_] - y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().cast<Real>().operator-(y.toEigen());
  }}
}

/**
 * Subtraction.
 */
operator (x:Real[_] - y:Integer[_]) -> Real[_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen().cast<Real>());
  }}
}

/**
 * Subtraction.
 */
operator (x:Real[_] - y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen());
  }}
}

/**
 * Subtraction.
 */
operator (x:Integer[_,_] - y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen());
  }}
}

/**
 * Subtraction.
 */
operator (x:Integer[_,_] - y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<Real>().operator-(y.toEigen());
  }}
}

/**
 * Subtraction.
 */
operator (x:Real[_,_] - y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen().cast<Real>());
  }}
}

/**
 * Subtraction.
 */
operator (x:Real[_,_] - y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator-(y.toEigen());
  }}
}
