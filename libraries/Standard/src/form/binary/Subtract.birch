struct Subtract<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Subtract<Left,Right>) -> {
  return value(x.l) - value(x.r);
}

function peek<Left,Right>(x:Subtract<Left,Right>) -> {
  return peek(x.l) - peek(x.r);
}

function eval<Left,Right>(x:Subtract<Left,Right>) -> {
  return eval(x.l) - eval(x.r);
}

function grad<Left,Right,Gradient>(x:Subtract<Left,Right>, d:Gradient) {
  grad(x.l, d);
  grad(x.r, -d);
}

/**
 * Subtraction.
 */
operator<Left,Right> (l:Left - r:Right) -> Subtract<Left,Right> {
  return construct<Subtract<Left,Right>>(l, r);
}

/**
 * Subtraction.
 */
operator (x:Integer - y:Integer) -> Integer;

/**
 * Subtraction.
 */
operator (x:Real - y:Real) -> Real;

/**
 * Subtraction.
 */
operator (x:Integer - y:Real) -> Real;

/**
 * Subtraction.
 */
operator (x:Real - y:Integer) -> Real;

/**
 * Subtraction.
 */
operator (x:Real[_] - y:Real[_]) -> Real[_] {
  assert length(x) == length(y);

  z:Real[length(x)];
  cpp{{
  numbirch::sub(1, x.length(), x.data(), x.stride(), y.data(), y.stride(),
      z.data(), z.stride());
  }}
  return z;
}

/**
 * Subtraction.
 */
operator (X:Real[_,_] - Y:Real[_,_]) -> Real[_,_] {
  assert rows(X) == rows(Y);
  assert columns(Y) == columns(Y);

  Z:Real[rows(X), columns(X)];
  cpp{{
  numbirch::sub(X.rows(), X.columns(), X.data(), X.stride(), Y.data(),
      Y.stride(), Z.data(), Z.stride());
  }}
  return Z;
}
