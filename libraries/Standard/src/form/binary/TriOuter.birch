struct TriOuter<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(triouter)
  BIRCH_BINARY_FUNCTION_GRAD(triouter_grad)
  BIRCH_FUNCTION_FORM(triouter)
  }}
}

hpp{{
namespace birch {
using numbirch::triouter;
using numbirch::triouter_grad1;
using numbirch::triouter_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
TriOuter<Left,Right> triouter(const Left& l, const Right& r) {
  return construct<TriOuter<Left,Right>>(l, r);
}
}
}}

/**
 * Matrix-lower-triangular-matrix outer product.
 * 
 * @param A Matrix $A$.
 * @param L Lower-triangular matrix $L$.
 * 
 * @return Result $C = AL^\top$.
 */
function triouter(A:RealMatrixLike, L:RealMatrixLike) -> RealMatrixLike;

function triouter<Arg1,Arg2>(A:DiagonalScalar<Arg1>, B:Arg2) -> {
  ///@todo Check for compatible sizes
  return A.m*transpose(B);
}

function triouter<Arg1,Arg2>(A:Arg1, B:DiagonalScalar<Arg2>) -> {
  ///@todo Check for compatible sizes
  return A*B.m;
}

function triouter<Arg1,Arg2>(A:DiagonalScalar<Arg1>, B:DiagonalScalar<Arg2>) -> {
  assert A.n == B.n;
  return Diagonal(A.m*B.m, A.n);
}
