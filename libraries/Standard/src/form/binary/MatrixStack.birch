struct MatrixStack<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(stack)
  BIRCH_BINARY_FUNCTION_GRAD(stack_grad)
  BIRCH_FUNCTION_FORM(stack)
  }}
}

hpp{{
namespace birch {
using numbirch::stack;
using numbirch::stack_grad1;
using numbirch::stack_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
MatrixStack<Left,Right> stack(const Left& l, const Right& r) {
  return construct<MatrixStack<Left,Right>>(l, r);
}
}
}}

/**
 * Stack two arrays atop one another, concatenating their columns.
 * 
 * @param x Argument.
 * @param y Argument.
 * 
 * @return Result.
 * 
 * @p x and @p y must have the same number of columns. The result has this
 * number of columns, and a number of rows equal to the number of rows of @p x
 * plus the number of rows of @p y. The result has two dimensions if at least
 * one of the arguments has two dimensions, and one dimension otherwise.
 */
function stack(x:NumberLike, y:NumberLike) -> NumberLike;
