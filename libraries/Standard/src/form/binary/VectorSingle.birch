struct VectorSingle<Left,Right>(x:Left, i:Right, n:Integer) <
    Binary<Left,Right>(x, i) {
  /**
   * Memoized result.
   */
  phantom x;

  /**
   * Length of vector.
   */
  n:Integer <- n;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(single, n)
  BIRCH_BINARY_FUNCTION_GRAD(single_grad, n)
  BIRCH_FUNCTION_FORM(single, n)
  }}
}

hpp{{
namespace birch {
using numbirch::single;
using numbirch::single_grad1;
using numbirch::single_grad2;

template<class Left, class Right, std::enable_if_t<
    is_delay_v<Left,Right>,int> = 0>
VectorSingle<Left,Right> single(const Left& x, const Right& i, const int n) {
  return construct<VectorSingle<Left,Right>>(x, i, n);
}
}
}}

/**
 * Construct single-entry vector. A given element of the vector has a given
 * value, all others are zero.
 * 
 * @param x Value of single entry.
 * @param i Index of single entry.
 * @param n Length of vector.
 * 
 * @return Single-entry vector.
 */
function single(x:NumberScalarLike, i:IntegerScalarLike, n:Integer) ->
    NumberVectorLike;
