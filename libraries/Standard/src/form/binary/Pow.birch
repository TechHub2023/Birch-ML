struct Pow<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(value(x.l), value(x.r));
}

function peek<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(peek(x.l), peek(x.r));
}

function eval<Left,Right>(x:Pow<Left,Right>) -> {
  return pow(eval(x.l), eval(x.r));
}

function grad<Left,Right,Gradient>(x:Pow<Left,Right>, d:Gradient) {
  let l <- peek(x.l);
  let r <- peek(x.r);
  let dl <- d*r*pow(l, r - 1.0);
  let dr <- 0.0;
  if l > 0.0 {
    dr <- d*pow(l, r)*log(l);
  }
  grad(x.l, dl);
  grad(x.r, dr);
}

/**
 * Power.
 */
function pow<Left,Right>(l:Left, r:Right) -> Pow<Left,Right> {
  return construct<Pow<Left,Right>>(l, r);
}

/**
 * Power.
 */
function pow(x:Integer, y:Integer) -> Integer {
  cpp {{
  return std::pow(x, y);
  }}
}

/**
 * Power.
 */
function pow(x:Real, y:Real) -> Real {
  cpp {{
  return std::pow(x, y);
  }}
}

/**
 * Power.
 */
function pow(x:Integer, y:Real) -> Real {
  return pow(scalar<Real>(x), y);
}

/**
 * Power.
 */
function pow(x:Real, y:Integer) -> Real {
  return pow(x, scalar<Real>(y));
}
