struct RectifyFunction {
function compute<Value>(m:Value) -> {
    return rectify(m);
  }

function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return transform(d, m, \(d:Real, m:Real) -> Real {
          return if_then_else(m > 0.0, d, 0.0);
        });
  }
}
struct Rectify<Middle> = Unary<RectifyFunction,Middle>;

/**
 * Rectify.
 */
function rectify<Middle>(m:Middle) -> {
  return construct<Rectify<Middle>>(m);
}

/**
 * Rectify scalar.
 */
function rectify(m:Integer) -> Integer {
  return max(0, m);
}

/**
 * Rectify scalar.
 */
function rectify(m:Real) -> Real {
  return max(0.0, m);
}

/**
 * Rectify vector.
 */
function rectify(m:Integer[_]) -> Integer[_] {
  return transform(m, \(x:Integer) -> Integer { return rectify(x); });
}

/**
 * Rectify vector.
 */
function rectify(m:Real[_]) -> Real[_] {
  return transform(m, \(x:Real) -> Real { return rectify(x); });
}

/**
 * Rectify matrix.
 */
function rectify(m:Integer[_,_]) -> Integer[_,_] {
  return transform(m, \(x:Integer) -> Integer { return rectify(x); });
}

/**
 * Rectify matrix.
 */
function rectify(m:Real[_,_]) -> Real[_,_] {
  return transform(m, \(x:Real) -> Real { return rectify(x); });
}
