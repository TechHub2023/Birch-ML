struct AbsFunction {
function compute<Value>(m:Value) -> {
    return abs(m);
  }

function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return copysign(d, m);
  }
}
struct Abs<Middle> = Unary<AbsFunction,Middle>;

/**
 * Absolute value.
 */
function abs<Middle>(m:Middle) -> {
  return construct<Abs<Middle>>(m);
}

/**
 * Absolute value.
 */
function abs(x:Integer) -> Integer {
  cpp {{
  return std::abs(x);
  }}
}

/**
 * Absolute value.
 */
function abs(x:Real) -> Real {
  cpp {{
  return std::abs(x);
  }}
}
