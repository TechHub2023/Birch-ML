/*
 * Function form with two arguments, where the value of those arguments is not
 * required in the propagation of derivatives.
 */
struct Linear<Function,Left,Right>(l:Left, r:Right) {
  /**
   * Function.
   */
  f:Function;

  /**
   * Left argument.
   */
  l:Left <- l;

  /**
   * Right argument.
   */
  r:Right <- r;

  function value() -> {
    return f.compute(global.value(l), global.value(r));
  }

  function peek() -> {
    return f.compute(global.peek(l), global.peek(r));
  }

  function eval() -> {
    return f.compute(global.eval(l), global.eval(r));
  }

  function reval() -> {
    return f.compute(global.reval(l), global.reval(r));
  }

  function grad<Gradient>(d:Gradient) {
    let (dl, dr) <- f.grad(d);
    global.grad(l, dl);
    global.grad(r, dr);
  }

  function label(gen:Integer) {
    global.label(l, gen);
    global.label(r, gen);
  }

  function constant(gen:Integer) {
    global.constant(l, gen);
    global.constant(r, gen);
  }

  function constant() {
    global.constant(l);
    global.constant(r);
  }
}
