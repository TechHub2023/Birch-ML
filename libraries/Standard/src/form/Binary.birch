/*
 * Function form with two arguments.
 */
final class Binary<Function,Left,Right>(l:Left, r:Right) {
  /**
   * Function.
   */
  f:Function;

  /**
   * Left argument.
   */
  l:Left? <- l;

  /**
   * Right argument.
   */
  r:Right? <- r;

  function value() -> {
    return f.compute(global.value(l!), global.value(r!));
  }

  function peak() -> {
    return f.compute(global.peak(l!), global.peak(r!));
  }

  function eval() -> {
    return f.compute(global.eval(l!), global.eval(r!));
  }

  function reval() -> {
    return f.compute(global.reval(l!), global.reval(r!));
  }

  function grad<Gradient>(d:Gradient) {
    global.grad(l!, f.gradLeft(d, global.peak(l!), global.peak(r!)));
    global.grad(r!, f.gradRight(d, global.peak(l!), global.peak(r!)));
  }

  function label(gen:Integer) {
    global.label(l!, gen);
    global.label(r!, gen);
  }

  function prune(gen:Integer) {
    global.prune(l!, gen);
    global.prune(r!, gen);
  }

  function constant() {
    if l? {
      global.constant(l!);
      l <- nil;
    }
    if r? {
      global.constant(r!);
      r <- nil;
    }
  }
}
