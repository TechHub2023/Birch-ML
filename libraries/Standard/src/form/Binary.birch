/**
 * Delayed form with two arguments.
 */
struct Binary<Left,Right>(l:Left, r:Right) < Form {
  /**
   * Left argument.
   */
  l:Left <- l;

  /**
   * Right argument.
   */
  r:Right <- r;

  hpp{{
  void reset() {
    birch::reset(l);
    birch::reset(r);
  }

  void relink(const RelinkVisitor& visitor) {
    birch::relink(l, visitor);
    birch::relink(r, visitor);
  }

  void constant() {
    birch::constant(l);
    birch::constant(r);
  }

  bool isConstant() const {
    return birch::is_constant(l) && birch::is_constant(r);
  }
  }}
}

hpp{{
#define BIRCH_BINARY_FUNCTION_FORM(f, f_grad, ...) \
  using Value = decltype(f(birch::peek(std::declval<Left>()), \
        birch::peek(std::declval<Right>()), ##__VA_ARGS__)); \
  std::optional<Value> x; \
  \
  int rows() const { \
    return birch::rows(peek()); \
  } \
  \
  int columns() const { \
    return birch::columns(peek()); \
  } \
  \
  int length() const { \
    return birch::length(peek()); \
  } \
  \
  int size() const { \
    return birch::size(peek()); \
  } \
  \
  void clear() const { \
    const_cast<std::optional<Value>&>(x).reset(); \
  } \
  \
  auto value() const { \
    auto x = this->eval(); \
    this->constant(); \
    return x; \
  } \
  \
  auto eval() const { \
    auto l = birch::eval(this->l); \
    auto r = birch::eval(this->r); \
    return f(l, r, ##__VA_ARGS__); \
  } \
  \
  auto peek() const { \
    if (!x) { \
      auto l = birch::peek(this->l); \
      auto r = birch::peek(this->r); \
      const_cast<std::optional<Value>&>(x) = f(l, r, ##__VA_ARGS__); \
    } \
    return *x; \
  } \
  \
  auto move(const MoveVisitor& visitor) { \
    auto l = birch::move(this->l, visitor); \
    auto r = birch::move(this->r, visitor); \
    return f(l, r, ##__VA_ARGS__); \
  } \
  \
  void args(const ArgsVisitor& visitor) { \
    birch::args(this->l, visitor); \
    birch::args(this->r, visitor); \
  } \
  \
  template<class G> \
  void shallowGrad(const G& g, const GradVisitor& visitor) { \
    auto x = birch::peek(*this); \
    auto l = birch::peek(this->l); \
    auto r = birch::peek(this->r); \
    birch::shallow_grad(this->l, f_grad ## 1(g, x, l, r, ##__VA_ARGS__), visitor); \
    birch::shallow_grad(this->r, f_grad ## 2(g, x, l, r, ##__VA_ARGS__), visitor); \
    clear(); \
  } \
  \
  void deepGrad(const GradVisitor& visitor) { \
    birch::deep_grad(this->l, visitor); \
    birch::deep_grad(this->r, visitor); \
  }
}}
