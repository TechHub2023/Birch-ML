/*
 * Function form with one argument.
 */
struct Unary<Middle>(m:Middle) < Form {
  /**
   * Argument.
   */
  m:Middle <- m;

  hpp{{
  void link() {
    birch::link(m);
  }

  void label(const Integer gen) {
    birch::label(m, gen);
  }

  void constant(const Integer gen) {
    birch::constant(m, gen);
  }

  void constant() {
    birch::constant(m);
  }
  }}
}

hpp{{
#define BIRCH_UNARY_FUNCTION_FORM(f, f_grad, args...) \
  using Value = decltype(f(birch::peek(std::declval<Middle>()), ##args)); \
  std::optional<Value> x; \
  \
  auto value() const { \
    if (!x) { \
      const_cast<std::optional<Value>&>(x) = f(birch::value(this->m), \
          ##args); \
    } \
    return *x; \
  } \
  \
  auto peek() const { \
    if (!x) { \
      const_cast<std::optional<Value>&>(x) = f(birch::peek(this->m), \
          ##args); \
    } \
    return *x; \
  } \
  \
  auto eval() const { \
    return f(birch::eval(this->m), ##args); \
  } \
  \
  template<class G> \
  void grad(const G& g) const { \
    auto gm = f_grad(g, birch::peek(this->m), ##args); \
    birch::grad(this->m, gm); \
  }
}}
