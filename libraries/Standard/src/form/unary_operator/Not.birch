struct Not<Middle>(m:Middle) < Unary<Middle>(m) {
  hpp{{
  BIRCH_UNARY_OPERATOR_FORM(!)
  }}
}

function grad<Middle,Gradient>(x:Not<Middle>, d:Gradient) {
  grad(x.m, 0.0);
}

hpp{{
namespace birch {
/**
 * Logical `not`.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Not<Middle> operator!(const Middle& m) {
  return construct<Not<Middle>>(m);
}
}
}}
