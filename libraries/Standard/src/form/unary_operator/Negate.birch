struct Negate<Middle>(m:Middle) < Unary<Middle>(m) {
  //
}

function value<Middle>(x:Negate<Middle>) -> {
  return -value(x.m);
}

function peek<Middle>(x:Negate<Middle>) -> {
  return -peek(x.m);
}

function eval<Middle>(x:Negate<Middle>) -> {
  return -eval(x.m);
}

function grad<Middle,Gradient>(x:Negate<Middle>, d:Gradient) {
  grad(x.m, -d);
}

hpp{{
namespace birch {
/**
 * Negation.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Negate<Middle> operator-(Middle&& m) {
  return construct<Negate<Middle>>(std::forward<Middle>(m));
}
}
}}
