struct Negate<Middle>(m:Middle) < Unary<Middle>(m) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_UNARY_OPERATOR_FORM(-)
  }}
}

function grad<Middle,Gradient>(x:Negate<Middle>, d:Gradient) {
  grad(x.m, -d);
}

hpp{{
namespace birch {
using numbirch::operator-;

/**
 * Negation.
 */
template<class Middle, std::enable_if_t<is_delay<Middle>::value,int> = 0>
Negate<Middle> operator-(const Middle& m) {
  return construct<Negate<Middle>>(m);
}
}
}}
