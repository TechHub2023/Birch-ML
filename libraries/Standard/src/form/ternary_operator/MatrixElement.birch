/*
 * Element of a matrix.
 */
struct MatrixElement<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  //
}

function value<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return value(x.l)[value(x.m), value(x.r)];
}

function peek<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return peek(x.l)[peek(x.m), peek(x.r)];
}

function eval<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return eval(x.l)[eval(x.m), eval(x.r)];
}

function grad<Left,Middle,Right,Gradient>(x:MatrixElement<Left,Middle,Right>,
    d:Gradient) {
  grad(x.l, d, peek(x.m), peek(x.r));
  grad(x.m, 0.0);
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Element of a matrix.
 */
template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay<Left>::value || is_delay<Middle>::value || is_delay<Right>::value,
    int> = 0>
auto element(Left&& x, Middle&& i, Right&& j) {
  return element(matrix_split(std::forward<Left>(x)), std::forward<Middle>(i),
      std::forward<Right>(j));
}

/**
 * Element of a matrix.
 */
template<class Value, class Form, class Middle, class Right, std::enable_if_t<
    is_delay<Form>::value || is_delay<Middle>::value || is_delay<Right>::value,
    int> = 0>
auto element(MatrixSplitExpression<Value,Form>&& x, Middle&& i, Right&& j) {
  return construct<MatrixElement<MatrixSplitExpression<Value,Form>,Middle,
      Right>>(std::forward<MatrixSplitExpression<Value,Form>>(x),
      std::forward<Middle>(i), std::forward<Right>(j));
}
}
}}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer, j:Integer) -> Type {
  return x[i,j];
}
