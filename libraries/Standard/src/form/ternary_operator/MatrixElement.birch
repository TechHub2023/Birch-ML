/*
 * Element of a matrix.
 */
struct MatrixElement<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  //
}

function value<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return value(x.l)[wait(value(x.m)), wait(value(x.r))];
}

function peek<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return peek(x.l)[wait(peek(x.m)), wait(peek(x.r))];
}

function eval<Left,Middle,Right>(x:MatrixElement<Left,Middle,Right>) -> {
  return eval(x.l)[wait(eval(x.m)), wait(eval(x.r))];
}

function grad<Left,Middle,Right,Gradient>(x:MatrixElement<Left,Middle,Right>,
    d:Gradient) {
  grad(x.l, d, wait(peek(x.m)), wait(peek(x.r)));
  grad(x.m, 0.0);
  grad(x.r, 0.0);
}

/**
 * Element of a matrix.
 */
function element<Left,Middle,Right>(x:Left, i:Middle, j:Right) -> {
  return element(matrix_split(x), i, j);
}

/**
 * Element of a matrix.
 */
function element<Value,Form,Middle,Right>(x:MatrixSplitExpression<Value,Form>,
    i:Middle, j:Right) -> {
  return construct<MatrixElement<MatrixSplitExpression<Value,Form>,Middle,
      Right>>(x, i, j);
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer, j:Integer) -> Type {
  return x[i,j];
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer!, j:Integer) -> Type {
  return x[i!,j];
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer, j:Integer!) -> Type {
  return x[i,j!];
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer!, j:Integer!) -> Type {
  return x[i!,j!];
}
