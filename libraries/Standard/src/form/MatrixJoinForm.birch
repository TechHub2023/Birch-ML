/**
 * Boxed and joined matrix of expressions.
 *
 * - Value: Element type.
 */
struct MatrixJoinForm<Value>(x:Expression<Value>[_,_]) {
  /**
   * Arguments.
   */
  x:Expression<Value>[_,_]? <- x;

  function value() -> Value[_,_] {
    return transform(x, \(x':Expression<Value>) -> {
          return global.value(x');
        });
  }

  function peek() -> Value[_,_] {
    return transform(x, \(x':Expression<Value>) -> {
          return global.peek(x');
        });
  }

  function eval() -> Value[_,_] {
    return transform(x, \(x':Expression<Value>) -> {
          return global.eval(x');
        });
  }

  function reval() -> Value[_,_] {
    return transform(x, \(x':Expression<Value>) -> {
          return global.reval(x');
        });
  }
  
  function grad(d:Value[_,_]) {
    for_each(x, d, \(x':Expression<Value>, d':Value) {
          global.grad(x', d');
        });
  }

  function label(gen:Integer) {
    for_each(x, \(x':Expression<Value>) { global.label(x', gen); });
  }

  function constant(gen:Integer) {
    for_each(x, \(x':Expression<Value>) { global.constant(x', gen); });
  }

  function constant() {
    for_each(x, \(x':Expression<Value>) { global.constant(x'); });
  }
}

/**
 * Convert a matrix of expressions into a matrix expression.
 */
function join<Value>(x:Expression<Value>[_,_]) -> Expression<Value[_,_]> {
  return box(construct<MatrixJoinForm<Value>>(x));
}
