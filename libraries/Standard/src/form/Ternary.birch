/*
 * Function form with three arguments.
 */
struct Ternary<Left,Middle,Right>(l:Left, m:Middle, r:Right) < Form {
  /**
   * Left argument.
   */
  l:Left <- l;

  /**
   * Middle argument.
   */
  m:Middle <- m;
  
  /**
   * Right argument.
   */
  r:Right <- r;

  hpp{{
  void link() const {
    birch::link(l);
    birch::link(m);
    birch::link(r);
  }

  void label(const Integer gen) const {
    birch::label(l, gen);
    birch::label(m, gen);
    birch::label(r, gen);
  }

  void constant(const Integer gen) const {
    birch::constant(l, gen);
    birch::constant(m, gen);
    birch::constant(r, gen);
  }

  void constant() const {
    birch::constant(l);
    birch::constant(m);
    birch::constant(r);
  }
  }}
}

hpp{{
#define BIRCH_TERNARY_FUNCTION_FORM(f, f_grad, ...) \
  using Value = decltype(f(birch::peek(std::declval<Left>()), \
      birch::peek(std::declval<Middle>()), \
      birch::peek(std::declval<Right>()), ##__VA_ARGS__)); \
  std::optional<Value> x; \
  \
  auto eval() const { \
    auto l = birch::eval(this->l); \
    auto m = birch::eval(this->m); \
    auto r = birch::eval(this->r); \
    return f(l, m, r, ##__VA_ARGS__); \
  } \
  \
  auto move(const MoveVisitor& visitor) const { \
    auto l = birch::move(this->l, visitor); \
    auto m = birch::move(this->m, visitor); \
    auto r = birch::move(this->r, visitor); \
    return f(l, m, r, ##__VA_ARGS__); \
  } \
  \
  void args(const ArgsVisitor& visitor) const { \
    birch::args(this->l, visitor); \
    birch::args(this->m, visitor); \
    birch::args(this->r, visitor); \
  } \
  \
  auto value() const { \
    auto x = this->eval(); \
    this->constant(); \
    return x; \
  } \
  \
  auto peek() const { \
    if (!x) { \
      auto l = birch::peek(this->l); \
      auto m = birch::peek(this->m); \
      auto r = birch::peek(this->r); \
      const_cast<std::optional<Value>&>(x) = f(l, m, r, ##__VA_ARGS__); \
    } \
    return *x; \
  } \
  \
  template<class G> \
  void shallowGrad(const G& g) const { \
    auto l = birch::peek(this->l); \
    auto m = birch::peek(this->m); \
    auto r = birch::peek(this->r); \
    auto [gl, gm, gr] = f_grad(g, *this->x, l, m, r, ##__VA_ARGS__); \
    const_cast<std::optional<Value>&>(x).reset(); \
    birch::shallow_grad(this->l, gl); \
    birch::shallow_grad(this->m, gm); \
    birch::shallow_grad(this->r, gr); \
  } \
  \
  void deepGrad() const { \
    birch::deep_grad(this->l); \
    birch::deep_grad(this->m); \
    birch::deep_grad(this->r); \
  }
}}
