/*
 * Function form with three arguments.
 */
struct Ternary<Left,Middle,Right>(l:Left, m:Middle, r:Right) < Form {
  /**
   * Left argument.
   */
  l:Left <- l;

  /**
   * Middle argument.
   */
  m:Middle <- m;
  
  /**
   * Right argument.
   */
  r:Right <- r;

  hpp{{
  void link() {
    birch::link(l);
    birch::link(m);
    birch::link(r);
  }

  void label(const Integer gen) {
    birch::label(l, gen);
    birch::label(m, gen);
    birch::label(r, gen);
  }

  void constant(const Integer gen) {
    birch::constant(l, gen);
    birch::constant(m, gen);
    birch::constant(r, gen);
  }

  void constant() {
    birch::constant(l);
    birch::constant(m);
    birch::constant(r);
  }
  }}
}

hpp{{
#define BIRCH_TERNARY_FUNCTION_FORM(f, f_grad, args...) \
  using Value = decltype(f(birch::peek(std::declval<Left>()), \
      birch::peek(std::declval<Middle>()), \
      birch::peek(std::declval<Right>()), ##args)); \
  std::optional<Value> x; \
  \
  auto value() const { \
    if (!x) { \
      const_cast<std::optional<Value>&>(x) = f(birch::value(this->l), \
          birch::value(this->m), birch::value(this->r), ##args); \
    } \
    return *x; \
  } \
  \
  auto peek() const { \
    if (!x) { \
      const_cast<std::optional<Value>&>(x) = f(birch::peek(this->l), \
          birch::peek(this->m), birch::peek(this->r), ##args); \
    } \
    return *x; \
  } \
  \
  auto eval() const { \
    return f(birch::eval(this->l), birch::eval(this->m), \
        birch::eval(this->r), ##args); \
  } \
  \
  template<class G> \
  void grad(const G& g) const { \
    auto [gl, gm, gr] = f_grad(g, birch::peek(this->l), \
        birch::peek(this->m), birch::peek(this->r), ##args); \
    birch::grad(this->l, gl); \
    birch::grad(this->m, gm); \
    birch::grad(this->r, gr); \
  }
}}
