struct VectorFunction<Value> {
function compute<MiddleValue>(m:MiddleValue) -> {
    return vector<Value>(m);
  }

function grad<Gradient,MiddleValue>(d:Gradient, m:MiddleValue) -> {
    return grad_vector(d, m);
  }
}
struct Vector<Value,Middle> = Unary<VectorFunction<Value>,Middle>;

/**
 * Convert to vector.
 */
function vector<Value,Middle>(m:Middle) -> {
  return construct<Vector<Value,Middle>>(m);
}

/**
 * Convert to vector.
 */
function vector<Value,Type>(m:Type[_]) -> Value[_] {
  return transform(m, \(x:Type) -> Value { return scalar<Value>(x); });
}

/**
 * Convert to vector.
 */
function vector<Value,Type>(m:Type[_,_]) -> Value[_] {
  assert columns(m) == 1;
  return vector<Value>(m[1..rows(m),1]);
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Boolean) -> Value[_] {
  return [scalar<Value>(m)];
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Integer) -> Value[_] {
  return [scalar<Value>(m)];
}

/**
 * Convert to vector.
 */
function vector<Value>(m:Real) -> Value[_] {
  return [scalar<Value>(m)];
}

/**
 * Gradient of `vector()`.
 */
function grad_vector<Gradient,Value>(d:Gradient[_], m:Value) -> {
  return scalar<Value>(d);
}

/**
 * Gradient of `vector()`.
 */
function grad_vector<Gradient,Value>(d:Gradient[_], m:Value[_]) -> {
  return vector<Value>(d);
}

/**
 * Gradient of `vector()`.
 */
function grad_vector<Gradient,Value>(d:Gradient[_], m:Value[_,_]) -> {
  return matrix<Value>(d);
}
