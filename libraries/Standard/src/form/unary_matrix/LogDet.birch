struct LogDetFunction {
function compute<Value>(m:Value) -> {
    return ldet(m);
  }

function grad<Gradient,Value>(d:Gradient, m:Value) -> {
    return d*matrix<Real>(inv(transpose(m)));
  }
}
struct LogDet<Middle> = Unary<LogDetFunction,Middle>;

/**
 * Log-determinant of a matrix.
 */
function ldet<Middle>(m:Middle) -> {
  return construct<LogDet<Middle>>(m);
}

/**
 * Log-determinant of a matrix.
 */
function ldet(X:Integer[_,_]) -> Real {
  cpp{{
  return X.toEigen().cast<birch::type::Real>().householderQr().logAbsDeterminant();
  }}
}

/**
 * Log-determinant of a matrix.
 */
function ldet(X:Real[_,_]) -> Real {
  cpp{{
  return X.toEigen().householderQr().logAbsDeterminant();
  }}
}

/**
 * Log-determinant of a symmetric positive-definite matrix.
 */
// function ldet(S:LLT<Real[_,_]>) -> Real {
//   cpp{{
//   return 2.0*S->f->llt.matrixL().nestedExpression().diagonal().array().log().sum();
//   }}
// }
