struct Divide<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Divide<Left,Right>) -> {
  return value(x.l)/value(x.r);
}

function peek<Left,Right>(x:Divide<Left,Right>) -> {
  return peek(x.l)/peek(x.r);
}

function eval<Left,Right>(x:Divide<Left,Right>) -> {
  return eval(x.l)/eval(x.r);
}

function grad<Left,Right,Gradient>(x:Divide<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_divide(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

hpp{{
namespace birch {
/**
 * Division.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
Divide<Left,Right> operator/(const Left& l, const Right& r) {
  return construct<Divide<Left,Right>>(l, r);
}
}
}}

function grad_divide<Gradient,Left,Right>(d:Gradient, l:Left, r:Right) -> {
  return (d/r, d*l/-pow(r, 2.0));
}

function grad_divide<Gradient,Left,Right>(d:Gradient, l:Left[_], r:Right) -> {
  return (d/r, dot(d, l)/-pow(r, 2.0));
}

function grad_divide<Gradient,Left,Right>(d:Gradient, l:Left[_,_],
    r:Right) -> {
  return (d/r, frobenius(d, l)/-pow(r, 2.0));
}
