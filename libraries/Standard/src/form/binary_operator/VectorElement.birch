/*
 * Element of a vector.
 */
struct VectorElement<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:VectorElement<Left,Right>) -> {
  return value(x.l)[wait(value(x.r))];
}

function peek<Left,Right>(x:VectorElement<Left,Right>) -> {
  return peek(x.l)[wait(peek(x.r))];
}

function eval<Left,Right>(x:VectorElement<Left,Right>) -> {
  return eval(x.l)[wait(eval(x.r))];
}

function grad<Left,Right,Gradient>(x:VectorElement<Left,Right>, d:Gradient) {
  grad(x.l, d, wait(peek(x.r)));
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Element of a vector.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
auto element(const Left& x, const Right& i) {
  return element(vector_split(x), i);
}

/**
 * Element of a vector.
 */
template<class Value, class Form, class Right, std::enable_if_t<
    is_delay<Form,Right>::value,int> = 0>
auto element(const VectorSplitExpression<Value,Form>& x, const Right& i) {
  return construct<VectorElement<VectorSplitExpression<Value,Form>,Right>>(x,
      i);
}
}
}}

/**
 * Element of a vector.
 */
function element<Type>(x:Type[_], i:Integer) -> Type {
  return x[i];
}

/**
 * Element of a vector.
 */
function element<Type>(x:Type[_], i:Integer!) -> Type {
  return x[i!];
}
