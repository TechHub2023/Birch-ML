struct And<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  /**
   * Memoized result.
   */
  phantom x;

  hpp{{
  BIRCH_BINARY_FUNCTION_FORM(operator&&, and_grad)
  }}
}

hpp{{
namespace birch {
using numbirch::operator&&;
using numbirch::and_grad;

/**
 * Logical `and`.
 */
template<class Left, class Right, std::enable_if_t<
    is_delay<Left,Right>::value,int> = 0>
And<Left,Right> operator&&(const Left& l, const Right& r) {
  return construct<And<Left,Right>>(l, r);
}
}
}}
