struct Multiply<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Multiply<Left,Right>) -> {
  return value(x.l)*value(x.r);
}

function peek<Left,Right>(x:Multiply<Left,Right>) -> {
  return peek(x.l)*peek(x.r);
}

function eval<Left,Right>(x:Multiply<Left,Right>) -> {
  return eval(x.l)*eval(x.r);
}

function grad<Left,Right,Gradient>(x:Multiply<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_multiply(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

hpp{{
namespace birch {
/**
 * Multiplication.
 */
template<class Left, class Right, std::enable_if_t<is_delay<Left>::value ||
    is_delay<Right>::value,int> = 0>
Multiply<Left,Right> operator*(Left&& l, Right&& r) {
  return construct<Multiply<Left,Right>>(std::forward<Left>(l),
      std::forward<Right>(r));
}
}
}}

function grad_multiply<Gradient,Left,Right>(d:Gradient, l:Left, r:Right) -> {
  return (d*r, l*d);
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_], l:Left,
    r:Right[_]) -> {
  return (dot(d, r), l*d);
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_], l:Left[_],
    r:Right) -> {
  return (d*r, dot(l, d));
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_,_], l:Left,
    r:Right[_,_]) -> {
  return (frobenius(d, r), l*d);
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_,_], l:Left[_,_],
    r:Right) -> {
  return (d*r, frobenius(l, d));
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_], l:Left[_,_],
    r:Right[_]) -> {
  return (outer(d, r), inner(l, d));
}

function grad_multiply<Gradient,Left,Right>(d:Gradient[_,_], l:Left[_,_],
    r:Right[_,_]) -> {
  return (outer(d, r), inner(l, d));
}
