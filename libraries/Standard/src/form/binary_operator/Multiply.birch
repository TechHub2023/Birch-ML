struct Multiply<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Multiply<Left,Right>) -> {
  return value(x.l)*value(x.r);
}

function peek<Left,Right>(x:Multiply<Left,Right>) -> {
  return peek(x.l)*peek(x.r);
}

function eval<Left,Right>(x:Multiply<Left,Right>) -> {
  return eval(x.l)*eval(x.r);
}

function grad<Left,Right,Gradient>(x:Multiply<Left,Right>, d:Gradient) {
  let (dl, dr) <- grad_multiply(d, peek(x.l), peek(x.r));
  grad(x.l, dl);
  grad(x.r, dr);
}

/**
 * Multiplication.
 */
operator<Left,Right> (l:Left*r:Right) -> Multiply<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Multiply<Left,Right>>(l, r);
}

function grad_multiply(d:Real, l:Real, r:Real) -> (Real, Real) {
  return (d*r, l*d);
}

function grad_multiply(d:Real[_], l:Real, r:Real[_]) -> (Real, Real[_]) {
  return (dot(d, r), l*d);
}

function grad_multiply(d:Real[_], l:Real[_], r:Real) -> (Real[_], Real) {
  return (d*r, dot(l, d));
}

function grad_multiply(d:Real[_,_], l:Real, r:Real[_,_]) ->
    (Real, Real[_,_]) {
  return (frobenius(d, r), l*d);
}

function grad_multiply(d:Real[_,_], l:Real[_,_], r:Real) -> 
    (Real[_,_], Real) {
  return (d*r, frobenius(l, d));
}

function grad_multiply(d:Real[_], l:Real[_,_], r:Real[_]) ->
    (Real[_,_], Real[_]) {
  return (outer(d, r), inner(l, d));
}

function grad_multiply(d:Real[_,_], l:Real[_,_], r:Real[_,_]) ->
    (Real[_,_], Real[_,_]) {
  return (outer(d, r), inner(l, d));
}
