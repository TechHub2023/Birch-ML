struct Add<Left,Right>(l:Left, r:Right) < Binary<Left,Right>(l, r) {
  //
}

function value<Left,Right>(x:Add<Left,Right>) -> {
  return value(x.l) + value(x.r);
}

function peek<Left,Right>(x:Add<Left,Right>) -> {
  return peek(x.l) + peek(x.r);
}

function eval<Left,Right>(x:Add<Left,Right>) -> {
  return eval(x.l) + eval(x.r);
}

function grad<Left,Right,Gradient>(x:Add<Left,Right>, d:Gradient) {
  grad(x.l, d);
  grad(x.r, d);
}

/**
 * Addition.
 */
operator<Left,Right> (l:Left + r:Right) -> Add<Left,Right> {
  cpp{{
  static_assert(is_form<Left,Right>::value, "argument types not supported");
  }}
  return construct<Add<Left,Right>>(l, r);
}
