/*
 * Element of a matrix.
 */
struct MatrixElement<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  hpp{{
  BIRCH_TERNARY_FUNCTION_FORM(element)
  }}
}

function grad<Left,Middle,Right,Gradient>(x:MatrixElement<Left,Middle,Right>,
    d:Gradient) {
  let l <- peek(x.l);
  grad(x.l, d*single<Real>(peek(x.m), peek(x.r), rows(l), columns(l)));
  grad(x.m, 0.0);
  grad(x.r, 0.0);
}

hpp{{
namespace birch {
/**
 * Element of a matrix.
 */
template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay<Left,Middle,Right>::value,int> = 0>
MatrixElement<Left,Middle,Right> element(const Left& l, const Middle& m,
    const Right& r) {
  return construct<MatrixElement<Left,Middle,Right>>(l, m, r);
}
}
}}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer, j:Integer) -> Type {
  cpp{{
  x.slice(i, j);
  }}
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer!, j:Integer) -> Type {
  return element(x, i!, j);
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer, j:Integer!) -> Type {
  return element(x, i, j!);
}

/**
 * Element of a matrix.
 */
function element<Type>(x:Type[_,_], i:Integer!, j:Integer!) -> Type {
  return element(x, i!, j!);
}
