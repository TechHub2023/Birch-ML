struct IfThenElse<Left,Middle,Right>(l:Left, m:Middle, r:Right) <
    Ternary<Left,Middle,Right>(l, m, r) {
  //
}

function value<Left,Middle,Right>(x:IfThenElse<Left,Middle,Right>) -> {
  return if_then_else(value(x.l), value(x.m), value(x.r));
}

function peek<Left,Middle,Right>(x:IfThenElse<Left,Middle,Right>) -> {
  return if_then_else(peek(x.l), peek(x.m), peek(x.r));
}

function eval<Left,Middle,Right>(x:IfThenElse<Left,Middle,Right>) -> {
  return if_then_else(eval(x.l), eval(x.m), eval(x.r));
}

function grad<Left,Middle,Right,Gradient>(x:IfThenElse<Left,Middle,Right>,
    d:Gradient) {
  let l <- peek(x.l);
  grad(x.l, 0.0);
  grad(x.m, if_then_else(l, d, 0.0));
  grad(x.r, if_then_else(l, 0.0, d));
}

hpp{{
namespace birch {
/**
 * If `l` is true then return `m`, else return `r`.
 */
template<class Left, class Middle, class Right, std::enable_if_t<
    is_delay<Left,Middle,Right>::value,int> = 0>
IfThenElse<Left,Middle,Right> if_then_else(const Left& l, const Middle& m,
    const Right& r) {
  return construct<IfThenElse<Left,Middle,Right>>(l, m, r);
}
}
}}

/**
 * If `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type, y:Type) -> Type {
  if cond {
    return x;
  } else {
    return y;
  }
}

function if_then_else<Type>(cond:Boolean, x:Type!, y:Type) -> Type! {
  if cond {
    return x;
  } else {
    return y;
  }
}

function if_then_else<Type>(cond:Boolean, x:Type, y:Type!) -> Type! {
  if cond {
    return x;
  } else {
    return y;
  }
}
