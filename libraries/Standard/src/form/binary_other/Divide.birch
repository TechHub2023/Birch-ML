final class DivideFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return l/r;
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return d/r;
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return sum(-d*l/pow(r, 2.0));
  }
}
class Divide<Left,Right> = Binary<DivideFunction,Left,Right>;

/**
 * Division.
 */
operator<Left,Right> (l:Left/r:Right) -> {
  return construct<Divide<Left,Right>>(l, r);
}

/**
 * Division.
 */
operator (x:Integer/y:Integer) -> Integer;

/**
 * Division.
 */
operator (x:Integer/y:Real) -> Real;

/**
 * Division.
 */
operator (x:Real/y:Integer) -> Real;

/**
 * Division.
 */
operator (x:Real/y:Real) -> Real;

/**
 * Division.
 */
operator (x:Integer[_]/y:Integer) -> Integer[_] {
  cpp{{
  return x.toEigen().operator/(y);
  }}
}

/**
 * Division.
 */
operator (x:Integer[_]/y:Real) -> Real[_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator/(y);
  }}
}

/**
 * Division.
 */
operator (x:Real[_]/y:Integer) -> Real[_] {
  return x/scalar<Real>(y);
}

/**
 * Division.
 */
operator (x:Real[_]/y:Real) -> Real[_] {
  cpp{{
  return x.toEigen().operator/(y);
  }}
}

/**
 * Division.
 */
operator (x:Integer[_,_]/y:Integer) -> Integer[_,_] {
  cpp{{
  return x.toEigen().operator/(y);
  }}
}

/**
 * Division.
 */
operator (x:Integer[_,_]/y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::type::Real>().operator/(y);
  }}
}

/**
 * Division.
 */
operator (x:Real[_,_]/y:Integer) -> Real[_,_] {
  return x/scalar<Real>(y);
}

/**
 * Division.
 */
operator (x:Real[_,_]/y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().operator/(y);
  }}
}
