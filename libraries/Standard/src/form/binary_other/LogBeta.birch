final class LogBetaFunction {  
function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return lbeta(l, r);
  }
  
function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return d*(digamma(l) + digamma(l + r));
  }

function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return d*(digamma(r) + digamma(l + r));
  }
}
class LogBeta<Left,Right> = Binary<LogBetaFunction,Left,Right>;

/**
 * Logarithm of the beta function.
 */
function lbeta<Left,Right>(l:Left, r:Right) -> {
  return construct<LogBeta<Left,Right>>(l, r);
}

/**
 * Logarithm of the beta function.
 */
function lbeta(l:Integer, r:Integer) -> Real {
  return lbeta(scalar<Real>(l), scalar<Real>(r));
}

/**
 * Logarithm of the beta function.
 */
function lbeta(l:Real, r:Real) -> Real {
  return lgamma(l) + lgamma(r) - lgamma(l + r);
}

/**
 * Logarithm of the beta function.
 */
function lbeta(l:Integer, r:Real) -> Real {
  return lbeta(scalar<Real>(l), r);
}

/**
 * Logarithm of the beta function.
 */
function lbeta(l:Real, r:Integer) -> Real {
  return lbeta(l, scalar<Real>(r));
}
