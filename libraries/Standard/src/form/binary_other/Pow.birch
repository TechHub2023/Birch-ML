struct PowFunction {  
function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return pow(l, r);
  }

function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return d*r*pow(l, r - 1.0);
  }

function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    if l > 0.0 {
      return d*pow(l, r)*log(l);
    } else {
      return 0.0;
    }
  }
}
struct Pow<Left,Right> = Binary<PowFunction,Left,Right>;

/**
 * Power.
 */
function pow<Left,Right>(l:Left, r:Right) -> {
  return construct<Pow<Left,Right>>(l, r);
}

/**
 * Power.
 */
function pow(x:Integer, y:Integer) -> Integer {
  cpp {{
  return std::pow(x, y);
  }}
}

/**
 * Power.
 */
function pow(x:Real, y:Real) -> Real {
  cpp {{
  return std::pow(x, y);
  }}
}

/**
 * Power.
 */
function pow(x:Integer, y:Real) -> Real {
  return pow(scalar<Real>(x), y);
}

/**
 * Power.
 */
function pow(x:Real, y:Integer) -> Real {
  return pow(x, scalar<Real>(y));
}
