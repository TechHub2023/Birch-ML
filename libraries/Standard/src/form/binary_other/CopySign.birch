struct CopySignFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return copysign(l, r);
  }
  
  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (if_then_else(copysign(l, r) == l, d, -d), 0.0);
  }
}
struct CopySign<Left,Right> = Binary<CopySignFunction,Left,Right>;

/**
 * Copy sign of a number.
 */
function copysign<Left,Right>(l:Left, r:Right) -> {
  return construct<CopySign<Left,Right>>(l, r);
}

/**
 * Copy sign of a number.
 */
function copysign(l:Integer, r:Integer) -> Integer {
  return if_then_else(r >= 0, abs(l), -abs(l));
}

/**
 * Copy sign of a number.
 */
function copysign(l:Real, r:Real) -> Real {
  cpp {{
  return std::copysign(l, r);
  }}
}

/**
 * Copy sign of a number.
 */
function copysign(l:Integer, r:Real) -> Real {
  return copysign(scalar<Real>(l), r);
}

/**
 * Copy sign of a number.
 */
function copysign(l:Real, r:Integer) -> Real {
  return copysign(l, scalar<Real>(r));
}
