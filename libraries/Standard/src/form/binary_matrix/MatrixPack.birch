struct MatrixPackFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return pack(l, r);
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return (d[1,1], d[1,2]);
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue[_],
      r:RightValue[_]) -> {
    return (column(d, 1), column(d, 2));
  }

  function grad<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue[_,_],
      r:RightValue[_,_]) -> {
    let r1 <- rows(l);
    let c1 <- columns(l);
    let c2 <- columns(r);
    return (d[1..r1, 1..c1], d[1..r1, (c1 + 1)..(c1 + c2)]);
  }
}
struct MatrixPack<Left,Right> = BinaryMemoized<MatrixPackFunction,Left,Right>;

/**
 * Pack two matrices next to one another (i.e. append rows) to create a
 * new matrix.
 */
function pack<Left,Right>(l:Left, r:Right) -> {
  return construct<MatrixPack<Left,Right>>(l, r);
}

/**
 * Pack two scalars next to one another as a row to create a new matrix.
 */
function pack(x:Real, y:Real) -> Real[_,_] {
  return [[x, y]];
}

/**
 * Pack two scalars next to one another as a row to create a new matrix.
 */
function pack(x:Integer, y:Integer) -> Integer[_,_] {
  return [[x, y]];
}

/**
 * Pack two scalars next to one another as a row to create a new matrix.
 */
function pack(x:Boolean, y:Boolean) -> Boolean[_,_] {
  return [[x, y]];
}

/**
 * Pack two vectors next to one another as columns of a new matrix.
 */
function pack<Type>(x:Type[_], y:Type[_]) -> Type[_,_] {
  assert length(x) == length(y);
  return matrix_lambda(\(i:Integer, j:Integer) -> Type {
        if j == 1 {
          return x[i];
        } else {
          return y[i];
        }
      }, length(x), 2);
}

/**
 * Pack two matrices next to one another (i.e. append rows) to create a
 * new matrix.
 */
function pack<Type>(l:Type[_,_], r:Type[_,_]) -> Type[_,_] {
  assert rows(l) == rows(r);
  let R <- rows(l);
  let C1 <- columns(l);
  let C2 <- columns(r);
  return matrix_lambda(\(i:Integer, j:Integer) -> Type {
        if j <= C1 {
          return l[i,j];
        } else {
          return r[i,j - C1];
        }
      }, R, C1 + C2);
}
