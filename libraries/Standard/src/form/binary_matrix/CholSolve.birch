struct CholSolveFunction {  
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return cholsolve(l, r);
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return fldl(outer(cholsolve(l, -d), cholsolve(l, r)));
    // ^ only lower triangle of l used
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue,
      r:RightValue) -> {
    return cholsolve(l, d);
  }
}
struct CholSolve<Left,Right> = Binary<CholSolveFunction,Left,Right>;

/**
 * Solve a system of equations where the left argument is a symmetric
 * positive-definite matrix. The solution is via the Cholesky factorization.
 */
function cholsolve<Left,Right>(l:Left, r:Right) -> {
  return construct<CholSolve<Left,Right>>(l, r);
}

/**
 * Solve a system of equations where the left argument is a symmetric
 * positive-definite matrix. The solution is via the Cholesky factorization.
 */
function cholsolve(l:Real[_,_], r:Real[_]) -> Real[_] {
  cpp{{
  return l.toEigen().llt().solve(r.toEigen()).eval();
  }}
}

/**
 * Solve a system of equations where the left argument is a symmetric
 * positive-definite matrix. The solution is via the Cholesky factorization.
 */
function cholsolve(l:Real[_,_], r:Real[_,_]) -> Real[_,_] {
  cpp{{
  return l.toEigen().llt().solve(r.toEigen()).eval();
  }}
}
