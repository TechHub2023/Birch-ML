struct DotFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return dot(l, r);
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return r*d;
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return outer(l, d);
  }
}
struct Dot<Left,Right> = Binary<DotFunction,Left,Right>;

/**
 * Dot product.
 */
function dot<Left,Right>(l:Left, r:Right) -> {
  return construct<Dot<Left,Right>>(l, r);
}

/**
 * Dot product of vector with itself.
 */
function dot<Middle>(m:Middle) -> {
  return dot(m, m);
}

/**
 * Dot product of vector with itself.
 */
function dot(x:Integer[_]) -> Integer {
  cpp{{
  return x.toEigen().squaredNorm();
  }}
}

/**
 * Dot product of vector with itself.
 */
function dot(x:Real[_]) -> Real {
  cpp{{
  return x.toEigen().squaredNorm();
  }}
}

/**
 * Dot product of two vectors.
 */
function dot(x:Integer[_], y:Integer[_]) -> Integer {
  cpp{{
  return x.toEigen().dot(y.toEigen());
  }}
}

/**
 * Dot product of two vectors.
 */
function dot(x:Integer[_], y:Real[_]) -> Real {
  cpp{{
  return x.toEigen().cast<Real>().dot(y.toEigen());
  }}
}

/**
 * Dot product of two vectors.
 */
function dot(x:Real[_], y:Integer[_]) -> Real {
  cpp{{
  return x.toEigen().dot(y.toEigen().cast<Real>());
  }}
}

/**
 * Dot product of two vectors.
 */
function dot(x:Real[_], y:Real[_]) -> Real {
  cpp{{
  return x.toEigen().dot(y.toEigen());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Integer[_], Y:Integer[_,_]) -> Integer[_] {
  cpp{{
  return Y.toEigen().transpose().operator*(x.toEigen());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Integer[_], Y:Real[_,_]) -> Real[_] {
  cpp{{
  return Y.toEigen().transpose().operator*(x.toEigen().cast<Real>());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Real[_], Y:Integer[_,_]) -> Real[_] {
  cpp{{
  return Y.toEigen().cast<Real>().transpose().operator*(x.toEigen());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Real[_], Y:Real[_,_]) -> Real[_] {
  cpp{{
  return Y.toEigen().transpose().operator*(x.toEigen());
  }}
}
