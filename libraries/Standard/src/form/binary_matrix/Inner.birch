struct InnerFunction {
  function compute<LeftValue,RightValue>(l:LeftValue, r:RightValue) -> {
    return inner(l, r);
  }

  function gradLeft<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
    return outer(r, d);
  }

  function gradRight<Gradient,LeftValue,RightValue>(d:Gradient, l:LeftValue, r:RightValue) -> {
		return l*d;
  }
}
struct Inner<Left,Right> = Binary<InnerFunction,Left,Right>;

/**
 * Inner product of an argument with itself.
 */
function inner<Middle>(m:Middle) -> {
  return inner(m, m);
}

/**
 * Inner product of a scalar with itself.
 */
function inner(x:Integer) -> Integer {
  return inner(x, x);
}

/**
 * Inner product of a scalar with itself.
 */
function inner(x:Real) -> Real {
  return inner(x, x);
}

/**
 * Inner product of a vector with itself.
 */
function inner(x:Integer[_]) -> Integer[_] {
  return inner(x, x);
}

/**
 * Inner product of a vector with itself.
 */
function inner(x:Real[_]) -> Real[_] {
  return inner(x, x);
}

/**
 * Inner product of a matrix with itself.
 */
function inner(X:Integer[_,_]) -> Integer[_,_] {
  return inner(X, X);
}

/**
 * Inner product of a matrix with itself.
 */
function inner(X:Real[_,_]) -> Real[_,_] {
  return inner(X, X);
}

/**
 * Inner product.
 */
function inner<Left,Right>(l:Left, r:Right) -> {
  return construct<Inner<Left,Right>>(l, r);
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Integer) -> Integer {
  return x*y;
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Real) -> Real {
  return x*y;
}

/**
 * Inner product.
 */
function inner(x:Real, y:Integer) -> Real {
  return x*y;
}

/**
 * Inner product.
 */
function inner(x:Real, y:Real) -> Real {
  return x*y;
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Integer[_]) -> Integer[_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Real[_]) -> Real[_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real, y:Integer[_]) -> Real[_] {
  cpp{{
  return y.toEigen().cast<birch::Real>().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real, y:Real[_]) -> Real[_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_], y:Integer) -> Integer[_,_] {
  cpp{{
  return x.toEigen().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::Real>().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_], y:Integer) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::Real>().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_], y:Integer[_]) -> Integer[_] {
  cpp{{
  return x.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_], y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().cast<birch::Real>().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_], y:Integer[_]) -> Real[_] {
  cpp{{
  return x.toEigen().transpose().operator*(y.toEigen().cast<birch::Real>());
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_], y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer, y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real, y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().cast<birch::Real>().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real, y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return y.toEigen().operator*(x);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_,_], y:Integer) -> Integer[_,_] {
  cpp{{
  return x.toEigen().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Integer[_,_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().cast<birch::Real>().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_,_], y:Integer) -> Real[_,_] {
  cpp{{
  return x.toEigen().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(x:Real[_,_], y:Real) -> Real[_,_] {
  cpp{{
  return x.toEigen().transpose().operator*(y);
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_,_], y:Integer[_]) -> Integer[_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_,_], y:Real[_]) -> Real[_] {
  cpp{{
  return X.toEigen().cast<birch::Real>().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_,_], y:Integer[_]) -> Real[_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen().cast<birch::Real>());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_,_], y:Real[_]) -> Real[_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_], y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_], y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose().cast<birch::Real>().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_], y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen().cast<birch::Real>());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_], y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_,_], Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(Y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Integer[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().cast<birch::Real>().transpose().operator*(Y.toEigen());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_,_], Y:Integer[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(Y.toEigen().cast<birch::Real>());
  }}
}

/**
 * Inner product.
 */
function inner(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose().operator*(Y.toEigen());
  }}
}
