cpp{{
/*
 * Event handler for each thread.
 */
static thread_local libbirch::Shared<birch::type::Handler> handler(
    std::in_place, true, false);
}}

/*
 * Get the event handler.
 */
function get_handler() -> Handler {
  cpp{{
  return ::handler;
  }}
}

/*
 * Set the event handler.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`with`](https://www.birch.sh/language/probability/) statement, which
 *     is hard-wired to call this on exit to restore the previous handler.
 */
function set_handler(handler:Handler) {
  cpp{{
  ::handler = handler;
  }}
}

/*
 * Swap the event handler with another.
 *
 * - handler: The new handler.
 *
 * Returns: The previous handler.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`with`](https://www.birch.sh/language/probability/) statement, which
 *     is hard-wired to call this on entry to set the new handler.
 */
function swap_handler(handler:Handler) -> Handler {
  cpp{{
  auto& current = ::handler;
  auto previous = handler;
  std::swap(current, previous);
  return previous;
  }}
}

/*
 * Handle assume event.
 *
 * - x: Random.
 * - p: Distribution.
 *
 * Returns: `x`.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`~`](https://www.birch.sh/language/probability/) operator, which is
 *     hard-wired to call this internally.
 */
function handle_assume<Left,Right>(x:Left, p:Right) -> Left {
  return get_handler().handleAssume<Right.Value>(x, p);
}

/*
 * Handle assume event.
 *
 * - p: Distribution.
 *
 * Returns: A newly construct [Random](../Random/) with value type
 * the same as `p`.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`~`](https://www.birch.sh/language/probability/) operator, which is
 *     hard-wired to call this internally. This particular version is used
 *     when a newly declared variable is initialized with the `~` operator.
 */
function handle_assume<Right>(p:Right) -> Random<Right.Value> {
  return handle_assume(Random<Right.Value>(), p);
}

/*
 * Handle simulate event.
 *
 * - x: Random.
 * - p: Distribution.
 *
 * Returns: `x`.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`<~`](https://www.birch.sh/language/probability/) operator, which is
 *     hard-wired to call this internally.
 */
function handle_simulate<Left,Right>(x:Left, p:Right) -> Left {
  return get_handler().handleSimulate<Right.Value>(x, p);
}

/*
 * Handle simulate event.
 *
 * - p: Distribution.
 *
 * Returns: Value simulated from the distribution.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`<~`](https://www.birch.sh/language/probability/) operator, which is
 *     hard-wired to call this internally.
 */
function handle_simulate<Right>(p:Right) -> Right.Value {
  return get_handler().handleSimulate<Right.Value>(p);
}

/*
 * Handle observe event.
 *
 * - x: Random.
 * - p: Distribution.
 *
 * Returns: `x`.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`~>`](https://www.birch.sh/language/probability/) operator, which is
 *     hard-wired to call this internally.
 */
function handle_observe<Left,Right>(x:Left, p:Right) -> Left {
  return get_handler().handleObserve<Right.Value>(x, p);
}

/*
 * Handle factor event.
 *
 * - w: Log-weight.
 *
 * !!! attention
 *     Typically one does not call this directly, but rather uses the
 *     [`factor`](https://www.birch.sh/language/probability/) statement, which
 *     is hard-wired to call this internally.
 */
function handle_factor<Arg>(w:Arg) {
  get_handler().handleFactor<Arg>(w);
}

/*
 * Handle delayed simulate event.
 *
 * - x: Random.
 *
 * Returns: `x`.
 */
function handle_delay_simulate<Value>(x:Random<Value>) -> Random<Value> {
  return get_handler().handleDelaySimulate<Value>(x);
}

/*
 * Handle delayed observe event.
 *
 * - x: Random.
 *
 * Returns: `x`.
 */
function handle_delay_observe<Value>(x:Random<Value>) -> Random<Value> {
  return get_handler().handleDelayObserve<Value>(x);
}

/*
 * Handle prune event.
 *
 * - p: Distribution.
 * - x: Child of `p` on $M$-path (Random or value).
 *
 * Returns: Updated distribution.
 */
function handle_prune<Left,Right>(p:Left, x:Right) -> Delay {
  return get_handler().handleDelayPrune<Left.Value>(p, x);
}
