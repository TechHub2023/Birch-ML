/**
 * Event handler.
 *
 * @param autoconj Enable delayed sampling.
 * @param autodiff Enable delayed expressions.
 *
 * Events are triggered as code executes. Each event is handled via a call to
 * the currently-installed event handler, which is an object of type Handler.
 *
 * The events are:
 *
 * | Code       | Triggers                          |
 * | -----------| ----------------------------------|
 * | `x ~ p`    | [handleAssume](#handleassume)     |
 * | `x <~ p`   | [handleSimulate](#handlesimulate) |
 * | `x ~> p`   | [handleObserve](#handleobserve)   |
 * | `factor w` | [handleFactor](#handlefactor)     |
 * 
 * After `x ~ p`, certain operations on `x` may further trigger events:
 *
 * | Code                   | Triggers                                    |
 * | ---------------------- | --------------------------------------------|
 * | `x.value()`/`x.eval()` | [handleDelaySimulate](#handledelaysimulate) |
 * | `x <- y`               | [handleDelayObserve](#handledelayobserve)   |
 *
 * Finally, any manipulations of a Random `x` that is an interior node on the
 * delayed sampling $M$-path will require pruning of the path, which will
 * trigger [handleDelayPrune](handledelayprune).
 */
final class Handler(autoconj:Boolean, autodiff:Boolean, autojoin:Boolean) {
  /**
   * Distribution and Random objects for move.
   */
  Ξ:Array<Delay>;

  /**
   * Factors for move.
   */
  Φ:Array<Expression<Real>>;

  /**
   * Accumulated eager weight.
   */
  w:Real! <- 0.0;

  /**
   * Enable automatic conjugacy (marginalization, conditioning, enumeration)?
   */
  autoconj:Boolean <- autoconj;

  /**
   * Enable automatic differentiation?
   */
  autodiff:Boolean <- autodiff;

  /**
   * Enable automatic joins? Requires automatic differentiation also.
   */
  autojoin:Boolean <- autojoin && autodiff;

  function hoist() -> Expression<Real>? {
    π:Expression<Real>?;
    for i in 1..Ξ.size() {
      let ξ <- Ξ[i].hoist();
      if ξ? {
        if π? {
          π <- box(π! + ξ!);
        } else {
          π <- ξ!;
        }
      }
    }
    for i in 1..Φ.size() {
      let φ <- Φ[i];
      if π? {
        π <- box(π! + φ);
      } else {
        π <- φ;
      }
    }
    return π;
  }

  /**
   * Handle an assume event.
   *
   * @param x Random.
   * @param p Distribution.
   *
   * @return `x`.
   */
  function handleAssume<Value>(x:Random<Value>, p:Distribution<Value>) ->
      Random<Value> {
    p.setNext(x);
    x.setNext(p);
    if x.hasValue() {
      handleDelayObserve(x);
    } else if !autoconj {
      handleDelaySimulate(x);
    }
    return x;
  }

  /**
   * Handle a simulate event.
   *
   * @param x Random.
   * @param p Distribution.
   *
   * @return `x`.
   */
  function handleSimulate<Value>(x:Random<Value>, p:Distribution<Value>) ->
      Random<Value> {
    p.setNext(x);
    x.setNext(p);
    handleDelaySimulate(x);
    return x;
  }

  /**
   * Handle an observe event.
   *
   * @param x Random.
   * @param p Distribution.
   *
   * @return `x`.
   */
  function handleObserve<Value>(x:Random<Value>, p:Distribution<Value>) ->
      Random<Value> {
    p.setNext(x);
    x.setNext(p);
    handleDelayObserve(x);
    return x;
  }

  /**
   * Handle a simulate event.
   *
   * @param p Distribution.
   *
   * @return `x`.
   */
  function handleSimulate<Value>(p:Distribution<Value>) -> Value {
    x:Value!;
    if autodiff && p.supportsLazy() {
      x <- p.simulateLazy()!;
      Ξ.pushBack(p);
    } else {
      x <- p.simulate();
    }
    p.setNext(box(x));
    if p.hasSide() {
      p.getSide().setSubordinate();
    }
    return x;
  }

  /**
   * Handle an observe event.
   *
   * @param x Variate.
   * @param p Distribution.
   *
   * @return `x`.
   */
  function handleObserve<Value>(x:Value, p:Distribution<Value>) -> Value {
    if autodiff && p.supportsLazy() {
      w <- w + p.logpdfLazy(x)!;
      Ξ.pushBack(p);
    } else {
      w <- w + p.logpdf(x);
    }
    p.setNext(box(x));
    if p.hasSide() {
      p.getSide().setSubordinate();
    }
    return x;
  }

  /**
   * Handle a delayed simulation event.
   *
   * @param x Random.
   */
  function handleDelaySimulate<Value>(x:Random<Value>) {
    let p <- x.getDistribution();
    if autodiff && p.supportsLazy() {
      x.set(p.simulateLazy()!);
      Ξ.pushBack(p);
    } else {
      x.set(p.simulate());
    }
    x.setNext(nil);
    assert p.getNext() == x;
    if p.hasSide() {
      p.getSide().setSubordinate();
    }
  }

  /**
   * Handle a delayed observation event.
   *
   * @param x Random.
   */
  function handleDelayObserve<Value>(x:Random<Value>) {
    let p <- x.getDistribution();
    if autodiff && p.supportsLazy() {
      w <- w + p.logpdfLazy(eval(x))!;
      Ξ.pushBack(p);
    } else {
      w <- w + p.logpdf(value(x));
    }
    x.setNext(nil);
    assert p.getNext() == x;
    if p.hasSide() {
      p.getSide().setSubordinate();
    }
  }

  /**
   * Handle a prune event.
   *
   * @param p Distribution.
   * @param x Child of `p` on $M$-path.
   *
   * @return Updated distribution.
   */
  function handleDelayPrune<Value>(p:Distribution<Value>,
      x:Expression<Value>) -> Delay {
    assert p.getNext() == x;
    if autojoin && p.supportsJoin() {
      return p.updateJoin(x)!;
    } else if autodiff && p.supportsLazy() {
      return p.updateLazy(x)!;
    } else {
      return p.update(value(x))!;
    }
  }

  /**
   * Handle a factor event.
   *
   * @param φ Factor giving an incremental log-weight.
   *
   * A factor event is triggered by the `factor` statement.
   */
  function handleFactor(φ:Real) {
    w <- w + φ;
  }

  /**
   * Handle a factor event.
   *
   * @param φ Factor giving an incremental log-weight.
   *
   * A factor event is triggered by the `factor` statement.
   */
  function handleFactor(φ:Real!) {
    w <- w + φ;
  }

  /**
   * Handle a factor event.
   *
   * @param φ Factor giving an incremental log-weight.
   *
   * A factor event is triggered by the `factor` statement.
   */
  function handleFactor<Arg>(φ:Arg) {
    if autodiff {
      w <- w + eval(φ);
      Φ.pushBack(box(φ));
    } else {
      w <- w + value(φ);
    }
  }
}
