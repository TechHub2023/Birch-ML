/**
 * Categorical distribution.
 *
 * @param ρ Probabilities.
 */
final class CategoricalDistribution<Arg>(ρ:Arg) <
    Distribution<Integer> {
  /**
   * Category probabilities.
   */
  ρ:Arg <- ρ;

  override function simulate() -> Integer! {
    return simulate_categorical(value(ρ));
  }

  override function simulateLazy() -> Integer! {
    return simulate_categorical(eval(ρ));
  }

  override function logpdf(x:Integer!) -> Real! {
    return logpdf_categorical(x, value(ρ));
  }

  override function logpdfLazy(x:Integer!) -> Real! {
    return logpdf_categorical(x, eval(ρ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_categorical(this.random(), ρ));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_categorical(x, value(ρ));
  }

  override function quantile(P:Real!) -> Integer!? {
    return quantile_categorical(P, value(ρ));
  }

  override function lower() -> Integer!? {
    return 1;
  }

  override function upper() -> Integer!? {
    return length(value(ρ));
  }

  override function constant() {
    super.constant();
    global.constant(ρ);
  }

  override function isBoundedDiscrete() -> Boolean {
    return !x?;
  }

  override function getBoundedDiscrete() -> (Expression<Real[_]>, Integer!)? {
    assert isBoundedDiscrete();
    return (box(ρ), 1);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Categorical");
    buffer.set("ρ", value(ρ));
  }
}

/**
 * Create categorical distribution.
 */
function Categorical<Arg>(ρ:Arg) -> Distribution<Integer> {
  return wrap_categorical(ρ);
}
function wrap_categorical<Arg>(ρ:Arg) -> {
  return make_categorical(wrap(ρ));
}
function make_categorical<Arg>(ρ:Arg) -> {
  return construct<CategoricalDistribution<Arg>>(ρ);
}

/*
 * Simulate a categorical distribution.
 *
 * @param ρ Normalized category probabilities.
 */
function simulate_categorical<Arg1>(ρ:Arg1) -> {
  return simulate_categorical(ρ, 1.0);
}

/*
 * Simulate a categorical distribution.
 *
 * @param ρ Unnormalized category probabilities.
 * @param Z Sum of the unnormalized category probabilities.
 */
function simulate_categorical<Arg1,Arg2>(ρ:Arg1, Z:Arg2) -> {
  assert Z > 0.0;
  let P <- 0.0;
  let u <- simulate_uniform(0.0, Z);
  let x <- 0;
  let N <- length(ρ);
  while P <= u && x < N {
    x <- x + 1;
    P <- P + ρ[x];
  }
  assert 1 <= x && x <= N;
  return x;
}

/*
 * Observe a categorical variate.
 *
 * @param x The variate.
 * @param ρ Normalized category probabilities.
 *
 * @return the log probability mass.
 */
function logpdf_categorical<Arg1,Arg2>(x:Arg1, ρ:Arg2) -> {
  return logpdf_categorical(x, ρ, 1.0);
}

/*
 * Observe a categorical variate.
 *
 * @param x The variate.
 * @param ρ Unnormalized category probabilities.
 * @param Z Sum of the unnormalized category probabilities.
 *
 * @return the log probability mass.
 */
function logpdf_categorical<Arg1,Arg2,Arg3>(x:Arg1, ρ:Arg2, Z:Arg3) -> {
  return log(element(ρ, x)) - log(Z);
}

/*
 * CDF of a categorical variate.
 *
 * @param x The variate.
 * @param ρ Normalized category probabilities.
 *
 * @return the cumulative probability.
 */
function cdf_categorical<Arg1,Arg2>(x:Arg1, ρ:Arg2) -> {
  return cdf_categorical(x, ρ, 1.0);
}

/*
 * CDF of a categorical variate.
 *
 * @param x The variate.
 * @param ρ Unnormalized category probabilities.
 * @param Z Sum of the unnormalized category probabilities.
 *
 * @return the cumulative probability.
 */
function cdf_categorical<Arg1,Arg2,Arg3>(x:Arg1, ρ:Arg2, Z:Arg3) -> {
  return sum(ρ[1..wait(x)])/Z;
}

/*
 * Quantile of a categorical variate.
 *
 * @param P The cumulative probability.
 * @param ρ Normalized category probabilities.
 *
 * @return the quantile.
 */
function quantile_categorical<Arg1,Arg2>(P:Arg1, ρ:Arg2) -> {
  return quantile_categorical(P, ρ, 1.0);
}

/*
 * Quantile of a categorical variate.
 *
 * @param P The cumulative probability.
 * @param ρ Unnormalized category probabilities.
 * @param Z Sum of the unnormalized category probabilities.
 *
 * @return the quantile.
 */
function quantile_categorical<Arg1,Arg2,Arg3>(P:Arg1, ρ:Arg2, Z:Arg3) -> {
  if length(ρ) == 0 {
    return 0;
  } else {
    let i <- 1;
    let R <- ρ[1];
    let Q <- wait(P*Z);
    while R < Q && i < length(ρ) {
      i <- i + 1;
      R <- R + ρ[i];
    }
    return i;
  }
}
