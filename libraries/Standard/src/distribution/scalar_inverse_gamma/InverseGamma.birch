cpp{{
#include <boost/math/distributions.hpp>
}}

/**
 * Inverse-gamma distribution.
 */
final class InverseGamma<Arg1,Arg2>(α:Arg1, β:Arg2) < Distribution<Real> {
  /**
   * Shape.
   */
  α:Arg1 <- α;
  
  /**
   * Scale.
   */
  β:Arg2 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_inverse_gamma(value(α), value(β));
  }

  override function simulateLazy() -> Real? {
    return simulate_inverse_gamma(peek(α), peek(β));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_inverse_gamma(x, value(α), value(β));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_inverse_gamma(x, α, β));
  }

  override function cdf(x:Real) -> Real? {
    return cdf_inverse_gamma(x, value(α), value(β));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_inverse_gamma(P, value(α), value(β));
  }

  override function lower() -> Real? {
    return 0.0;
  }
  
  override function isInverseGamma() -> Boolean {
    return true;
  }

  override function getInverseGamma() -> (Expression<Real>, Expression<Real>)? {
    return box(α, β);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "InverseGamma");
    buffer.set("α", value(α));
    buffer.set("β", value(β));
  }
}

/**
 * Create inverse-gamma distribution.
 */
function InverseGamma<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return construct<InverseGamma<Arg1,Arg2>>(α, β);
}

/*
 * Simulate an inverse-gamma distribution.
 *
 * - α: Shape.
 * - β: Scale.
 */
function simulate_inverse_gamma(α:Real, β:Real) -> Real {
  return 1.0/simulate_gamma(α, 1.0/β);
}

/*
 * Observe an inverse-gamma variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_inverse_gamma<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return if_then_else(x < 0.0, -inf, α*log(β) - (α + 1.0)*log(x) - β/x -
      lgamma(α));
}

/*
 * CDF of an inverse-gamma variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Scale.
 *
 * Return: the cumulative probability.
 */
function cdf_inverse_gamma(x:Real, α:Real, β:Real) -> Real {
  assert 0.0 < α;
  assert 0.0 < β;

  if x <= 0.0 {
    return 0.0;
  } else {
    return upper_inc_gamma(α, β/x);
  }
}

/*
 * Quantile of an inverse-gamma distribution.
 *
 * - P: The cumulative probability.
 * - α: Shape.
 * - β: Scale.
 *
 * Return: the quantile.
 */
function quantile_inverse_gamma(P:Real, α:Real, β:Real) -> Real {
  assert 0.0 < α;
  assert 0.0 < β;
  if P == 0.0 {
    return 0.0;
  } else {
    cpp{{
    return boost::math::quantile(boost::math::inverse_gamma_distribution<>(α, β), P);
    }}
  }
}
