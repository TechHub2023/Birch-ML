/**
 * Linear-normal-inverse-gamma-Gaussian distribution.
 */
final class LinearNormalInverseGammaGaussianDistribution<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    a:Arg1, ν:Arg2, λ:Arg3, α:Arg4, β:Arg5, c:Arg6) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Precision times mean.
   */
  ν:Arg2 <- ν;

  /**
   * Precision.
   */
  λ:Arg3 <- λ;

  /**
   * Shape.
   */
  α:Arg4 <- α;

  /**
   * Scale.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_linear_normal_inverse_gamma_gaussian(value(a), value(ν),
        value(λ), value(α), value(β), value(c));
  }

  override function simulateLazy() -> Real? {
    return simulate_linear_normal_inverse_gamma_gaussian(peek(a), peek(ν),
        peek(λ), peek(α), peek(β), peek(c));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_linear_normal_inverse_gamma_gaussian(x, value(a), value(ν),
        value(λ), value(α), value(β), value(c));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_linear_normal_inverse_gamma_gaussian(x, a, ν, λ, α, β,
        c));
  }

  override function update(x:Real) -> Delay? {
    return update_linear_normal_inverse_gamma_gaussian(x, value(a), value(ν),
        value(λ), value(α), value(β), value(c));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_linear_normal_inverse_gamma_gaussian(x, a, ν, λ, α, β,
        c);
  }

  override function cdf(x:Real) -> Real? {
    return cdf_linear_normal_inverse_gamma_gaussian(x, value(a), value(ν),
        value(λ), value(α), value(β), value(c));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_linear_normal_inverse_gamma_gaussian(P, value(a),
        value(ν), value(λ), value(α), value(β), value(c));
  }
}

function LinearNormalInverseGammaGaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    a:Arg1, ν:Arg2, λ:Arg3, α:Arg4, β:Arg5, c:Arg6)  -> {
  return construct<LinearNormalInverseGammaGaussianDistribution<Arg1,Arg2,Arg3,Arg4,Arg5,
      Arg6>>(a, ν, λ, α, β, c);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:MultiplyAdd<Arg1,Random<Real>,Arg2>,
    σ2:Random<Real>) -> Distribution<Real> {
  μ.m.prune();
  if μ.m.hasNormalInverseGamma() && μ.m.isGrandChildOf(σ2) {
    let (ν, λ, α, β) <- μ.m.getNormalInverseGamma();
    let p <- LinearNormalInverseGammaGaussian(μ.l, ν, λ, α, β, μ.r);
    μ.m.graft(p, 1);
    σ2.graftReplace(p, 2);
    μ.m.join(σ2);
    return p;
  } else if μ.m.hasGaussian() {
    let (m, s2) <- μ.m.getGaussian();
    let p <- LinearGaussianGaussian(μ.l, m, s2, μ.r, σ2);
    μ.m.graft(p);
    return p;
  } else {
    σ2.prune();
    if σ2.hasInverseGamma() {
      let (α, β) <- σ2.getInverseGamma();
      let p <- NormalInverseGamma(μ, 1.0, α, β);
      σ2.graft(p);
      return p;
    } else {
      return construct<GaussianDistribution<MultiplyAdd<Arg1,Random<Real>,Arg2>,
          Random<Real>>>(μ, σ2);
    }
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Multiply<Arg,Random<Real>>, σ2:Random<Real>) ->
    Distribution<Real> {
  μ.r.prune();
  if μ.r.hasNormalInverseGamma() && μ.r.isGrandChildOf(σ2) {
    let (ν, λ, α, β) <- μ.r.getNormalInverseGamma();
    let p <- LinearNormalInverseGammaGaussian(μ.l, ν, λ, α, β, 0.0);
    μ.r.graft(p, 1);
    σ2.graftReplace(p, 2);
    μ.r.join(σ2);
    return p;
  } else if μ.m.hasGaussian() {
    let (m, s2) <- μ.m.getGaussian();
    let p <- LinearGaussianGaussian(μ.l, m, s2, 0.0, σ2);
    μ.m.graft(p);
    return p;
  } else {
    σ2.prune();
    if σ2.hasInverseGamma() {
      let (α, β) <- σ2.getInverseGamma();
      let p <- NormalInverseGamma(μ, 1.0, α, β);
      σ2.graft(p);
      return p;
    } else {
      return construct<GaussianDistribution<Multiply<Arg,Random<Real>>,Random<Real>>>(μ,
          σ2);
    }
  }
}

/*
 * Simulate a Gaussian distribution with a normal inverse-gamma prior.
 *
 * - a: Scale.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 * - c: Offset.
 */
function simulate_linear_normal_inverse_gamma_gaussian(a:Real, ν:Real,
    λ:Real, α:Real, β:Real, c:Real) -> Real {
  return simulate_student_t(2.0*α, a*ν/λ + c, (β/α)*(1.0 + a*a/λ));
}

/*
 * Observe a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 * - c: Offset.
 *
 * Returns: the log probability density.
 */
function logpdf_linear_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, α:Arg5, β:Arg6, c:Arg7) -> {
  return logpdf_student_t(x, 2.0*α, a*ν/λ + c, (β/α)*(1.0 + a*a/λ));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Prior precision times mean.
 * - λ: Prior precision.
 * - c: Offset.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `ν'`, `λ'`, `α'` and `β'`.
 */
function update_linear_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, α:Arg5, β:Arg6, c:Arg7) -> {
  let y <- x - c;
  let λ' <- λ + a*a;
  let ν' <- ν + a*y;
  let α' <- α + 0.5;
  let β' <- β + 0.5*(pow(y, 2.0) + ν*ν/λ - ν'*ν'/λ');
  return NormalInverseGamma(ν', λ', α', β');
}

/*
 * CDF of a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Return: the cumulative probability.
 */
function cdf_linear_normal_inverse_gamma_gaussian(x:Real, a:Real, ν:Real,
    λ:Real, α:Real, β:Real, c:Real) -> Real {
  return cdf_student_t(x, 2.0*α, a*ν/λ + c, (β/α)*(1.0 + a*a/λ));
}

/*
 * Quantile of a Gaussian distribution with a normal inverse-gamma prior with
 * linear transformation.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Return: the quantile.
 */
function quantile_linear_normal_inverse_gamma_gaussian(P:Real, a:Real, ν:Real,
    λ:Real, α:Real, β:Real, c:Real) -> Real {
  return quantile_student_t(P, 2.0*α, a*ν/λ + c, (β/α)*(1.0 + a*a/λ));
}
