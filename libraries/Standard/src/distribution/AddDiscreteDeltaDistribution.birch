/**
 * Delta distribution on sum of two bounded discrete random variables.
 */
final class AddDiscreteDeltaDistribution(p:BoundedDiscreteDistribution,
    q:BoundedDiscreteDistribution) < BoundedDiscreteDistribution {
  /**
   * Distribution over first random variable.
   */
  p:BoundedDiscreteDistribution <- p;

  /**
   * Distribution over second random variable.
   */
  q:BoundedDiscreteDistribution <- q;

  /**
   * Value at which probabilities have been enumerated.
   */
  x:Integer?;
  
  /**
   * If enumerated, then the lower bound on the support of `p`.
   */
  l:Integer <- 0;

  /**
   * If enumerated, then the upper bound on the support of `p`.
   */
  u:Integer <- 0;

  /**
   * If enumerated, then the probabilities across the support of `p`, starting
   * from `l`.
   */
  z:Real[_];
  
  /**
   * If enumerated, then the sum of `z`.
   */
  Z:Real <- 0.0;
  
  function enumerate(x:Integer!) {
    if !this.x? || this.x! != x! {
      l <- max(p.lower()!!, x! - q.upper()!!);
      u <- min(p.upper()!!, x! - q.lower()!!);
      if l <= u {
        /* distribution over possible pairs that produce the given sum */
        z <- vector_lambda(\(i:Integer) -> {
              let n <- l + i - 1;
              return p.logpdf(n)! + q.logpdf(x! - n)!;
            }, u - l + 1);
        Z <- log_sum_exp(z);
        z <- norm_exp(z);
      } else {
        Z <- -inf;
        z <- vector(0.0, 0);
      }
      this.x <- x!;
    }
  }

  override function simulate() -> Integer! {
    return p.simulate() + q.simulate();
  }
  
  override function logpdf(x:Integer!) -> Real! {
    enumerate(x);
    return Z;
  }
  
  override function update(x:Integer!) -> Delay? {
    enumerate(x);
    return construct<AddDiscreteConstrainedDistribution>(z, l, x!);
  }
  
  override function lower() -> Integer!? {
    return p.lower()! + q.lower()!;
  }
  
  override function upper() -> Integer!? {
    return p.upper()! + q.upper()!;
  }

  override function constant() {
    super.constant();
    p.constant();
    q.constant();
  }
}

/**
 * Create delta distribution.
 */
function Delta(μ:Add<Random<Integer>,Random<Integer>>) ->
    Distribution<Integer> {
  let l <- μ.l;
  let r <- μ.r;
  if l.hasNext() && l.getNext().isBoundedDiscrete() &&
      r.hasNext() && r.getNext().isBoundedDiscrete() {
    l.prune();
    r.prune();
    let p <- construct<AddDiscreteDeltaDistribution>(
        l.getNext().getBoundedDiscrete(),
        r.getNext().getBoundedDiscrete());
    l.setNext(p);
    r.setNext(nil);
    l.setSide(r);
    r.setSide(l);
    return p;
	} else if l.hasNext() && l.getNext().isBoundedDiscrete() {
    let x ~ Delta(r);
    return Delta(l + x);
  } else if r.hasNext() && r.getNext().isBoundedDiscrete() {
    let x ~ Delta(l);
    return Delta(x + r);
  } else {
		return wrap_delta(μ);
	}
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Add<Random<Integer>,Arg>) -> Distribution<Integer> {
  let r ~ Delta(μ.r);
  return Delta(μ.l + r);
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Add<Arg,Random<Integer>>) -> Distribution<Integer> {
  let l ~ Delta(μ.l);
  return Delta(l + μ.r);
}

/**
 * Create delta distribution.
 */
function Delta<Arg1,Arg2>(μ:Add<Arg1,Arg2>) -> Distribution<Integer> {
  let l ~ Delta(μ.l);
  let r ~ Delta(μ.r);
  return Delta(l + r);
}
