/**
 * Distribution with delayed-sampling support.
 *
 * - Value: Value type.
 */
abstract class Distribution<Value> < DelayDistribution {
  /**
   * Random variate associated with the distibution, if any.
   */
  v:Random<Value>?;

  /**
   * Clamped value, if any.
   *
   * See also: `clamp()`.
   */
  clamped:Value?;

  /**
   * Number of rows, when interpreted as a matrix.
   */
  function rows() -> Integer {
    return 1;
  }

  /**
   * Number of columns, when interpreted as a matrix.
   */
  function columns() -> Integer {
    return 1;
  }

  /**
   * Are lazy operations supported?
   */
  function supportsLazy() -> Boolean {
    return false;
  }

  /**
   * Set a random variate associated with the distribution.
   */
  final function assume(v:Random<Value>) {
    assert !this.v?;
    this.v <- v;
  }

  /**
   * Clamp value.
   *
   * - x: The value.
   *
   * In the context of delayed sampling, this is used by a node to fix the
   * value of its parent nodes during a call of `update()`. When those parent
   * nodes are eventually realized, this value will be used.
   *
   * The typical use case for this is enumerations of random variables, e.g.
   * when a node that represents the sum of two random variables is realized,
   * it fixes the values of two random variables also (its parents).
   */
  final function clamp(x:Value) {
    assert !clamped? || clamped! == x;
    clamped <- x;
  }

  /**
   * Is the value clamped?
   */
  final function hasClamp() -> Boolean {
    return clamped?;
  }

  /**
   * Realize a value for the associated random variate.
   */
  final function realize() -> Value {
    prune();
    x:Value?;
    if clamped? {
      x <- clamped!;
      clamped <- nil;
    } else {
      x <- simulate();
    }

    /// @todo Workaround for now, either v!.setValue() or unlink() may
    /// remove the last reference to this, create an additional on the stack
    tmp:Distribution<Value> <- this;

    if v? {
      v!.move(x!);
    }
    update(x!);
    unlink();
    return x!;
  }

  /**
   * Realize a value for the associated random variate, lazily.
   */
  final function realizeLazy() -> Value {
    if !supportsLazy() {
      return realize();
    } else {
      prune();
      x:Value?;
      if clamped? {
        x <- clamped!;
        clamped <- nil;
      } else {
        x <- simulateLazy();
      }
      if v? {
        v!.move(x!);
        updateLazy(v!);
      } else {
        update(x!);
      }
      unlink();
      return x!;
    }
  }

  /**
   * Observe a value for the associated random variate.
   *
   * - x: The value.
   *
   * Returns: weight giving the log pdf (or pmf) evaluated at the value.
   */
  final function observe(x:Value) -> Real {
    assert !clamped?;
    prune();
    let w <- logpdf(x);
    if w > -inf {
      update(x);
    }
    unlink();
    return w;
  }
  
  /**
   * Observe a value for the associated random variate, lazily.
   *
   * - x: The value.
   *
   * Returns: expression giving the log probability density (or mass), if
   * supported.
   */
  final function observeLazy(x:Expression<Value>) -> Expression<Real>? {
    assert !clamped?;
    assert supportsLazy();
    prune();
    let w <- logpdfLazy(x);
    updateLazy(x);
    unlink();
    return w;
  }
  
  /**
   * Simulate a value.
   *
   * Return: the value.
   */
  abstract function simulate() -> Value;

  /**
   * Simulate a value as part of a lazy expression.
   *
   * Return: the value, if supported.
   */
  function simulateLazy() -> Value? {
    return nil;
  }

  /**
   * Evaluate the log probability density (or mass) function.
   *
   * - x: The value.
   *
   * Return: the log probability density (or mass).
   */
  abstract function logpdf(x:Value) -> Real;

  /**
   * Construct a lazy expression for the log probability density (or mass).
   *
   * - x: The value.
   *
   * Return: expression giving the log probability density (or mass), if
   * supported.
   */
  function logpdfLazy(x:Expression<Value>) -> Expression<Real>? {
    return nil;
  }

  /**
   * Update the parent node on the $M$-path given the value of this node.
   *
   * - x: The value.
   */
  function update(x:Value) {
    //
  }

  /**
   * Update the parent node on the $M$-path given the value of this node.
   *
   * - x: The value.
   */
  function updateLazy(x:Expression<Value>) {
    //
  }

  /**
   * Evaluate the probability density (or mass) function.
   *
   * - x: The value.
   *
   * Return: the probability density (or mass).
   */
  function pdf(x:Value) -> Real {
    return exp(logpdf(x));
  }

  /**
   * Evaluate the cumulative distribution function at a value.
   *
   * - x: The value.
   *
   * Return: the cumulative probability, if supported.
   */
  function cdf(x:Value) -> Real? {
    return nil;
  }

  /**
   * Evaluate the quantile function at a cumulative probability.
   *
   * - P: The cumulative probability.
   *
   * Return: the quantile, if supported.
   */
  function quantile(P:Real) -> Value? {
    return nil;
  }
  
  /**
   * Finite lower bound of the support of this node, if any.
   */
  function lower() -> Value? {
    return nil;
  }
  
  /**
   * Finite upper bound of the support of this node, if any.
   */
  function upper() -> Value? {
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftGaussian() -> Gaussian? {
    prune();
    return nil;
  }
    
  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftBeta() -> Beta? {
    prune();
    return nil;
  }
  
  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftGamma() -> Gamma? {
    prune();
    return nil;
  }
  
  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftInverseGamma() -> InverseGamma? {
    prune();
    return nil;
  } 

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftInverseWishart() -> InverseWishart? {
    prune();
    return nil;
  } 
  
  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftNormalInverseGamma(compare:Distribution<Real>) -> NormalInverseGamma? {
    prune();
    return nil;
  }
  
  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftDirichlet() -> Dirichlet? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftRestaurant() -> Restaurant? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftMultivariateGaussian() -> MultivariateGaussian? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      MultivariateNormalInverseGamma? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftMatrixGaussian() -> MatrixGaussian? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftMatrixNormalInverseWishart(compare:Distribution<Real[_,_]>) ->
      MatrixNormalInverseWishart? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftDiscrete() -> Discrete? {
    prune();
    return nil;
  }

  /**
   * Graft this onto the delayed sampling graph.
   */
  function graftBoundedDiscrete() -> BoundedDiscrete? {
    prune();
    return nil;
  }

  final override function triggerRealize() {
    handle_realize(this);
  }
}
