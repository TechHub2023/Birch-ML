/**
 * Poisson distribution.
 */
final class Poisson(λ:Expression<Real>) < Discrete {
  /**
   * Rate.
   */
  λ:Expression<Real> <- λ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_poisson(λ.value());
  }

  function simulateLazy() -> Integer? {
    return simulate_poisson(λ.eval());
  }

  function logpdf(x:Integer) -> Real {
    return logpdf_poisson(x, λ.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_poisson(x, λ);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_poisson(x, λ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_poisson(P, λ.value());
  }

  function lower() -> Integer? {
    return 0;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Poisson");
    buffer.set("λ", λ);
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson<Middle>(λ:Middle) -> Distribution<Integer> {
  return construct<Poisson>(box(λ));
}

/**
 * Create Poisson distribution.
 */
function Poisson(λ:Random<Real>) -> Distribution<Integer> {
  m:Gamma?;
  if (m <- λ.graftGamma())? {
    return GammaPoisson(m!);
  } else {
    return construct<Poisson>(λ);
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson<Left>(λ:Multiply<Left,Random<Real>>) -> Distribution<Integer> {
  m:Gamma?;
  if (m <- λ.r!.graftGamma())? {
    return ScaledGammaPoisson(box(λ.l!), m!);
  } else {
    return construct<Poisson>(box(λ));
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson<Right>(λ:Multiply<Random<Real>,Right>) -> Distribution<Integer> {
  m:Gamma?;
  if (m <- λ.l!.graftGamma())? {
    return ScaledGammaPoisson(box(λ.r!), m!);
  } else {
    return construct<Poisson>(box(λ));
  }
}
