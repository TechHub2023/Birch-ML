/**
 * Multivariate $t$-distribution.
 */
class MultivariateTDistribution<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, Σ:Arg3) <
    Distribution<Real[_]> {
  /**
   * Degrees of freedom.
   */
  k:Arg1 <- k;
  
  /**
   * Mean.
   */
  μ:Arg2 <- μ;
  
  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_multivariate_t(value(k), value(μ), value(Σ));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_multivariate_t(eval(k), eval(μ), eval(Σ));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_multivariate_t(x, value(k), value(μ), value(Σ));
  }

  override function logpdfLazy(x:Real[_]) -> Real!? {
    return logpdf_multivariate_t(x, eval(k), eval(μ), eval(Σ));
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_multivariate_t(this.getVariate(), k, μ, Σ));
  }

  override function constant() {
    super.constant();
    global.constant(k);
    global.constant(μ);
    global.constant(Σ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateT");
    buffer.set("k", value(k));
    buffer.set("μ", value(μ));
    buffer.set("Σ", value(Σ));
  }
}

/*
 * Simulate a multivariate $t$-distribution variate with location and scale.
 *
 * @param k Degrees of freedom.
 * @param μ Mean vector.
 * @param Σ Spread matrix.
 */
function simulate_multivariate_t<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, Σ:Arg3) -> {
  let n <- length(μ);
  let Y <- standard_wishart(k, n);
  let z <- standard_gaussian(n);
  return μ + inner(trisolve(Y, transpose(chol(Σ))), z);
}

/*
 * Observe a multivariate $t$-distribution variate with location and scale.
 *
 * @param x The variate.
 * @param k Degrees of freedom.
 * @param μ Mean vector.
 * @param Σ Spread matrix times degrees of freedom.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_t<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2, μ:Arg3,
    Σ:Arg4) -> {
  let n <- length(x);
  let a <- 0.5*k + 0.5*n;
  let b <- 0.5*k;
  let L <- chol(Σ);
  return lgamma(a) - lgamma(b) - 0.5*n*log(π) - ltridet(L) -
      a*log1p(dot(trisolve(L, x - μ)));
}
