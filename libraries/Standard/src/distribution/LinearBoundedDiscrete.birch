/**
 * Delta function on a linear transformation of a bounded discrete
 * distribution.
 */
final class LinearBoundedDiscrete(a:Expression<Integer>, μ:BoundedDiscrete,
    c:Expression<Integer>) < BoundedDiscrete {
  /**
   * Scale. Should be 1 or -1 to ensure integer-invertible.
   */
  a:Expression<Integer> <- a;
    
  /**
   * Location.
   */
  μ:BoundedDiscrete <- μ;

  /**
   * Offset.
   */
  c:Expression<Integer> <- c;

  function supportsLazy() -> Boolean {
    return false;
  }

  function simulate() -> Integer {
    return simulate_delta(a.value()*μ.simulate() + c.value());
  }

//  function simulateLazy() -> Integer? {
//    return simulate_delta(a.eval()*μ.simulateLazy()! + c.eval());
//  }

  function logpdf(x:Integer) -> Real {
    return μ.logpdf((x - c.value())/a.value()) - log(abs(a.value()));
  }

//  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
//    return μ.logpdfLazy((x - c)/a) - log(abs(a));
//  }

  function update(x:Integer) {
    μ.clamp((x - c.value())/a.value());
  }

//  function updateLazy(x:Expression<Integer>) {
//
//  }

  function cdf(x:Integer) -> Real? {
    return μ.cdf((x - c.value())/a.value());
  }
  
  function lower() -> Integer? {
    let a <- this.a.value();
    if a > 0 {
      return a*μ.lower()! + c.value();
    } else {
      return a*μ.upper()! + c.value();
    }
  }
  
  function upper() -> Integer? {
    let a <- this.a.value();
    if a > 0 {
      return a*μ.upper()! + c.value();
    } else {
      return a*μ.lower()! + c.value();
    }
  }

  function link() {
    μ.setChild(this);
  }
  
  function unlink() {
    μ.releaseChild(this);
  }
}

function LinearBoundedDiscrete<Left,Right>(a:Left, μ:BoundedDiscrete, c:Right) -> LinearBoundedDiscrete {
  m:LinearBoundedDiscrete(box(a), μ, box(c));
  m.link();
  return m;
}
