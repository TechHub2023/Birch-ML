/**
 * Matrix Gaussian distribution.
 *
 * !!! note
 *     See Gaussian for associated factory functions for the creation of
 *     MatrixGaussian objects.
 */
class MatrixGaussian(M:Expression<Real[_,_]>, U:Expression<Real[_,_]>,
    V:Expression<Real[_,_]>) < Distribution<Real[_,_]> {
  /**
   * Mean.
   */
  M:Expression<Real[_,_]> <- M;
  
  /**
   * Among-row covariance.
   */
  U:Expression<Real[_,_]> <- U;

  /**
   * Among-column covariance.
   */
  V:Expression<Real[_,_]> <- V;

  function rows() -> Integer {
    return M.rows();
  }

  function columns() -> Integer {
    return M.columns();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_,_] {
    return simulate_matrix_gaussian(M.value(), U.value(), V.value());
  }

  function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_gaussian(M.eval(), U.eval(), V.eval());
  }
  
  function logpdf(X:Real[_,_]) -> Real {
    return logpdf_matrix_gaussian(X, M.value(), U.value(), V.value());
  }

  function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return logpdf_lazy_matrix_gaussian(X, M, U, V);
  }

  function graftMatrixGaussian() -> MatrixGaussian? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "MatrixGaussian");
    buffer.set("M", M);
    buffer.set("U", U);
    buffer.set("V", V);
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Left,Middle,Right>(M:Left, U:Middle, V:Right) -> Distribution<Real[_,_]> {
  return construct<MatrixGaussian>(box(M), box(U), box(V));
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Left,Middle>(M:Left, U:Middle, V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  p:InverseWishart?;
  if (p <- V.graftInverseWishart())? {
    return MatrixNormalInverseWishart(M, U, p!);
  } else {
    return construct<MatrixGaussian>(box(M), box(U), box(V));
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Middle>(M:Random<Real[_,_]>, U:Middle, V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let p <- InverseWishart?(V.p);
  if p? {
    let q <- M.graftMatrixNormalInverseWishart(p!);
    if q? {
      return MatrixNormalInverseWishartMatrixGaussian(q!);
    } else {
      return MatrixNormalInverseWishart(M, U, p!);
    }
  } else {
    return construct<MatrixGaussian>(box(M), box(U), V);
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Left,Middle,Right>(M:MultiplyAdd<Left,Random<Real[_,_]>,Middle>, U:Right, V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let p <- InverseWishart?(V.p);
  if p? {
    let q <- M.m!.graftMatrixNormalInverseWishart(p!);
    if q? {
      return LinearMatrixNormalInverseWishartMatrixGaussian(M.l!, q!, M.r!);
    } else {
      return MatrixNormalInverseWishart(M, U, p!);
    }
  } else {
    return construct<MatrixGaussian>(box(M), box(U), V);
  }
}
