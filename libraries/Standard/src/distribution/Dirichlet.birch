/**
 * Dirichlet distribution.
 */
final class Dirichlet(α:Expression<Real[_]>) < Distribution<Real[_]> {
  /**
   * Concentration.
   */
  α:Expression<Real[_]> <- α;

  function supportsLazy() -> Boolean {
    return false;
  }

  function simulate() -> Real[_] {
    return simulate_dirichlet(α.value());
  }

//  function simulateLazy() -> Real[_]? {
//    return simulate_dirichlet(α.eval());
//  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_dirichlet(x, α.value());
  }

//  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
//    return logpdf_lazy_dirichlet(x, α);
//  }

  function graftDirichlet() -> Dirichlet? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Dirichlet");
    buffer.set("α", α);
  }
}

/**
 * Create Dirichlet distribution.
 */
function Dirichlet<Middle>(α:Middle) -> {
  return construct<Dirichlet>(box(α));
}
