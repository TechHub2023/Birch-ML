/**
 * Scaled-normal-inverse-gamma-Gaussian distribution where
 * components have independent and identical variance.
 */
final class ScaledMultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, ν:Arg2, Λ:Arg3, α:Arg4, β:Arg5,
    Σ:Arg6) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Precision times mean.
   */
  ν:Arg2 <- ν;

  /**
   * Precision.
   */
  Λ:Arg3 <- Λ;

  /**
   * Variance shape.
   */
  α:Arg4 <- α;

  /**
   * Variance scale.
   */
  β:Arg5 <- β;

  /**
   * Covariance scale.
   */
  Σ:Arg6 <- Σ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        value(A), value(ν), value(Λ), value(α), value(β), value(Σ));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        peak(A), peak(ν), peak(Λ), peak(α), peak(β), peak(Σ));
  }
  
  override function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, value(A), value(ν), value(Λ), value(α), value(β), value(Σ));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, A, ν, Λ, α, β, Σ));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, value(A), value(ν), value(Λ), value(α), value(β), value(Σ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, A, ν, Λ, α, β, Σ);
  }
}

function ScaledMultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, ν:Arg2, Λ:Arg3, α:Arg4, β:Arg5,
    Σ:Arg6) -> {
  return construct<ScaledMultivariateNormalInverseGammaMultivariateGaussian<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, ν, Λ, α, β, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real[_]>>,
    Σ:Multiply<Arg2,Random<Real>>) -> Distribution<Real[_]> {
  if μ.r.hasMultivariateNormalInverseGamma(Σ.r) {
    μ.r.prune();
    let (ν, Λ, α, β) <- μ.r.getMultivariateNormalInverseGamma();
    let p <- ScaledMultivariateNormalInverseGammaMultivariateGaussian(μ.l,
        ν, Λ, α, β, Σ.l);
    μ.r.graft(p);
    return p;
  } else if Σ.r.hasInverseGamma() {
    Σ.r.prune();
    let (α, β) <- Σ.r.getInverseGamma();
    let p <- MultivariateNormalInverseGamma(μ, Σ.l, α, β);
    Σ.r.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussian<Multiply<Arg1,Random<Real[_]>>,
        Multiply<Arg2,Random<Real>>>>(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real[_]>>,
    Σ:Multiply<Random<Real>,Arg2>) -> Distribution<Real[_]> {
  if μ.r.hasMultivariateNormalInverseGamma(Σ.l) {
    μ.r.prune();
    let (ν, Λ, α, β) <- μ.r.getMultivariateNormalInverseGamma();
    let p <- ScaledMultivariateNormalInverseGammaMultivariateGaussian(μ.l,
        ν, Λ, α, β, Σ.r);
    μ.r.graft(p);
    return p;
  } else if Σ.l.hasInverseGamma() {
    Σ.l.prune();
    let (α, β) <- Σ.l.getInverseGamma();
    let p <- MultivariateNormalInverseGamma(μ, Σ.r, α, β);
    Σ.l.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussian<Multiply<Arg1,Random<Real[_]>>,
        Multiply<Arg2,Random<Real>>>>(μ, Σ);
  }
}

/*
 * Simulate a multivariate Gaussian distribution with a linear transformation
 * of a multivariate linear normal inverse-gamma prior.
 *
 * - A: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - Σ: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 */
function simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
    A:Real[_,_], ν:Real[_], Λ:Real[_,_], α:Real, β:Real, Σ:Real[_,_]) ->
    Real[_] {
  let n <- rows(A);
  let S <- cholinv(Λ);
  let μ <- S*ν;
  return simulate_multivariate_student_t(2.0*α, A*μ, 2.0*β*(Σ +
      outer(A*S, A)));
}

/*
 * Observe a multivariate Gaussian variate with a multivariate linear normal
 * inverse-gamma prior with linear transformation.
 *
 * - x: The variate.
 * - A: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - Σ: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(x:Arg1, A:Arg2, ν:Arg3, Λ:Arg4,
    α:Arg5, β:Arg6, Σ:Arg7) -> {
  let n <- length(x);
  let S <- cholinv(Λ);
  let μ <- S*ν;
  return logpdf_multivariate_student_t(x, 2.0*α, A*μ, 2.0*β*(Σ +
      outer(A*S, A)));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - ν: Prior precision times mean.
 * - Λ: Prior precision.
 * - Σ: Covariance scale.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `μ'`, `Λ'`, `β'`, `α'` and `β'`.
 */
function update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(x:Arg1, A:Arg2, ν:Arg3, Λ:Arg4,
    α:Arg5, β:Arg6, Σ:Arg7) -> {
  let n <- length(x);
  let L <- cholinv(Σ);
  let z <- L*x;
  let Λ' <- Λ + inner(A, L*A);
  let ν' <- ν + inner(A, z);
  let μ <- cholsolve(Λ, ν);
  let μ' <- cholsolve(Λ', ν');
  let α' <- α + 0.5*n;
  let β' <- β + 0.5*dot(x, z) + 0.5*dot(μ, ν) - 0.5*dot(μ', ν');
  return MultivariateNormalInverseGamma(ν', Λ', α', β');
}
