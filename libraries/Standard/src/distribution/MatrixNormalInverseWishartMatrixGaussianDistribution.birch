/**
 * Matrix Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) < Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Among-row concentration times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row concentration.
   */
  Λ:Arg3 <- Λ;

  /**
   * Among-column spread.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  C:Arg6 <- C;

  /**
   * Additional among-row spread.
   */
  Φ:Arg7 <- Φ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(value(A),
        value(N), value(Λ), value(Ψ), value(k), value(C), value(Φ));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(eval(A),
        eval(N), eval(Λ), eval(Ψ), eval(k), eval(C), eval(Φ));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X - value(C),
        value(A), value(N), value(Λ), value(Ψ), value(k), value(Φ));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real!? {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X - eval(C),
        eval(A), eval(N), eval(Λ), eval(Ψ), eval(k), eval(Φ));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(value(X - C),
        value(A), value(N), value(Λ), value(Ψ), value(k), value(Φ));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(box(X - C), A,
        N, Λ, Ψ, k, Φ);
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        box(this.getVariate() - C), A, N, Λ, Ψ, k, Φ));
  }

  override function constant() {
    super.constant();
    global.constant(A);
    global.constant(N);
    global.constant(Λ);
    global.constant(Ψ);
    global.constant(k);
    global.constant(C);
    global.constant(Φ);
  }
}

function MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> Distribution<Real[_,_]> {
  let L <- wrap(chol(Σ));
  let Λ <- wrap(cholinv(L));
  let N <- wrap(cholsolve(L, M));
  return wrap_matrix_normal_inverse_wishart_matrix_gaussian(A, N, Λ, chol(Ψ),
      k, C, chol(Φ));
}
function wrap_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return make_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(N), wrap(Λ), wrap(Ψ), wrap(k), wrap(C), wrap(Φ));
}
function make_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return construct<MatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, N, Λ, Ψ, k, C, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2,Arg3>(M:Add<Mul<Arg1,Random<Real[_,_]>>,
    Arg2>, Σ:Arg3, Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let A <- M.l.l;
  let M1 <- M.l.r;
  let C <- M.r;
  if (Ψ.hasNext() && Ψ.getNext().isMatrixNormalInverseWishart() &&
      Ψ.getNext(2) == M1) || (Ψ.hasSide() && Ψ.getSide() == M1) {
    M1.prune();
    let (N2, Λ1, Ψ1, k) <- Ψ.getNext().getMatrixNormalInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart_matrix_gaussian(A, N2, Λ1, Ψ1,
        k, C, chol(Σ));
    M1.setNext(p);
    Ψ.setNext(nil);
    M1.setSide(Ψ);
    Ψ.setSide(M1);
    return p;
  } else if Ψ.hasNext() && Ψ.getNext().isInverseWishart() {
    Ψ.prune();
    let L <- wrap(chol(Σ));
    let Λ <- wrap(cholinv(L));
    let N <- wrap(cholsolve(L, M));
    let (Ψ1, k) <- Ψ.getNext().getInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart(N, Λ, Ψ1, k);
    Ψ.setNext(p);
    return p;
  } else {
    return wrap_matrix_gaussian(M, chol(Σ), chol(Ψ));
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Mul<Arg1,Random<Real[_,_]>>, Σ:Arg2,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(M + 0.0, Σ, Ψ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg>(M:Random<Real[_,_]>, Σ:Arg,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(1.0*M + 0.0, Σ, Ψ);
}

/*
 * Simulate matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * - A: Scale.
 * - N: Among-row concentration times mean.
 * - Λ: Among-row concentration.
 * - Ψ: Among-column spread.
 * - k: Degrees of freedom.
 * - C: Offset.
 * - Φ: Additional among-row spread.
 *
 * Returns: the variate.
 */
function simulate_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  let L <- wrap(chol(Λ));
  let M <- wrap(A*cholsolve(L, N) + C);
  let Σ <- wrap(chol(inner(trisolve(L, transpose(A))) + triouter(Φ)));
  return simulate_matrix_t(k, M, Σ, Ψ);
}

/*
 * Observe matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * - Y: The variate, minus offset.
 * - A: Scale.
 * - N: Among-row concentration times mean.
 * - Λ: Among-row concentration.
 * - Ψ: Among-column spread.
 * - k: Degrees of freedom.
 * - Φ: Additional among-row spread.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  let L <- wrap(chol(Λ));
  let M <- wrap(A*cholsolve(L, N));
  let Σ <- wrap(chol(inner(trisolve(L, transpose(A))) + triouter(Φ)));
  return logpdf_matrix_t(Y, k, M, Σ, Ψ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - Y: The variate, minus offset.
 * - A: Scale.
 * - N: Prior among-row concentration times mean.
 * - Λ: Prior among-row concentration.
 * - Ψ: Prior among-column spread.
 * - k: Prior degrees of freedom.
 * - Φ: Additional among-row spread.
 *
 * Returns: the posterior hyperparameters `N'`, `Λ'`, `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  let n <- rows(Y);
  let Λ' <- wrap(Λ + inner(trisolve(Φ, A)));
  let N' <- wrap(N + transpose(A)*cholsolve(Φ, Y));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Φ, Y)) +
      inner(trisolve(chol(Λ), N)) - inner(trisolve(chol(Λ'), N')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(N', Λ', Ψ', k');
}
