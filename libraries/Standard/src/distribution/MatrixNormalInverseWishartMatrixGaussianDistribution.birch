/**
 * Matrix Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) < Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  M:Arg2 <- M;

  /**
   * Among-row covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Among-column covariance.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  C:Arg6 <- C;

  /**
   * Among-row covariance.
   */
  Φ:Arg7 <- Φ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(value(A),
        value(M), value(Σ), value(Ψ), value(k), value(C), value(Φ));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(eval(A),
        eval(M), eval(Σ), eval(Ψ), eval(k), eval(C), eval(Φ));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X - value(C),
        value(A), value(M), value(Σ), value(Ψ), value(k), value(Φ));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real!? {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X - eval(C),
        eval(A), eval(M), eval(Σ), eval(Ψ), eval(k), eval(Φ));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(value(X - C),
        value(A), value(M), value(Σ), value(Ψ), value(k), value(Φ));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(box(X - C), A,
        M, Σ, Ψ, k, Φ);
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        box(this.getVariate() - C), A, M, Σ, Ψ, k, Φ));
  }

  override function constant() {
    super.constant();
    global.constant(A);
    global.constant(M);
    global.constant(Σ);
    global.constant(Ψ);
    global.constant(k);
    global.constant(C);
    global.constant(Φ);
  }
}

function MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> Distribution<Real[_,_]> {
  return wrap_matrix_normal_inverse_wishart_matrix_gaussian(A, M,
      chol(Σ), chol(Ψ), k, C, chol(Φ));
}
function wrap_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return make_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(C), wrap(Φ));
}
function make_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return construct<MatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, M, Σ, Ψ, k, C, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2,Arg3>(M:Add<Mul<Arg1,Random<Real[_,_]>>,
    Arg2>, Σ:Arg3, Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let A <- M.l.l;
  let M1 <- M.l.r;
  let C <- M.r;
  if (Ψ.hasNext() && Ψ.getNext().isMatrixNormalInverseWishart() &&
      Ψ.getNext(2) == M1) || (Ψ.hasSide() && Ψ.getSide() == M1) {
    M1.prune();
    let (M2, Σ1, Ψ1, k) <- Ψ.getNext().getMatrixNormalInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart_matrix_gaussian(A, M2, Σ1, Ψ1,
        k, C, chol(Σ));
    M1.setNext(p);
    Ψ.setNext(nil);
    M1.setSide(Ψ);
    Ψ.setSide(M1);
    return p;
  } else if Ψ.hasNext() && Ψ.getNext().isInverseWishart() {
    Ψ.prune();
    let (Ψ1, k) <- Ψ.getNext().getInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart(M, chol(Σ), Ψ1, k);
    Ψ.setNext(p);
    return p;
  } else {
    return wrap_matrix_gaussian(M, chol(Σ), chol(Ψ));
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Mul<Arg1,Random<Real[_,_]>>, Σ:Arg2,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(M + 0.0, Σ, Ψ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg>(M:Random<Real[_,_]>, Σ:Arg,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(1.0*M + 0.0, Σ, Ψ);
}

/*
 * Simulate matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * - A: Scale.
 * - M: Mean.
 * - Σ: Among-row spread.
 * - Ψ: Among-column spread.
 * - k: Degrees of freedom.
 * - C: Offset.
 * - Φ: Among-row spread.
 *
 * Returns: the variate.
 */
function simulate_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return simulate_matrix_t(k, A*M + C, chol(A*triouter(Σ)*transpose(A) +
      triouter(Φ)), Ψ);
}

/*
 * Observe matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * - Y: The variate, minus offset.
 * - A: Scale.
 * - M: Mean.
 * - Σ: Among-row spread.
 * - Ψ: Among-column spread.
 * - k: Degrees of freedom.
 * - C: Offset.
 * - Φ: Among-row spread.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  return logpdf_matrix_t(Y, k, A*M, chol(A*triouter(Σ)*transpose(A) +
      triouter(Φ)), Ψ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - Y: The variate, minus offset.
 * - A: Scale.
 * - M: Prior precision times mean matrix.
 * - Σ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - Φ: Among-row covariance.
 * - N: Precomputed marginal mean.
 * - T: Precomputed marginal among-row covariance.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  let n <- rows(Y);
  let Σ' <- wrap(chol(cholinv(chol(cholinv(Σ) + transpose(A)*cholsolve(Φ, A)))));
  let M' <- wrap(triouter(Σ')*(cholsolve(Σ, M) + transpose(A)*cholsolve(Φ, Y)));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Φ, Y)) +
      inner(trisolve(Σ, M)) - inner(trisolve(Σ', M')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
