/**
 * Wishart distribution.
 */
final class WishartDistribution<Arg1,Arg2>(Ψ:Arg1, k:Arg2) < Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  Ψ:Arg1 <- Ψ;
  
  /**
   * Degrees of freedom.
   */
  k:Arg2 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_wishart(value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_wishart(eval(Ψ), eval(k));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_wishart(X, value(Ψ), value(k));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real!? {
    return logpdf_wishart(X, eval(Ψ), eval(k));
  }

  override function hitch(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return box(logpdf_wishart(X, Ψ, k));
  }

  override function constant() {
    super.constant();
    global.constant(Ψ);
    global.constant(k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Wishart");
    buffer.set("Ψ", value(Ψ));
    buffer.set("k", value(k));
  }
}

/**
 * Create Wishart distribution.
 */
function Wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> Distribution<Real[_,_]> {
  return wrap_wishart(chol(Ψ), k);
}
function wrap_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  return make_wishart(wrap(Ψ), wrap(k));
}
function make_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  return construct<WishartDistribution<Arg1,Arg2>>(Ψ, k);
}

/*
 * Simulate a Wishart distribution.
 *
 * - Ψ: Scale matrix.
 * - k: Degrees of freedom.
 */
function simulate_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  assert rows(Ψ) == columns(Ψ);
  let n <- rows(Ψ);
  cpp{{
  auto A = numbirch::standard_wishart(k, n);
  }}
  return triouter(trimul(Ψ, A));
}

/*
 * Observe a Wishart variate.
 *
 * - X: The variate.
 * - Ψ: Scale matrix.
 * - k: Degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_wishart<Arg1,Arg2,Arg3>(X:Arg1, Ψ:Arg2, k:Arg3) -> {
  let p <- columns(X);
  let l <- wrap(k + (p + 1.0));
  let L <- wrap(chol(X));
  return 0.5*(k*lcholdet(L) - frobenius(trisolve(Ψ, L)) -
      l*(p*log(2.0) + lcholdet(Ψ))) - lgamma(0.5*l, p);
}
