/**
 * Beta-Bernoulli distribution.
 */
final class BetaBernoulliDistribution<Arg1,Arg2>(α:Arg1, β:Arg2) <
    Distribution<Boolean> {
  /**
   * Prior first shape of success probability,
   */
  α:Arg1 <- α;

  /**
   * Prior second shape of success probability.
   */
  β:Arg2 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Boolean! {
    return simulate_beta_bernoulli(value(α), value(β));
  }
  
  override function simulateLazy() -> Boolean!? {
    return simulate_beta_bernoulli(eval(α), eval(β));
  }
  
  override function logpdf(x:Boolean!) -> Real! {
    return logpdf_beta_bernoulli(x, value(α), value(β));
  }

  override function logpdfLazy(x:Boolean!) -> Real!? {
    return logpdf_beta_bernoulli(x, eval(α), eval(β));
  }

  override function update(x:Boolean!) -> Delay? {
    return update_beta_bernoulli(x, value(α), value(β));
  }

  override function updateLazy(x:Expression<Boolean>) -> Delay? {
    return update_beta_bernoulli(x, α, β);
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_beta_bernoulli(this.getVariate(), α, β));
  }

  override function constant() {
    super.constant();
    global.constant(α);
    global.constant(β);
  }
}

function BetaBernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) -> Distribution<Boolean> {
  return wrap_beta_bernoulli(α, β);
}
function wrap_beta_bernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return make_beta_bernoulli(wrap(α), wrap(β));
}
function make_beta_bernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return construct<BetaBernoulliDistribution<Arg1,Arg2>>(α, β);
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli(ρ:Random<Real>) -> Distribution<Boolean> {
  if ρ.hasNext() && ρ.getNext().isBeta() {
    ρ.prune();
    let (α, β) <- ρ.getNext().getBeta()!;
    let p <- wrap_beta_bernoulli(α, β);
    ρ.setNext(p);
    return p;
  } else {
    return wrap_bernoulli(ρ);
  }
}

/*
 * Simulate a beta-bernoulli distribution.
 *
 * @param α Shape.
 * @param β Shape.
 */
function simulate_beta_bernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return simulate_bernoulli(α/(α + β));
}

/*
 * Observe a beta-bernoulli variate.
 *
 * @param x The variate.
 * @param α Shape.
 * @param β Shape.
 *
 * @return the log probability mass.
 */
function logpdf_beta_bernoulli<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return where(x, log(α), log(β)) - log(α + β);
}

/*
 * Update the parameters of a Beta distribution with a Bernoulli likelihood.
 *
 * @param x The variate.
 * @param α Prior first shape.
 * @param β Prior second shape.
 *
 * @return the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_bernoulli<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return wrap_beta(where(x, α + 1.0, α), where(x, β, β + 1.0));
}
