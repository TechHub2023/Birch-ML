/**
 * Linear-normal-inverse-gamma-Gaussian distribution where
 * components have independent and identical variance.
 */
final class LinearMultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, ν:Arg2, Λ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, Σ:Arg7) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Precision times mean.
   */
  ν:Arg2 <- ν;

  /**
   * Precision.
   */
  Λ:Arg3 <- Λ;

  /**
   * Variance shape.
   */
  α:Arg4 <- α;

  /**
   * Variance scale accumulator.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Covariance scale.
   */
  Σ:Arg7 <- Σ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        value(A), value(ν), value(Λ), value(α), value(β), value(Σ)) +
        value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        peak(A), peak(ν), peak(Λ), peak(α), peak(β), peak(Σ)) + peak(c);
  }
  
  override function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - value(c), value(A), value(ν), value(Λ), value(α), value(β),
        value(Σ));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, ν, Λ, α, β, Σ));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - value(c), value(A), value(ν), value(Λ), value(α), value(β),
        value(Σ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, ν, Λ, α, β, Σ);
  }
}

function LinearMultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, ν:Arg2, Λ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, Σ:Arg7) -> {
  return construct<LinearMultivariateNormalInverseGammaMultivariateGaussian<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, ν, Λ, α, β, c, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(
    μ:MultiplyAdd<Arg1,Random<Real[_]>,Arg2>,
    Σ:Multiply<Arg3,Random<Real>>) -> Distribution<Real[_]> {
  if μ.m!.hasMultivariateNormalInverseGamma(Σ.r!) {
    μ.m!.prune();
    let (ν, Λ, α, β) <- μ.m!.getMultivariateNormalInverseGamma();
    let p <- LinearMultivariateNormalInverseGammaMultivariateGaussian(μ.l!,
        ν, Λ, α, β, μ.r!, Σ.l!);
    μ.m!.graft(p);
    return p;
  } else if Σ.r!.hasInverseGamma() {
    Σ.r!.prune();
    let (α, β) <- Σ.r!.getInverseGamma();
    let p <- MultivariateNormalInverseGamma(μ, Σ.l!, α, β);
    Σ.r!.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussian<MultiplyAdd<Arg1,Random<Real[_]>,
        Arg2>,Multiply<Arg3,Random<Real>>>>(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(
    μ:MultiplyAdd<Arg1,Random<Real[_]>,Arg2>,
    Σ:Multiply<Random<Real>,Arg3>) -> Distribution<Real[_]> {
  if μ.m!.hasMultivariateNormalInverseGamma(Σ.l!) {
    μ.m!.prune();
    let (ν, Λ, α, β) <- μ.m!.getMultivariateNormalInverseGamma();
    let p <- LinearMultivariateNormalInverseGammaMultivariateGaussian(μ.l!,
        ν, Λ, α, β, μ.r!, Σ.r!);
    μ.m!.graft(p);
    return p;
  } else if Σ.l!.hasInverseGamma() {
    Σ.l!.prune();
    let (α, β) <- Σ.l!.getInverseGamma();
    let p <- MultivariateNormalInverseGamma(μ, Σ.r!, α, β);
    Σ.l!.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussian<MultiplyAdd<Arg1,Random<Real[_]>,
        Arg2>,Multiply<Random<Real>,Arg3>>>(μ, Σ);
  }
}
