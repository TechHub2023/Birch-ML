/**
 * Gaussian distribution.
 */
class Gaussian(μ:Expression<Real>, σ2:Expression<Real>) < Distribution<Real> {
  /**
   * Mean.
   */
  μ:Expression<Real> <- μ;

  /**
   * Variance.
   */
  σ2:Expression<Real> <- σ2;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_gaussian(μ.value(), σ2.value());
  }

  function simulateLazy() -> Real? {
    return simulate_gaussian(μ.eval(), σ2.eval());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_gaussian(x, μ.value(), σ2.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_gaussian(x, μ, σ2);
  }
  
  function cdf(x:Real) -> Real? {
    return cdf_gaussian(x, μ.value(), σ2.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_gaussian(P, μ.value(), σ2.value());
  }

  function graftGaussian() -> Gaussian? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Gaussian");
    buffer.set("μ", μ);
    buffer.set("σ2", σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Expression<Real>, σ2:Expression<Real>) -> Distribution<Real> {
  m1:TransformLinear<NormalInverseGamma>?;
  m2:TransformDot<MultivariateNormalInverseGamma>?;
  m3:NormalInverseGamma?;
  m4:TransformLinear<Gaussian>?;
  m5:TransformDot<MultivariateGaussian>?;
  m6:Gaussian?;
  s2:InverseGamma?;

  let compare <- Random<Real>?(σ2);
  if compare? && compare!.hasDistribution() {
    /* for normal-inverse-gamma relationships, the same inverse gamma
     * distribution must occur in the prior and likelihood */
    let p <- compare!.getDistribution();
    if (m1 <- μ.graftLinearNormalInverseGamma(p))? {
      return LinearNormalInverseGammaGaussian(m1!.a, m1!.x, m1!.c);
    } else if (m2 <- μ.graftDotMultivariateNormalInverseGamma(p))? {
      return LinearMultivariateNormalInverseGammaGaussian(m2!.a, m2!.x, m2!.c);
    } else if (m3 <- μ.graftNormalInverseGamma(p))? {
      return NormalInverseGammaGaussian(m3!);
    }
  }
  if (m4 <- μ.graftLinearGaussian())? {
    return LinearGaussianGaussian(m4!.a, m4!.x, m4!.c, σ2);
  } else if (m5 <- μ.graftDotMultivariateGaussian())? {
    return LinearMultivariateGaussianGaussian(m5!.a, m5!.x, m5!.c, σ2);
  } else if (m6 <- μ.graftGaussian())? {
    return GaussianGaussian(m6!, σ2);
  } else if (s2 <- σ2.graftInverseGamma())? {
    return NormalInverseGamma(μ, box(1.0), s2!);
  } else {
    return construct<Gaussian>(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Expression<Real>, σ2:Real) -> Distribution<Real> {
  return Gaussian(μ, box(σ2));
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Real, σ2:Expression<Real>) -> Distribution<Real> {
  return Gaussian(box(μ), σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Real, σ2:Real) -> Distribution<Real> {
  return Gaussian(box(μ), box(σ2));
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real>, σ2:Expression<Real>,
    τ2:Expression<Real>) -> Distribution<Real> {
  s1:InverseGamma?;
  if (s1 <- σ2.graftInverseGamma())? {
    return NormalInverseGamma(μ, τ2, s1!);
  } else if (s1 <- τ2.graftInverseGamma())? {
    return NormalInverseGamma(μ, σ2, s1!);
  } else {
    return construct<Gaussian>(μ, σ2*τ2);
  }
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real>, σ2:Expression<Real>,
    τ2:Real) -> Distribution<Real> {
  return Gaussian(μ, σ2, box(τ2));
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real>, σ2:Real, τ2:Expression<Real>) ->
    Distribution<Real> {
  return Gaussian(μ, box(σ2), τ2);
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real>, σ2:Real, τ2:Real) ->
    Distribution<Real> {
  return Gaussian(μ, σ2*τ2);
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Real, σ2:Expression<Real>, τ2:Expression<Real>) ->
    Distribution<Real> {
  return Gaussian(box(μ), σ2, τ2);
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Real, σ2:Expression<Real>, τ2:Real) ->
    Distribution<Real> {
  return Gaussian(box(μ), σ2, box(τ2));
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Real, σ2:Real, τ2:Expression<Real>) ->
    Distribution<Real> {
  return Gaussian(box(μ), box(σ2), τ2);
}

/**
 * Create Gaussian distribution where the variance is given as a product of
 * two scalars. This is usually used for establishing a normal-inverse-gamma
 * distribution, where one of the arguments is inverse-gamma distributed.
 */
function Gaussian(μ:Real, σ2:Real, τ2:Real) -> Distribution<Real> {
  return Gaussian(μ, σ2*τ2);
}
