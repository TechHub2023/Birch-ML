/**
 * Gaussian distribution.
 */
class Gaussian(μ:Expression<Real>, σ2:Expression<Real>) < Distribution<Real> {
  /**
   * Mean.
   */
  μ:Expression<Real> <- μ;

  /**
   * Variance.
   */
  σ2:Expression<Real> <- σ2;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_gaussian(μ.value(), σ2.value());
  }

  function simulateLazy() -> Real? {
    return simulate_gaussian(μ.eval(), σ2.eval());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_gaussian(x, μ.value(), σ2.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_gaussian(x, μ, σ2);
  }
  
  function cdf(x:Real) -> Real? {
    return cdf_gaussian(x, μ.value(), σ2.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_gaussian(P, μ.value(), σ2.value());
  }

  function graftGaussian() -> Gaussian? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Gaussian");
    buffer.set("μ", μ);
    buffer.set("σ2", σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Right>(μ:Left, σ2:Right) -> {
  return construct<Gaussian>(box(μ), box(σ2));
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle,Right>(μ:MultiplyAdd<Left,Random<Real>,Middle>, σ2:Right) -> Distribution<Real> {
  let p <- μ.m!.graftGaussian();
  if p? {
    return LinearGaussianGaussian(μ.l!, p!, μ.r!, σ2);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle,Right>(μ:DotAdd<Left,Random<Real[_]>,Middle>, σ2:Right) -> Distribution<Real> {
  let p <- μ.m!.graftMultivariateGaussian();
  if p? {
    return LinearMultivariateGaussianGaussian(μ.l!, p!, μ.r!, σ2);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Right>(μ:Random<Real>, σ2:Right) -> Distribution<Real> {
  let p <- μ.graftGaussian();
  if p? {
    return GaussianGaussian(p!, σ2);
  } else {
    return construct<Gaussian>(μ, box(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Right>(μ:Left, σ2:Multiply<Right,Random<Real>>) -> Distribution<Real> {
  s2:InverseGamma?;
  if (s2 <- σ2.r!.graftInverseGamma())? {
    return NormalInverseGamma(μ, σ2.l!, s2!);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Right>(μ:Left, σ2:Multiply<Random<Real>,Right>) -> Distribution<Real> {
  s2:InverseGamma?;
  if (s2 <- σ2.l!.graftInverseGamma())? {
    return NormalInverseGamma(μ, σ2.r!, s2!);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left>(μ:Left, σ2:Random<Real>) -> Distribution<Real> {
  s2:InverseGamma?;
  if (s2 <- σ2.graftInverseGamma())? {
    return NormalInverseGamma(μ, box(1.0), s2!);
  } else {
    return construct<Gaussian>(box(μ), σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle>(μ:MultiplyAdd<Left,Random<Real>,Middle>, σ2:Random<Real>) -> Distribution<Real> {
  let p <- σ2.graftInverseGamma();
  if p? {
    let q <- μ.m!.graftNormalInverseGamma(p!);
    if q? {
      return LinearNormalInverseGammaGaussian(μ.l!, q!, μ.r!);
    } else {
      return NormalInverseGamma(μ, box(1.0), p!);
    }
  } else {
    return construct<Gaussian>(box(μ), σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle>(μ:DotAdd<Left,Random<Real[_]>,Middle>, σ2:Random<Real>) -> Distribution<Real> {
  let p <- σ2.graftInverseGamma();
  if p? {
    let q <- μ.m!.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return LinearMultivariateNormalInverseGammaGaussian(μ.l!, q!, μ.r!);
    } else {
      return NormalInverseGamma(μ, box(1.0), p!);
    }
  } else {
    return construct<Gaussian>(box(μ), σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Random<Real>, σ2:Random<Real>) -> Distribution<Real> {
  let p <- σ2.graftInverseGamma();
  if p? {
    let q <- μ.graftNormalInverseGamma(p!);
    if q? {
      return NormalInverseGammaGaussian(q!);
    } else {
      return NormalInverseGamma(μ, box(1.0), p!);
    }
  } else {
    return construct<Gaussian>(μ, σ2);
  }
}
