/**
 * Matrix normal-inverse-Wishart-Gaussian distribution.
 */
final class MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(N:Arg1, Λ:Arg2, Ψ:Arg3, k:Arg4, U:Arg5) < Distribution<Real[_,_]> {
  /**
   * Among-row precision times mean.
   */
  N:Arg1 <- N;

  /**
   * Among-row precision.
   */
  Λ:Arg2 <- Λ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg3 <- Ψ;
  
  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg4 <- k;

  /**
   * Among-row covariance.
   */
  U:Arg5 <- U;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(value(N),
        value(Λ), value(U), value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(peak(N),
        peak(Λ), peak(U), peak(Ψ), peak(k));
  }
  
  override function logpdf(X:Real[_,_]) -> Real {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X, value(N),
        value(Λ), value(U), value(Ψ), value(k));
  }

  override function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return box(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X, N, Λ,
        U, Ψ, k));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(X, value(N),
        value(Λ), value(U), value(Ψ), value(k));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(X, N, Λ,
        U, Ψ, k);
  }
}

function MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(N:Arg1, Λ:Arg2, Ψ:Arg3, k:Arg4, U:Arg5) -> {
  return construct<MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
      Arg4,Arg5>>(N, Λ, Ψ, k, U);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg>(M:Random<Real[_,_]>, U:Arg,
    V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  if M.hasMatrixNormalInverseWishart(V) {
    M.prune();
    let (N, Λ, Ψ, k) <- M.getMatrixNormalInverseWishart();
    let p <- MatrixNormalInverseWishartMatrixGaussian(N, Λ, Ψ, k, U);
    M.graft(p);
    return p;
  } else if V.hasInverseWishart() {
    V.prune();
    let (Ψ, k) <- V.getInverseWishart();
    let p <- MatrixNormalInverseWishart(M, U, Ψ, k);
    V.graft(p);
    return p;
  } else {
    return construct<MatrixGaussian<Random<Real[_,_]>,Arg,Random<Real[_,_]>>>(
        M, U, V);
  }
}

/*
 * Simulate a Gaussian distribution with matrix-normal-inverse-Wishart prior.
 *
 * - N: Precision times mean matrix.
 * - Λ: Precision.
 * - U: Among-row covariance.
 * - Ψ: Among-column covariance shape.
 * - k: Among-column covariance degrees of freedom.
 */
function simulate_matrix_normal_inverse_wishart_matrix_gaussian(N:Real[_,_],
    Λ:Real[_,_], U:Real[_,_], Ψ:Real[_,_], k:Real) -> Real[_,_] {
  let S <- cholinv(Λ);
  let M <- S*N;
  let Σ <- U + S;
  return simulate_matrix_t(k, M, Σ, Ψ);
}

/*
 * Observe a Gaussian variate with matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - N: Precision times mean matrix.
 * - Λ: Precision.
 * - U: Among-row covariance.
 * - Ψ: Among-column covariance shape.
 * - k: Among-column covariance degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(X:Arg1, N:Arg2, Λ:Arg3, U:Arg4, Ψ:Arg5, k:Arg6) -> {
  let S <- cholinv(Λ);
  let M <- S*N;
  let Σ <- U + S;
  return logpdf_matrix_t(X, k, M, Σ, Ψ);
}

/*
 * Update the parameters of a Gaussian variate with
 * matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - U: Among-row covariance.
 * - Ψ: Prior among-column covariance shape.
 * - k: Prior among-column covariance degrees of freedom.
 *
 * Returns: the posterior hyperparameters `N'`, `Λ'`, `V'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(X:Arg1, N:Arg2, Λ:Arg3, U:Arg4, Ψ:Arg5, k:Arg6) -> {
  let n <- rows(X);
  let L <- cholinv(U);
  let Z <- L*X;
  let Λ' <- Λ + L;
  let N' <- N + Z;
  let M <- cholsolve(Λ, N);
  let M' <- cholsolve(Λ', N');
  let Ψ' <- Ψ + inner(X, Z) + inner(M, N) - inner(M', N');
  let k' <- k + n;
  return MatrixNormalInverseWishart(N', Λ', Ψ', k');
}
