/**
 * Multivariate Gaussian variate with linear transformation of
 * multivariate-normal-inverse-Wishart prior.
 */
final class LinearMultivariateNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4,
    k:Arg5, c:Arg6, ω2:Arg7) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  σ2:Arg3 <- σ2;
  
  /**
   * Spread.
   */
  Ψ:Arg4 <- Ψ;
  
  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood covariance.
   */
  ω2:Arg7 <- ω2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        value(A), value(μ), value(σ2), value(Ψ), value(k), value(ω2)) +
        value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        eval(A), eval(μ), eval(σ2), eval(Ψ), eval(k), eval(ω2)) + eval(c);
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(σ2), value(Ψ), value(k),
        value(ω2));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), A, μ, σ2, Ψ, k, ω2));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(σ2), value(Ψ), value(k),
        value(ω2));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), A, μ, σ2, Ψ, k, ω2);
  }
}

function LinearMultivariateNormalInverseWishartMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return wrap_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
      A, μ, σ2, chol(Ψ), k, c, ω2);
}
function wrap_linear_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4,
    k:Arg5, c:Arg6, ω2:Arg7) -> {
  return make_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
      wrap(A), wrap(μ), wrap(σ2), wrap(Ψ), wrap(k), wrap(c), wrap(ω2));
}
function make_linear_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4,
    k:Arg5, c:Arg6, ω2:Arg7) -> {
  return construct<LinearMultivariateNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, μ, σ2, Ψ, k, c, ω2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(
      μ:OpAdd<OpMul<Arg1,Random<Real[_]>>,Arg2>, Σ:Random<Real[_,_]>) ->
      Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseWishart() && μ.l.r.isGrandChildOf(Σ) {
    let (μ1, σ2, Ψ, k) <- μ.l.r.getMultivariateNormalInverseWishart();
    let p <- wrap_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
        μ.l.l, μ1, σ2, Ψ, k, μ.r, 1.0);
    μ.l.r.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.l.r.join(Σ);
    return p;
  } else {
    Σ.prune();
    if Σ.hasInverseWishart() {
      let (Ψ, k) <- Σ.getInverseWishart();
      let p <- wrap_multivariate_normal_inverse_wishart(μ, 1.0, Ψ, k);
      Σ.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Σ));
    }
  }
}
