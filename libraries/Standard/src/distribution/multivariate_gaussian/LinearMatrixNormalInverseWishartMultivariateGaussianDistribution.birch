/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class LinearMatrixNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5,
    c:Arg6) < ScaledMatrixNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5>(a, M, Σ, Ψ, k) {
  /**
   * Offset.
   */
  c:Arg6 <- c;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return super.simulate() + value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return super.simulateLazy()! + eval(c);
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return super.logpdf(x - value(c));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return super.logpdfLazy(box(x - c));
  }

  override function update(x:Real[_]) -> Delay? {
    return super.update(x - value(c));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return super.updateLazy(box(x - c));
  }
}

function LinearMatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6) -> {
  return wrap_linear_matrix_normal_inverse_wishart_multivariate_gaussian(a, M,
      chol(Σ), chol(Ψ), k, c);
}
function wrap_linear_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5,
    c:Arg6) -> {
  return make_linear_matrix_normal_inverse_wishart_multivariate_gaussian(
        wrap(a), wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(c));
}
function make_linear_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5,
    c:Arg6) -> {
  return construct<LinearMatrixNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(a, M, Σ, Ψ, k, c);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(
    μ:OpAdd<Inner<Random<Real[_,_]>,Arg1>,Arg2>, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  μ.l.l.prune();
  if μ.l.l.hasMatrixNormalInverseWishart()&& μ.l.l.isGrandChildOf(Σ) {
    let (M, Σ1, Ψ, k) <- μ.l.l.getMatrixNormalInverseWishart();
    let p <- wrap_linear_matrix_normal_inverse_wishart_multivariate_gaussian(
        μ.l.r, M, Σ1, Ψ, k, μ.r);
    μ.l.l.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.l.l.join(Σ);
    return p;
  } else {
    Σ.prune();
    if Σ.hasInverseWishart() {
      let (Ψ, k) <- Σ.getInverseWishart();
      let p <- wrap_multivariate_normal_inverse_wishart(μ, 1.0, Ψ, k);
      Σ.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Σ));
    }
  }
}
