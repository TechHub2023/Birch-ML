/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class LinearMultivariateGaussianMultivariateGaussian(
    A:Expression<Real[_,_]>, m:MultivariateGaussian, c:Expression<Real[_]>,
    S:Expression<Real[_,_]>) < MultivariateGaussian(box(A*m.μ + c),
    box(A*m.Σ*transpose(A) + S)) {
  /**
   * Scale.
   */
  A:Expression<Real[_,_]> <- A;
    
  /**
   * Mean.
   */
  m:MultivariateGaussian <- m;

  /**
   * Offset.
   */
  c:Expression<Real[_]> <- c;
  
  /**
   * Likelihood covariance.
   */
  S:Expression<Real[_,_]> <- S;

  function update(x:Real[_]) {
    (m.μ, m.Σ) <- box(update_scaled_multivariate_gaussian_multivariate_gaussian(
        x - c.value(), A.value(), m.μ.value(), m.Σ.value(), S.value()));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (m.μ, m.Σ) <- update_lazy_scaled_multivariate_gaussian_multivariate_gaussian(
        box(x - c), A, m.μ, m.Σ, S);
  }

  function link() {
    m.setChild(this);
  }
  
  function unlink() {
    m.releaseChild(this);
  }
}

function LinearMultivariateGaussianMultivariateGaussian<Left,Middle,Right>(
    A:Left, μ:MultivariateGaussian, c:Middle, Σ:Right) -> {
  m:LinearMultivariateGaussianMultivariateGaussian(box(A), μ, box(c), box(Σ));
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Middle,Right>(
    μ:MultiplyAdd<Left,Random<Real[_]>,Middle>, Σ:Right) ->
    Distribution<Real[_]> {
  let p <- μ.m!.graftMultivariateGaussian();
  if p? {
    return LinearMultivariateGaussianMultivariateGaussian(μ.l!, p!, μ.r!, Σ);
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}
