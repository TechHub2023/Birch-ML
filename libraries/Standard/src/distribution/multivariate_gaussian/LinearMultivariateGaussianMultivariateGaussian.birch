/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class LinearMultivariateGaussianMultivariateGaussian(
    A:Expression<Real[_,_]>, m:MultivariateGaussian, c:Expression<Real[_]>,
    S:Expression<Real[_,_]>) < MultivariateGaussian(box(A*m.μ + c),
    box(A*m.Σ*transpose(A) + S)) {
  /**
   * Scale.
   */
  A:Expression<Real[_,_]> <- A;
    
  /**
   * Mean.
   */
  m:MultivariateGaussian <- m;

  /**
   * Offset.
   */
  c:Expression<Real[_]> <- c;
  
  /**
   * Likelihood covariance.
   */
  S:Expression<Real[_,_]> <- S;

  function update(x:Real[_]) {
    (m.μ, m.Σ) <- box(update_linear_multivariate_gaussian_multivariate_gaussian(x, A.value(), m.μ.value(), m.Σ.value(), c.value(), S.value()));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (m.μ, m.Σ) <- update_lazy_linear_multivariate_gaussian_multivariate_gaussian(x, A, m.μ, m.Σ, c, S);
  }

  function link() {
    m.setChild(this);
  }
  
  function unlink() {
    m.releaseChild(this);
  }
}

function LinearMultivariateGaussianMultivariateGaussian<Arg1,Arg3,Arg4>(A:Arg1, μ:MultivariateGaussian, c:Arg3, Σ:Arg4) -> {
  m:LinearMultivariateGaussianMultivariateGaussian(box(A), μ, box(c), box(Σ));
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Middle,Right>(μ:MultiplyAdd<Left,Random<Real[_]>,Middle>, Σ:Right) -> Distribution<Real[_]> {
  let p <- μ.m!.graftMultivariateGaussian();
  if p? {
    return LinearMultivariateGaussianMultivariateGaussian(μ.l!, p!, μ.r!, Σ);
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - S: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_linear_multivariate_gaussian_multivariate_gaussian(x:Real[_],
    A:Real[_,_], μ:Real[_], Σ:Real[_,_], c:Real[_], S:Real[_,_]) -> (Real[_], Real[_,_]) {
  let K' <- Σ*transpose(solve(A*Σ*transpose(A) + S, A));
  let μ' <- μ + K'*(x - A*μ - c);
  let Σ' <- Σ - K'*A*Σ;
  return (μ', Σ');
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - S: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_lazy_linear_multivariate_gaussian_multivariate_gaussian(
    x:Expression<Real[_]>, A:Expression<Real[_,_]>, μ:Expression<Real[_]>,
    Σ:Expression<Real[_,_]>, c:Expression<Real[_]>, S:Expression<Real[_,_]>) ->
    (Expression<Real[_]>, Expression<Real[_,_]>) {
  let K' <- Σ*transpose(solve(A*Σ*transpose(A) + S, A));
  let μ' <- μ + K'*(x - A*μ - c);
  let Σ' <- Σ - K'*A*Σ;
  return (box(μ'), box(Σ'));
}
