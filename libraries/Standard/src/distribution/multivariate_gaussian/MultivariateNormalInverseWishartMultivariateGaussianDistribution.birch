/**
 * Multivariate normal-inverse-Wishart-Gaussian distribution.
 */
final class MultivariateNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5>(μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4, ω2:Arg5) <
    MultivariateTDistribution<Arg4,Arg1,Expression<Real[_,_]>>(k, μ,
    box(sqrt(σ2 + ω2)*Ψ)) {
  /**
   * Scale.
   */
  σ2:Arg2 <- σ2;
  
  /**
   * Spread.
   */
  Ψ:Arg3 <- Ψ;

  /**
   * Likelihood scale.
   */
  ω2:Arg5 <- ω2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_wishart_multivariate_gaussian(x,
        value(super.μ), value(σ2), value(Ψ), value(super.k), value(ω2));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_wishart_multivariate_gaussian(x,
        super.μ, σ2, Ψ, super.k, ω2);
  }
}

function MultivariateNormalInverseWishartMultivariateGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5>(μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4, ω2:Arg5) -> {
  return wrap_multivariate_normal_inverse_wishart_multivariate_gaussian(μ,
      chol(σ2), chol(Ψ), k, chol(ω2));
}
function wrap_multivariate_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4, ω2:Arg5) -> {
  return make_multivariate_normal_inverse_wishart_multivariate_gaussian(
      wrap(μ), wrap(σ2), wrap(Ψ), wrap(k), wrap(ω2));
}
function make_multivariate_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4, ω2:Arg5) -> {
  return construct<MultivariateNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>>(μ, σ2, Ψ, k, ω2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian(μ:Random<Real[_]>, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  μ.prune();
  if μ.hasMultivariateNormalInverseWishart() && μ.isGrandChildOf(Σ) {
    let (μ1, σ2, Ψ, k) <- μ.getMultivariateNormalInverseWishart();
    let p <- wrap_multivariate_normal_inverse_wishart_multivariate_gaussian(
        μ1, σ2, Ψ, k, 1.0);
    μ.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.join(Σ);
    return p;
  } else {
    Σ.prune();
    if Σ.hasInverseWishart() {
      let (Ψ, k) <- Σ.getInverseWishart();
      let p <- wrap_multivariate_normal_inverse_wishart(μ, 1.0, Ψ, k);
      Σ.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Σ));
    }
  }
}

/*
 * Simulate a Gaussian distribution with multivariate-normal-inverse-Wishart prior.
 *
 * - μ: Mean.
 * - σ2: Scale.
 * - Ψ: Spread.
 * - k: Degrees of freedom.
 * - ω2: Likelihood scale.
 */
function simulate_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5>(μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4, ω2:Arg5) -> {
  return simulate_multivariate_t(k, μ, sqrt(σ2 + ω2)*Ψ);
}

/*
 * Observe a Gaussian variate with multivariate-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Covariance.
 * - Ψ: Among-column covariance shape.
 * - k: Among-column covariance degrees of freedom.
 * - ω2: Among-row covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(x:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) -> {
  return logpdf_multivariate_t(x, k, μ, sqrt(σ2 + ω2)*Ψ);
}

/*
 * Update the parameters of a Gaussian variate with
 * multivariate-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Covariance.
 * - Ψ: Prior among-column covariance shape.
 * - k: Prior among-column covariance degrees of freedom.
 * - ω2: Among-row covariance.
 *
 * Returns: the posterior hyperparameters `μ'`, `σ2'`, `Ψ'` and `k'`.
 */
function update_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(x:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) -> {
  let l <- wrap(σ2/(σ2 + ω2));
  let μ' <- wrap(μ + l*(x - μ));
  let σ2' <- wrap(σ2 - l*σ2);
  let Ψ' <- chol(triouter(Ψ) + outer(x - μ)*σ2'/σ2);
  let k' <- k + 1;
  return wrap_multivariate_normal_inverse_wishart(μ', σ2', Ψ', k');
}
