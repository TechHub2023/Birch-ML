/**
 * Multivariate Gaussian-Gaussian distribution.
 */
final class MultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,Arg3>(μ:Arg1,
    Σ:Arg2, S:Arg3) < Distribution<Real[_]> {
  /**
   * Mean of mean.
   */
  μ:Arg1 <- μ;

  /**
   * Covariance of mean.
   */
  Σ:Arg2 <- Σ;

  /**
   * Covariance.
   */
  S:Arg3 <- S;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_multivariate_gaussian_multivariate_gaussian(value(μ),
        value(Σ), value(S));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_multivariate_gaussian_multivariate_gaussian(eval(μ),
        eval(Σ), eval(S));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_multivariate_gaussian_multivariate_gaussian(x, value(μ),
        value(Σ), value(S));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_multivariate_gaussian_multivariate_gaussian(x, μ, Σ,
        S));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x, value(μ),
        value(Σ), value(S));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x, μ, Σ, S);
  }

  override function isMultivariateGaussian() -> Boolean {
    return true;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    return box(μ, chol(triouter(Σ) + triouter(S)));
  }
}

function MultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3>(μ:Arg1,
    Σ:Arg2, S:Arg3) -> {
  return wrap_multivariate_gaussian_multivariate_gaussian(μ, chol(Σ),
      chol(S));
}
function wrap_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3>(
    μ:Arg1, Σ:Arg2, S:Arg3) -> {
  return make_multivariate_gaussian_multivariate_gaussian(wrap(μ), wrap(Σ),
      wrap(S));
}
function make_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3>(
    μ:Arg1, Σ:Arg2, S:Arg3) -> {
  return construct<MultivariateGaussianMultivariateGaussianDistribution<Arg1,
      Arg2,Arg3>>(μ, Σ, S);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>, Σ:Arg) ->
    Distribution<Real[_]> {
  μ.prune();
  if μ.hasMultivariateGaussian() {
    let (m, S) <- μ.getMultivariateGaussian();
    let p <- wrap_multivariate_gaussian_multivariate_gaussian(m, S, chol(Σ));
    μ.graft(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, chol(Σ));
  }
}

/*
 * Simulate a multivariate Gaussian distribution with a multivariate Gaussian
 * prior on the mean.
 *
 * - μ: Prior mean vector.
 * - Σ: Prior covariance matrix.
 * - S: Covariance matrix.
 */
function simulate_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3>(
      μ:Arg1, Σ:Arg2, S:Arg3) -> {
  return simulate_multivariate_gaussian(μ, chol(triouter(Σ) + triouter(S)));
}

/*
 * Observe a multivariate Gaussian variate with a multivariate Gaussian prior
 * on the mean.
 *
 * - μ: Prior mean.
 * - Σ: Prior covariance matrix.
 * - S: Covariance matrix.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4>(x:Arg1, μ:Arg2, Σ:Arg3, S:Arg4) -> {
  return logpdf_multivariate_gaussian(x, μ, chol(triouter(Σ) + triouter(S)));
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a
 * multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - Ω: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4>(x:Arg1, μ:Arg2, Σ:Arg3, Ω:Arg4) -> {
  let S <- wrap(triouter(Σ));
  let K' <- wrap(S*cholinv(chol(triouter(Σ) + triouter(Ω))));
  let μ' <- μ + K'*(x - μ);
  let Σ' <- chol(S - K'*S);
  return wrap_multivariate_gaussian(μ', Σ');
}
