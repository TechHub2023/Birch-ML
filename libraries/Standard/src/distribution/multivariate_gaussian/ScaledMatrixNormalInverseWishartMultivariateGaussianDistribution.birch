/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class ScaledMatrixNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) <
    Distribution<Real[_]> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Among-row precision times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row precision.
   */
  Λ:Arg3 <- Λ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;
  
  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg5 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        value(a), value(N), value(Λ), value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        wait(eval(a)), wait(eval(N)), wait(eval(Λ)), wait(eval(Ψ)),
        wait(eval(k)));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, value(a), value(N), value(Λ), value(Ψ), value(k));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, a, N, Λ, Ψ, k));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, value(a), value(N), value(Λ), value(Ψ), value(k));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, a, N, Λ, Ψ, k);
  }
}

function ScaledMatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) -> {
  return wrap_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
      wrap(a), wrap(N), wrap(Λ), wrap(Ψ), wrap(k));
}
function wrap_scaled_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) -> {
  return construct<ScaledMatrixNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>>(a, N, Λ, Ψ, k);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Inner<Random<Real[_,_]>,Arg>,
    Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  μ.l.prune();
  if μ.l.hasMatrixNormalInverseWishart() && μ.l.isGrandChildOf(Σ) {
    let (N, Λ, Ψ, k) <- μ.l.getMatrixNormalInverseWishart();
    let p <- ScaledMatrixNormalInverseWishartMultivariateGaussian(μ.r, N, Λ,
        Ψ, k);
    μ.l.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.l.join(Σ);
    return p;
  } else {
    Σ.prune();
    // if Σ.hasInverseWishart() {
    // 
    // } else {
      return MultivariateGaussian(wrap(μ), wrap(Σ));
    // }
  }
}

/*
 * Simulate a Gaussian distribution with linear transformation of a
 * matrix-normal-inverse-Wishart prior.
 *
 * - a: Scale.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision matrix.
 * - Ψ: Prior covariance shape matrix.
 * - k: Prior degrees of freedom.
 */
function simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) -> {
  let S <- cholinv(chol(Λ));
  let M <- S*N;
  let σ2 <- 1.0 + dot(a, S*a)!;
  return simulate_multivariate_t(k, inner(M, a), σ2*Ψ);
}

/*
 * Observe a Gaussian variate with linear transformation of a
 * matrix-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - a: Scale.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision matrix.
 * - Ψ: Prior covariance shape matrix.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(x:Arg1, a:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5,
    k:Arg6) -> {
  let M <- inner(cholsolve(chol(Λ), N), a);
  let U <- (1.0 + dot(a, cholsolve(chol(Λ), a)))*Ψ;
  return logpdf_multivariate_t(x, k, M, U);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - a: Scale.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the posterior hyperparameters `N'`, `Λ'`, `Ψ'` and `k'`.
 */
function update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(x:Arg1, a:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5,
    k:Arg6) -> {
  let Λ' <- outer(Λ, a, a);  ///@todo Symmetric outer product?
  let N' <- outer(N, a, x);
  let M <- cholsolve(chol(Λ), N);
  let M' <- cholsolve(chol(Λ'), N');
  let Ψ' <- inner(outer(Ψ, x, x), M, N) - inner(M', N');
  let k' <- k + 1.0;
  return MatrixNormalInverseWishart(N', Λ', Ψ', k');
}
