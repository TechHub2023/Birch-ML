/**
 * Multivariate normal-inverse-gamma-Gaussian distribution.
 */
final class MultivariateNormalInverseGammaMultivariateGaussian(
    μ:MultivariateNormalInverseGamma, Σ:Expression<Real[_,_]>) < Distribution<Real[_]> {
  /**
   * Mean.
   */
  μ:MultivariateNormalInverseGamma <- μ;

  /**
   * Covariance scale.
   */
  Σ:Expression<Real[_,_]> <- Σ;

  function rows() -> Integer {
    return μ.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_] {
    return simulate_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.ν.value(), μ.Λ.value(), Σ.value(), μ.α.value(), μ.γ.value());
  }

  function simulateLazy() -> Real[_]? {
    return simulate_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.ν.peak(), μ.Λ.peak(), Σ.peak(), μ.α.peak(), μ.γ.peak());
  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, μ.ν.value(), μ.Λ.value(), Σ.value(), μ.α.value(), μ.γ.value());
  }

  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return logpdf_lazy_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, μ.ν, μ.Λ, Σ, μ.α, μ.γ);
  }

  function update(x:Real[_]) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- box(update_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, μ.ν.value(), μ.Λ.value(), Σ.value(), μ.α.value(), μ.γ.value()));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- update_lazy_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, μ.ν, μ.Λ, Σ, μ.α, μ.γ);
  }

  function link() {
    μ.setChild(this);
  }
  
  function unlink() {
    μ.releaseChild(this);
  }
}

function MultivariateNormalInverseGammaMultivariateGaussian<Right>(
    μ:MultivariateNormalInverseGamma, Σ:Right) -> {
  m:MultivariateNormalInverseGammaMultivariateGaussian(μ, box(Σ));
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Right>(μ:Random<Real[_]>,
    Σ:Multiply<Right,Random<Real>>) -> Distribution<Real[_]> {
  let p <- InverseGamma?(Σ.r!.p);
  if p? {
    let q <- μ.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return MultivariateNormalInverseGammaMultivariateGaussian(q!, Σ.l!);
    } else {
      return MultivariateNormalInverseGamma(μ, Σ.l!, p!);
    }
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Right>(μ:Random<Real[_]>,
    Σ:Multiply<Random<Real>,Right>) -> Distribution<Real[_]> {
  let p <- InverseGamma?(Σ.l!.p);
  if p? {
    let q <- μ.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return MultivariateNormalInverseGammaMultivariateGaussian(q!, Σ.r!);
    } else {
      return MultivariateNormalInverseGamma(μ, Σ.r!, p!);
    }
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/*
 * Simulate a multivariate Gaussian distribution with a multivariate normal
 * inverse-gamma prior.
 *
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - Σ: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 */
function simulate_multivariate_normal_inverse_gamma_multivariate_gaussian(
    ν:Real[_], Λ:Real[_,_], Σ:Real[_,_], α:Real, γ:Real) -> Real[_] {
  let n <- length(ν);
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return simulate_multivariate_student_t(2.0*α, μ, 2.0*β*(Σ + inv(Λ)));
}

/*
 * Observe a multivariate Gaussian variate with a multivariate normal
 * inverse-gamma prior.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - Σ: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_normal_inverse_gamma_multivariate_gaussian(
    x:Real[_], ν:Real[_], Λ:Real[_,_], Σ:Real[_,_], α:Real, γ:Real) -> Real {
  let n <- length(ν);
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return logpdf_multivariate_student_t(x, 2.0*α, μ, 2.0*β*(Σ + inv(Λ)));
}

/*
 * Observe a multivariate Gaussian variate with a multivariate normal
 * inverse-gamma prior.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - Σ: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_multivariate_normal_inverse_gamma_multivariate_gaussian(
    x:Expression<Real[_]>, ν:Expression<Real[_]>, Λ:Expression<Real[_,_]>,
    Σ:Expression<Real[_,_]>, α:Expression<Real>, γ:Expression<Real>) ->
    Expression<Real> {
  let n <- length(ν);
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return logpdf_lazy_multivariate_student_t(x, box(2.0*α), box(μ),
      box(2.0*β*(Σ + inv(Λ))));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - ν: Prior precision times mean.
 * - Λ: Prior precision.
 * - Σ: Covariance scale.
 * - α: Prior shape of the inverse-gamma.
 * - γ: Prior scale accumulator.
 *
 * Returns: the posterior hyperparameters `μ'`, `Λ'`, `α'` and `γ'`.
 */
function update_multivariate_normal_inverse_gamma_multivariate_gaussian(
    x:Real[_], ν:Real[_], Λ:Real[_,_], Σ:Real[_,_], α:Real, γ:Real) ->
    (Real[_], Real[_,_], Real, Real) {
  let D <- length(x);
  let z <- solve(Σ, x);
  let Λ' <- Λ + inv(Σ);
  let ν' <- ν + z;
  let α' <- α + 0.5*D;
  let γ' <- γ + 0.5*dot(x, z);
  return (ν', Λ', α', γ');
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - ν: Prior precision times mean.
 * - Λ: Prior precision.
 * - Σ: Covariance scale.
 * - α: Prior shape of the inverse-gamma.
 * - γ: Prior scale accumulator.
 *
 * Returns: the posterior hyperparameters `μ'`, `Λ'`, `α'` and `γ'`.
 */
function update_lazy_multivariate_normal_inverse_gamma_multivariate_gaussian(
    x:Expression<Real[_]>, ν:Expression<Real[_]>, Λ:Expression<Real[_,_]>,
    Σ:Expression<Real[_,_]>, α:Expression<Real>, γ:Expression<Real>) ->
    (Expression<Real[_]>, Expression<Real[_,_]>, Expression<Real>,
    Expression<Real>) {
  let D <- x.length();
  let z <- solve(Σ, x);
  let Λ' <- Λ + inv(Σ);
  let ν' <- ν + z;
  let α' <- α + 0.5*D;
  let γ' <- γ + 0.5*dot(x, z);
  return (box(ν'), box(Λ'), box(α'), box(γ'));
}
