/**
 * Multivariate normal-inverse-gamma-Gaussian distribution.
 */
final class MultivariateNormalInverseGammaMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5>(μ:Arg1, Σ:Arg2, k:Arg3, β:Arg4, Ω:Arg5) <
    MultivariateTDistribution<Arg3,Arg1,Expression<Real[_,_]>>(k, μ,
    box(chol((2.0*β)*(triouter(Σ) + triouter(Ω))))) {
  /**
   * Covariance.
   */
  Σ:Arg2 <- Σ;

  /**
   * Variance scale.
   */
  β:Arg4 <- β;

  /**
   * Covariance.
   */
  Ω:Arg5 <- Ω;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_gamma_multivariate_gaussian(x,
        value(super.μ), value(Σ), value(super.k), value(β), value(Ω),
        value(super.Σ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_gamma_multivariate_gaussian(x,
        super.μ, Σ, super.k, β, Ω, super.Σ);
  }
}

function MultivariateNormalInverseGammaMultivariateGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5>(μ:Arg1, Σ:Arg2, α:Arg3, β:Arg4, Ω:Arg5) -> {
  return wrap_multivariate_normal_inverse_gamma_multivariate_gaussian(μ,
      chol(Σ), 2.0*α, β, chol(Ω));
}
function wrap_multivariate_normal_inverse_gamma_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(μ:Arg1, Σ:Arg2, k:Arg3, β:Arg4, Ω:Arg5) -> {
  return make_multivariate_normal_inverse_gamma_multivariate_gaussian(wrap(μ),
      wrap(Σ), wrap(k), wrap(β), wrap(Ω));
}
function make_multivariate_normal_inverse_gamma_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(μ:Arg1, Σ:Arg2, k:Arg3, β:Arg4, Ω:Arg5) -> {
  return construct<MultivariateNormalInverseGammaMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>>(μ, Σ, k, β, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>,
    Ω:OpMul<Arg,Random<Real>>) -> Distribution<Real[_]> {
  μ.prune();
  if μ.hasMultivariateNormalInverseGamma() && μ.isGrandChildOf(Ω.r) {
    let (m, Σ, k, β) <- μ.getMultivariateNormalInverseGamma();
    let p <- wrap_multivariate_normal_inverse_gamma_multivariate_gaussian(m,
        Σ, k, β, chol(Ω.l));
    μ.graft(p, 1);
    Ω.r.graftReplace(p, 2);
    μ.join(Ω.r);
    return p;
  } else {
    Ω.r.prune();
    if Ω.r.hasInverseGamma() {
      let (α, β) <- Ω.r.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.l), 2.0*α, β);
      Ω.r.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Ω));
    }
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>,
    Ω:OpMul<Random<Real>,Arg>) -> Distribution<Real[_]> {
  μ.prune();
  if μ.hasMultivariateNormalInverseGamma() && μ.isGrandChildOf(Ω.l) {
    let (m, Σ, k, β) <- μ.getMultivariateNormalInverseGamma();
    let p <- wrap_multivariate_normal_inverse_gamma_multivariate_gaussian(m,
        Σ, k, β, chol(Ω.r));
    μ.graft(p, 1);
    Ω.l.graftReplace(p, 2);
    μ.join(Ω.l);
    return p;
  } else {
    Ω.l.prune();
    if Ω.l.hasInverseGamma() {
      let (α, β) <- Ω.l.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.l), 2.0*α, β);
      Ω.l.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Ω));
    }
  }
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - μ: Mean.
 * - Σ: Prior precision.
 * - k: Prior degrees of freedom of the inverse-gamma ($k = 2\alpha$).
 * - β: Prior scale of the inverse-gamma.
 * - Ω: Covariance scale.
 * - T: Precomputed marginal covariance.
 *
 * Returns: the posterior hyperparameters `μ'`, `Σ'`, `k'` and `β'`.
 */
function update_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(x:Arg1, μ:Arg2, Σ:Arg3, k:Arg4,
    β:Arg5, Ω:Arg6, T:Arg7) -> {
  let n <- length(x);
  let S <- wrap(triouter(Σ));
  let K' <- wrap(2.0*β*S*cholinv(T));
  let μ' <- wrap(μ + K'*(x - μ));
  let Σ' <- wrap(chol(S - K'*S));
  let k' <- k + n;
  let β' <- β + 0.5*(dot(trisolve(Ω, x)) + dot(trisolve(Σ, μ)) -
      dot(trisolve(Σ', μ')));
  return wrap_multivariate_normal_inverse_gamma(μ', Σ', k', β');
}
