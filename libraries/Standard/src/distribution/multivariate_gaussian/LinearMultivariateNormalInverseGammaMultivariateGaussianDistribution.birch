/**
 * Linear-normal-inverse-gamma-Gaussian distribution where
 * components have independent and identical variance.
 */
final class LinearMultivariateNormalInverseGammaMultivariateGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, Ω:Arg7) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Variance shape.
   */
  α:Arg4 <- α;

  /**
   * Variance scale accumulator.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood covariance scale.
   */
  Ω:Arg7 <- Ω;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        value(A), value(μ), value(Σ), value(α), value(β), value(Ω)) +
        value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        eval(A), eval(μ), eval(Σ), eval(α), eval(β), eval(Ω)) + eval(c);
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(Σ), value(α), value(β),
        value(Ω));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, μ, Σ, α, β, Ω));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(Σ), value(α), value(β),
        value(Ω));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, μ, Σ, α, β, Ω);
  }
}

function LinearMultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, Ω:Arg7) -> {
  return wrap_linear_multivariate_normal_inverse_gamma_multivariate_gaussian(
      A, μ, chol(Σ), α, β, c, chol(Ω));
}
function wrap_linear_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4,
    β:Arg5, c:Arg6, Ω:Arg7) -> {
  return make_linear_multivariate_normal_inverse_gamma_multivariate_gaussian(
        wrap(A), wrap(μ), wrap(Σ), wrap(α), wrap(β), wrap(c), wrap(Ω));
}
function make_linear_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4,
    β:Arg5, c:Arg6, Ω:Arg7) -> {
  return construct<LinearMultivariateNormalInverseGammaMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, μ, Σ, α, β, c, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<OpMul<Arg1,
    Random<Real[_]>>,Arg2>, Ω:OpMul<Arg3,Random<Real>>) ->
    Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseGamma() && μ.l.r.isGrandChildOf(Ω.r) {
    let (m, Σ, α, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_linear_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.l.l, m, Σ, α, β, μ.r, chol(Ω.l));
    μ.l.r.graft(p, 1);
    Ω.r.graftReplace(p, 2);
    μ.l.r.join(Ω.r);
    return p;
  } else {
    Ω.r.prune();
    if Ω.r.hasInverseGamma() {
      let (α, β) <- Ω.r.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.l), α, β);
      Ω.r.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Ω));
    }
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<OpMul<Arg1,
    Random<Real[_]>>,Arg2>, Ω:OpMul<Random<Real>,Arg3>) ->
    Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseGamma() && μ.l.r.isGrandChildOf(Ω.l) {
    let (m, Σ, α, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_linear_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.l.l, m, Σ, α, β, μ.r, chol(Ω.r));
    μ.l.r.graft(p, 1);
    Ω.r.graftReplace(p, 2);
    μ.l.r.join(Ω.r);
    return p;
  } else if Ω.l.hasInverseGamma() {
    Ω.l.prune();
    let (α, β) <- Ω.l.getInverseGamma();
    let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.r), α, β);
    Ω.l.graft(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, chol(Ω));
  }
}
