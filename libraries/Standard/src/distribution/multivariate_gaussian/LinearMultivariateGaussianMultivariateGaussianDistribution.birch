/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class LinearMultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) <
    Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;
  
  /**
   * Likelihood covariance.
   */
  S:Arg5 <- S;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_gaussian_multivariate_gaussian(
        value(A), value(μ), value(Σ), value(S)) + value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_gaussian_multivariate_gaussian(
        peek(A), peek(μ), peek(Σ), peek(S)) + peek(c);
  }
  
  override function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_multivariate_gaussian_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(Σ), value(S));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_gaussian_multivariate_gaussian(
        box(x - c), A, μ, Σ, S));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_gaussian_multivariate_gaussian(
        x - value(c), value(A), value(μ), value(Σ), value(S));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_gaussian_multivariate_gaussian(
        box(x - c), A, μ, Σ, S);
  }

  override function isMultivariateGaussian() -> Boolean {
    return true;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    return box(A*μ + c, outer(A*Σ, A) + S);
  }
}

function LinearMultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) -> {
  return construct<LinearMultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,
      Arg3,Arg4,Arg5>>(A, μ, Σ, c, S);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:Add<Multiply<Arg1,
    Random<Real[_]>>,Arg2>, Σ:Arg3) -> Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateGaussian() {
    let (m, S) <- μ.l.r.getMultivariateGaussian();
    let p <- LinearMultivariateGaussianMultivariateGaussian(μ.l.l, m, S, μ.r,
        Σ);
    μ.l.r.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussianDistribution<Add<Multiply<Arg1,
        Random<Real[_]>>,Arg2>,Arg3>>(μ, Σ);
  }
}
