/**
 * Multivariate Gaussian with linear transformation of a
 * multivariate-normal-inverse-Wishart prior.
 */
class ScaledMultivariateNormalInverseWishartMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) < MultivariateTDistribution<Arg5,Expression<Real[_]>,
    Expression<Real[_,_]>>(k, box(A*μ), box(chol(σ2*A*outer(triouter(Ψ), A) +
    ω2*triouter(Ψ)))) {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Scale.
   */
  σ2:Arg3 <- σ2;
  
  /**
   * Spread.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Likelihood scale.
   */
  ω2:Arg6 <- ω2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        x, value(A), value(μ), value(σ2), value(Ψ), value(this.k), value(ω2),
        value(super.μ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        x, A, μ, σ2, Ψ, this.k, ω2, super.μ);
  }
}

function ScaledMultivariateNormalInverseWishartMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) -> {
  return wrap_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
      A, μ, chol(σ2), chol(Ψ), k, chol(ω2));
}
function wrap_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) -> {
  return make_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
      wrap(A), wrap(μ), wrap(σ2), wrap(Ψ), wrap(k), wrap(ω2));
}
function make_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5,
    ω2:Arg6) -> {
  return construct<ScaledMultivariateNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, μ, σ2, Ψ, k, ω2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1>(μ:OpMul<Arg1,Random<Real[_]>>,
    Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  μ.r.prune();
  if μ.r.hasMultivariateNormalInverseWishart() && μ.r.isGrandChildOf(Σ) {
    let (μ1, σ2, Ψ, k) <- μ.r.getMultivariateNormalInverseWishart();
    let p <- wrap_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian(
        μ.l, μ1, σ2, Ψ, k, 1.0);
    μ.r.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.r.join(Σ);
    return p;
  } else {
    Σ.prune();
    if Σ.hasInverseWishart() {
      let (Ψ, k) <- Σ.getInverseWishart();
      let p <- wrap_multivariate_normal_inverse_wishart(μ, 1.0, Ψ, k);
      Σ.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Σ));
    }
  }
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of multivariate-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior precision times mean multivariate.
 * - σ2: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - ω2: Among-row covariance.
 * - N: Precomputed marginal mean.
 *
 * Returns: the posterior hyperparameters `μ'`, `σ2'`, `Ψ'` and `k'`.
 */
function update_scaled_multivariate_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, A:Arg2, μ:Arg3, σ2:Arg4,
    Ψ:Arg5, k:Arg6, ω2:Arg7, N:Arg8) -> {
  let l <- wrap(σ2/(σ2 + ω2));
  let μ' <- wrap(μ + l*(x - N));
  let σ2' <- wrap(σ2 - l*σ2);
  let Ψ' <- chol(triouter(Ψ) + outer(x - N)*σ2'/σ2);
  let k' <- k + 1;
  return wrap_multivariate_normal_inverse_wishart(μ', σ2', Ψ', k');
}
