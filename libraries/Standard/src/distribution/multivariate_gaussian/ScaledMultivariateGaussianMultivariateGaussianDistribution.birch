/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class ScaledMultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4>(A:Arg1, μ:Arg2, Σ:Arg3, S:Arg4) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;
    
  /**
   * Mean of mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance of mean.
   */
  Σ:Arg3 <- Σ;
  
  /**
   * Covariance.
   */
  S:Arg4 <- S;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_gaussian_multivariate_gaussian(
        value(A), value(μ), value(Σ), value(S));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_gaussian_multivariate_gaussian(
        peek(A), peek(μ), peek(Σ), peek(S));
  }
  
  override function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_multivariate_gaussian_multivariate_gaussian(x,
        value(A), value(μ), value(Σ), value(S));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, S));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_gaussian_multivariate_gaussian(x,
        value(A), value(μ), value(Σ), value(S));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_gaussian_multivariate_gaussian(x, A, μ,
        Σ, S);
  }

  override function isMultivariateGaussian() -> Boolean {
    return true;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    return box(A*μ, outer(A*Σ, A) + S);
  }
}

function ScaledMultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3,Arg4>(
    A:Arg1, μ:Arg2, Σ:Arg3, S:Arg4) -> {
  return construct<ScaledMultivariateGaussianMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4>>(A, μ, Σ, S);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(
    μ:Multiply<Arg1,Random<Real[_]>>, Σ:Arg2) -> Distribution<Real[_]> {
  μ.r.prune();
  if μ.r.hasMultivariateGaussian() {
    let (m, S) <- μ.r.getMultivariateGaussian();
    let p <- ScaledMultivariateGaussianMultivariateGaussian(μ.l, m, S, Σ);
    μ.r.graft(p);
    return p;
  } else {
    return construct<MultivariateGaussianDistribution<Multiply<Arg1,
        Random<Real[_]>>,Arg2>>(μ, Σ);
  }
}

/*
 * Simulate a multivariate Gaussian distribution with a linear transformation
 * and multivariate Gaussian likelihood.
 *
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - S: Likelihood covariance.
 */
function simulate_scaled_multivariate_gaussian_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4>(A:Arg1, μ:Arg2, Σ:Arg3, S:Arg4) -> {
  return simulate_multivariate_gaussian(A*μ, outer(A*Σ, A) + S);
}

/*
 * Observe a multivariate Gaussian variate with a linear transformation
 * and multivariate Gaussian likelihood.
 *
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - S: Likelihood covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, S:Arg5) -> {
  return logpdf_multivariate_gaussian(x, A*μ, outer(A*Σ, A) + S);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - S: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_scaled_multivariate_gaussian_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, S:Arg5) -> {
  let K' <- outer(Σ, cholsolve(outer(A*Σ, A) + S, A));
  let μ' <- μ + K'*(x - A*μ);
  let Σ' <- Σ - K'*A*Σ;
  return MultivariateGaussian(μ', Σ');
}
