/**
 * Scaled-normal-inverse-gamma-Gaussian distribution where
 * components have independent and identical variance.
 */
final class ScaledMultivariateNormalInverseGammaMultivariateGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    Ω:Arg6) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Variance shape.
   */
  α:Arg4 <- α;

  /**
   * Variance scale.
   */
  β:Arg5 <- β;

  /**
   * Covariance scale.
   */
  Ω:Arg6 <- Ω;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        value(A), value(μ), value(Σ), value(α), value(β), value(Ω));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        eval(A), eval(μ), eval(Σ), eval(α), eval(β), eval(Ω));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, value(A), value(μ), value(Σ), value(α), value(β), value(Ω));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, A, μ, Σ, α, β, Ω));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, value(A), value(μ), value(Σ), value(α), value(β), value(Ω));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, A, μ, Σ, α, β, Ω);
  }
}

function ScaledMultivariateNormalInverseGammaMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5, Ω:Arg6) -> {
  return wrap_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
      A, μ, chol(Σ), α, β, chol(Ω));
}
function wrap_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    Ω:Arg6) -> {
  return make_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
      wrap(A), wrap(μ), wrap(Σ), wrap(α), wrap(β), wrap(Ω));
}
function make_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    Ω:Arg6) -> {
  return construct<ScaledMultivariateNormalInverseGammaMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, μ, Σ, α, β, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real[_]>>,
    Ω:Multiply<Arg2,Random<Real>>) -> Distribution<Real[_]> {
  μ.r.prune();
  if μ.r.hasMultivariateNormalInverseGamma() && μ.r.isGrandChildOf(Ω.r) {
    let (μ1, Σ, α, β) <- μ.r.getMultivariateNormalInverseGamma();
    let p <- wrap_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.l, μ1, Σ, α, β, chol(Ω.l));
    μ.r.graft(p, 1);
    Ω.r.graftReplace(p, 2);
    μ.r.join(Ω.r);
    return p;
  } else {
    Ω.r.prune();
    if Ω.r.hasInverseGamma() {
      let (α, β) <- Ω.r.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.l), α, β);
      Ω.r.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Ω));
    }
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real[_]>>,
    Ω:Multiply<Random<Real>,Arg2>) -> Distribution<Real[_]> {
  μ.r.prune();
  if μ.r.hasMultivariateNormalInverseGamma() && μ.r.isGrandChildOf(Ω.l) {
    let (μ1, Σ, α, β) <- μ.r.getMultivariateNormalInverseGamma();
    let p <- wrap_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.l, μ1, Σ, α, β, chol(Ω.r));
    μ.r.graft(p, 1);
    Ω.l.graftReplace(p, 2);
    μ.r.join(Ω.l);
    return p;
  } else {
    Ω.l.prune();
    if Ω.l.hasInverseGamma() {
      let (α, β) <- Ω.l.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.r), α, β);
      Ω.l.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, chol(Ω));
    }
  }
}

/*
 * Simulate a multivariate Gaussian distribution with a linear transformation
 * of a multivariate linear normal inverse-gamma prior.
 *
 * - A: Scale matrix.
 * - μ: Mean.
 * - Σ: Covariance.
 * - Ω: Covariance scale matrix.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 */
function simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    Ω:Arg6) -> {
  let m <- A*μ;
  let S <- sqrt(2.0*β)*chol(inner(triinner(Σ, transpose(A))) + triouter(Ω));
  return simulate_multivariate_t(2.0*α, m, S);
}

/*
 * Observe a multivariate Gaussian variate with a multivariate linear normal
 * inverse-gamma prior with linear transformation.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Mean.
 * - Σ: Covariance.
 * - Ω: Covariance scale.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4,
    α:Arg5, β:Arg6, Ω:Arg7) -> {
  let m <- A*μ;
  let S <- sqrt(2.0*β)*chol(inner(triinner(Σ, transpose(A))) + triouter(Ω));
  return logpdf_multivariate_t(x, 2.0*α, m, S);
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - Ω: Covariance scale.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `μ'`, `Σ'`, `β'`, `α'` and `β'`.
 */
function update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4,
    α:Arg5, β:Arg6, Ω:Arg7) -> {
  let n <- length(x);
  let S <- wrap(triouter(Σ));
  let K' <- wrap(inner(cholsolve(chol(inner(triinner(Σ, transpose(A))) +
      triouter(Ω)), A*S), A));
  let S' <- wrap(S - K'*S);
  let μ' <- wrap(μ - K'*μ + S'*inner(A, cholsolve(Ω, x)));
  let Σ' <- wrap(chol(S'));
  let α' <- α + 0.5*n;
  let β' <- β + 0.5*(dot(trisolve(Ω, x)) + dot(trisolve(Σ, μ)) -
      dot(trisolve(Σ', μ')));
  return wrap_multivariate_normal_inverse_gamma(μ', Σ', α', β');
}
