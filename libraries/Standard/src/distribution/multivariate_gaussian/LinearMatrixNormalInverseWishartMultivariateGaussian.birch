/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class LinearMatrixNormalInverseWishartMultivariateGaussian(
    a:Expression<Real[_]>, M:MatrixNormalInverseWishart, 
    c:Expression<Real[_]>) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  a:Expression<Real[_]> <- a;

  /**
   * Mean.
   */
  M:MatrixNormalInverseWishart <- M;

  /**
   * Offset.
   */
  c:Expression<Real[_]> <- c;

  function rows() -> Integer {
    return c.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_] {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        a.value(), M.N.value(), M.Λ.value(), M.V.Ψ.value(), M.V.k.value()) +
        c.value();
  }

  function simulateLazy() -> Real[_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        a.peak(), M.N.peak(), M.Λ.peak(), M.V.Ψ.peak(), M.V.k.peak()) +
        c.peak();
  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x - c.value(), a.value(), M.N.value(), M.Λ.value(), M.V.Ψ.value(),
        M.V.k.value());
  }

  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return logpdf_lazy_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), a, M.N, M.Λ, M.V.Ψ, M.V.k);
  }

  function update(x:Real[_]) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- box(update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x - c.value(), a.value(), M.N.value(), M.Λ.value(), M.V.Ψ.value(),
        M.V.k.value()));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- update_lazy_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), a, M.N, M.Λ, M.V.Ψ, M.V.k);
  }

  function link() {
    M.setChild(this);
  }
  
  function unlink() {
    M.releaseChild(this);
  }
}

function LinearMatrixNormalInverseWishartMultivariateGaussian<Left,Right>(
  a:Left, M:MatrixNormalInverseWishart, c:Right) -> {
  m:LinearMatrixNormalInverseWishartMultivariateGaussian(box(a), M, box(c));
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Middle>(
    μ:DotAdd<Left,Random<Real[_,_]>,Middle>, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  let p <- InverseWishart?(Σ.p);
  if p? {
    let q <- μ.m!.graftMatrixNormalInverseWishart(p!);
    if q? {
      return LinearMatrixNormalInverseWishartMultivariateGaussian(μ.l!, q!, μ.r!);
    } else {
      return construct<MultivariateGaussian>(box(μ), Σ);
    }
  } else {
    return construct<MultivariateGaussian>(box(μ), Σ);
  }
}
