/**
 * Linear-normal-inverse-gamma-Gaussian distribution where
 * components have independent and identical variance.
 */
final class LinearMultivariateNormalInverseGammaMultivariateGaussian(
    A:Expression<Real[_,_]>, μ:MultivariateNormalInverseGamma,
    c:Expression<Real[_]>, Σ:Expression<Real[_,_]>) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Expression<Real[_,_]> <- A;

  /**
   * Mean.
   */
  μ:MultivariateNormalInverseGamma <- μ;

  /**
   * Offset.
   */
  c:Expression<Real[_]> <- c;

  /**
   * Covariance scale.
   */
  Σ:Expression<Real[_,_]> <- Σ;

  function rows() -> Integer {
    return c.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_] {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        A.value(), μ.ν.value(), μ.Λ.value(), Σ.value(), μ.α.value(),
        μ.γ.value()) + c.value();
  }

  function simulateLazy() -> Real[_]? {
    return simulate_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        A.peak(), μ.ν.peak(), μ.Λ.peak(), Σ.peak(), μ.α.peak(), μ.γ.peak()) +
        c.peak();
  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - c.value(), A.value(), μ.ν.value(), μ.Λ.value(), Σ.value(),
        μ.α.value(), μ.γ.value());
  }

  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return logpdf_lazy_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, μ.ν, μ.Λ, Σ, μ.α, μ.γ);
  }

  function update(x:Real[_]) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- box(update_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x - c.value(), A.value(), μ.ν.value(), μ.Λ.value(), Σ.value(),
        μ.α.value(), μ.γ.value()));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- update_lazy_scaled_multivariate_normal_inverse_gamma_multivariate_gaussian(
        box(x - c), A, μ.ν, μ.Λ, Σ, μ.α, μ.γ);
  }

  function link() {
    μ.setChild(this);
  }
  
  function unlink() {
    μ.releaseChild(this);
  }
}

function LinearMultivariateNormalInverseGammaMultivariateGaussian<Left,Middle,Right>(
      A:Left, μ:MultivariateNormalInverseGamma, c:Middle, Σ:Right) -> {
  m:LinearMultivariateNormalInverseGammaMultivariateGaussian(box(A), μ,
      box(c), box(Σ));
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Middle,Right>(
    μ:MultiplyAdd<Left,Random<Real[_]>,Middle>,
    Σ:Multiply<Right,Random<Real>>) -> Distribution<Real[_]> {
  let p <- InverseGamma?(Σ.r!.p);
  if p? {
    let q <- μ.m!.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return LinearMultivariateNormalInverseGammaMultivariateGaussian(μ.l!,
          q!, μ.r!, Σ.l!);
    } else {
      return MultivariateNormalInverseGamma(μ, Σ.l!, p!);
    }
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Middle,Right>(
    μ:MultiplyAdd<Left,Random<Real[_]>,Middle>,
    Σ:Multiply<Random<Real>,Right>) -> Distribution<Real[_]> {
  let p <- InverseGamma?(Σ.l!.p);
  if p? {
    let q <- μ.m!.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return LinearMultivariateNormalInverseGammaMultivariateGaussian(μ.l!,
          q!, μ.r!, Σ.r!);
    } else {
      return MultivariateNormalInverseGamma(μ, Σ.r!, p!);
    }
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}
