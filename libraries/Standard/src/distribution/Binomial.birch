/**
 * Binomial distribution.
 */
final class Binomial(n:Expression<Integer>, ρ:Expression<Real>) <
    BoundedDiscrete {
  /**
   * Number of trials.
   */
  n:Expression<Integer> <- n;

  /**
   * Success probability.
   */
  ρ:Expression<Real> <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_binomial(n.value(), ρ.value());
  }
  
  function simulateLazy() -> Integer? {
    return simulate_binomial(n.get(), ρ.get());
  }

  function logpdf(x:Integer) -> Real {
    return logpdf_binomial(x, n.value(), ρ.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_binomial(x, n, ρ);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_binomial(x, n.value(), ρ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_binomial(P, n.value(), ρ.value());
  }

  function lower() -> Integer? {
    return 0;
  }
  
  function upper() -> Integer? {
    return n.value();
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Binomial");
    buffer.set("n", n);
    buffer.set("ρ", ρ);
  }
}

/**
 * Create binomial distribution.
 */
function Binomial(n:Expression<Integer>, ρ:Expression<Real>) ->
    Distribution<Integer> {
  m:Beta?;
  if (m <- ρ.graftBeta())? {
    return BetaBinomial(n, m!);
  } else {
    return construct<Binomial>(n, ρ);
  }
}

/**
 * Create binomial distribution.
 */
function Binomial(n:Expression<Integer>, ρ:Real) -> Distribution<Integer> {
  return Binomial(n, box(ρ));
}

/**
 * Create binomial distribution.
 */
function Binomial(n:Integer, ρ:Expression<Real>) -> Distribution<Integer> {
  return Binomial(box(n), ρ);
}

/**
 * Create binomial distribution.
 */
function Binomial(n:Integer, ρ:Real) -> Distribution<Integer> {
  return Binomial(box(n), box(ρ));
}
