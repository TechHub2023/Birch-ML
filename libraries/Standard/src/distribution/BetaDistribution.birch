hpp{{
#include <boost/math/distributions/beta.hpp>
}}

/**
 * Beta distribution.
 */
final class BetaDistribution<Arg1,Arg2>(α:Arg1, β:Arg2) < Distribution<Real> {
  /**
   * First shape.
   */
  α:Arg1 <- α;

  /**
   * Second shape.
   */
  β:Arg2 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_beta(value(α), value(β));
  }

  override function simulateLazy() -> Real!? {
    return simulate_beta(eval(α), eval(β));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_beta(x, value(α), value(β));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_beta(x, α, β));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_beta(x, value(α), value(β));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_beta(P, value(α), value(β));
  }

  override function lower() -> Real!? {
    return 0.0;
  }
  
  override function upper() -> Real!? {
    return 1.0;
  }

  override function isBeta() -> Boolean {
    return true;
  }

  override function getBeta() -> (Expression<Real>, Expression<Real>)? {
    return box(α, β);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Beta");
    buffer.set("α", value(α));
    buffer.set("β", value(β));
  }
}

/**
 * Create beta distribution.
 */
function Beta<Arg1,Arg2>(α:Arg1, β:Arg2) -> Distribution<Real> {
  return wrap_beta(α, β);
}
function wrap_beta<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return make_beta(wrap(α), wrap(β));
}
function make_beta<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return construct<BetaDistribution<Arg1,Arg2>>(α, β);
}

hpp{{
using numbirch::simulate_beta;
}}

/*
 * Observe a beta variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability density.
 */
function logpdf_beta<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return (α - 1.0)*log(x) + (β - 1.0)*log1p(-x) - lbeta(α, β);
}

/*
 * CDF of a beta variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Shape.
 *
 * Return: the cumulative probability.
 */
function cdf_beta<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return ibeta(α, β, x);
}

/*
 * Quantile of a beta distribution.
 *
 * - P: The cumulative probability.
 * - α: Shape.
 * - β: Shape.
 *
 * Return: the quantile.
 */
function quantile_beta<Arg1,Arg2,Arg3>(P:Arg1, α:Arg2, β:Arg3) -> {
  cpp{{
  return boost::math::quantile(boost::math::beta_distribution<Real>(wait(α),
      wait(β)), wait(P));
  }}
}
