hpp{{
#include <boost/math/distributions/negative_binomial.hpp>
}}

/**
 * Negative binomial distribution.
 */
final class NegativeBinomialDistribution<Arg1,Arg2>(k:Arg1, ρ:Arg2) <
    Distribution<Integer> {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Arg1 <- k;

  /**
   * Success probability.
   */
  ρ:Arg2 <- ρ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer! {
    return simulate_negative_binomial(value(k), value(ρ));
  }

  override function simulateLazy() -> Integer!? {
    return simulate_negative_binomial(eval(k), eval(ρ));
  }
  
  override function logpdf(x:Integer!) -> Real! {
    return logpdf_negative_binomial(x, value(k), value(ρ));
  }

  override function logpdfLazy(x:Integer!) -> Real!? {
    return logpdf_negative_binomial(x, eval(k), eval(ρ));
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_negative_binomial(this.random(), k, ρ));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_negative_binomial(x, value(k), value(ρ));
  }

  override function quantile(P:Real!) -> Integer!? {
    return quantile_negative_binomial(P, value(k), value(ρ));
  }

  override function lower() -> Integer!? {
    return 0;
  }

  override function constant() {
    super.constant();
    global.constant(k);
    global.constant(ρ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "NegativeBinomial");
    buffer.set("k", value(k));
    buffer.set("ρ", value(ρ));
  }
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) ->
    Distribution<Integer> {
  return wrap_negative_binomial(k, ρ);
}
function wrap_negative_binomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) -> {
  return make_negative_binomial(wrap(k), wrap(ρ));
}
function make_negative_binomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) -> {
  return construct<NegativeBinomialDistribution<Arg1,Arg2>>(k, ρ);
}

hpp{{
using numbirch::simulate_negative_binomial;
}}

/*
 * Observe a negative binomial variate.
 *
 * @param x The variate (number of failures).
 * @param k Number of successes before the experiment is stopped.
 * @param ρ Probability of success.
 *
 * @return the log probability mass.
 */
function logpdf_negative_binomial<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, ρ:Arg3) -> {
  return k*log(ρ) + x*log1p(-ρ) + lchoose(x + k - 1, x);
}

/*
 * CDF of a negative binomial variate.
 *
 * @param x The variate (number of failures).
 * @param k Number of successes before the experiment is stopped.
 * @param ρ Probability of success.
 *
 * @return the cumulative probability.
 */
function cdf_negative_binomial<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, ρ:Arg3) -> {
  return ibeta(k, x + 1, ρ);
}

/*
 * Quantile of a negative binomial distribution.
 *
 * @param P The cumulative probability.
 * @param k Number of successes before the experiment is stopped.
 * @param ρ Probability of success.
 *
 * @return the quantile.
 */
function quantile_negative_binomial<Arg1,Arg2,Arg3>(P:Arg1, k:Arg2,
    ρ:Arg3) -> {
  cpp{{
  return boost::math::quantile(boost::math::negative_binomial_distribution<
      Real>(wait(k), wait(ρ)), wait(P));
  }}
}
