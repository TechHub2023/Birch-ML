/**
 * Multivariate normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$
 * \begin{align*}
 * \sigma^2 & \sim \mathrm{Inverse-Gamma}(\alpha, \beta) \\
 * x \mid \sigma^2 & \sim \mathrm{N}(\mu, \Sigma\sigma^2),
 * \end{align*}
 * $$
 *
 * which may be denoted:
 *
 * $$
 * (x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma}(\mu, \Sigma, \alpha, \beta),
 * $$
 *
 * and is a conjugate prior of a Gaussian distribution with both unknown mean
 * and variance. The variance scaling is independent and identical in the
 * sense that all components of $x$ share the same $\sigma^2$.
 *
 * In model code, it is not usual to use this class directly. Instead,
 * establish a conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, β);
 *     x ~ Gaussian(μ, Σ*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `Σ` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 */
final class MultivariateNormalInverseGamma(μ:Expression<Real[_]>,
    Σ:Expression<Real[_,_]>, σ2:InverseGamma) < Distribution<Real[_]> {
  /**
   * Precision.
   */
  Λ:Expression<Real[_,_]> <- box(inv(Σ));

  /**
   * Precision times mean.
   */
  ν:Expression<Real[_]> <- box(matrix<Real>(Λ)*μ);

  /**
   * Variance shape.
   */
  α:Expression<Real> <- σ2.α;

  /**
   * Variance scale accumulator.
   */
  γ:Expression<Real> <- box(σ2.β + 0.5*dot(μ, ν));

  /**
   * Variance scale.
   */
  σ2:InverseGamma <- σ2;

  function rows() -> Integer {
    return ν.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_] {
    return simulate_multivariate_normal_inverse_gamma(ν.value(), Λ.value(),
        α.value(), gamma_to_beta(γ.value(), ν.value(), Λ.value()));
  }

  function simulateLazy() -> Real[_]? {
    return simulate_multivariate_normal_inverse_gamma(ν.peak(), Λ.peak(),
        α.peak(), gamma_to_beta(γ.peak(), ν.peak(), Λ.peak()));
  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_multivariate_normal_inverse_gamma(x, ν.value(), Λ.value(),
        α.value(), gamma_to_beta(γ.value(), ν.value(), Λ.value()));
  }

  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return logpdf_lazy_multivariate_normal_inverse_gamma(x, ν, Λ,
        α, gamma_to_beta(γ, ν, Λ));
  }

  function update(x:Real[_]) {
    (σ2.α, σ2.β) <- box(update_multivariate_normal_inverse_gamma(x, ν.value(),
        Λ.value(), α.value(), gamma_to_beta(γ.value(), ν.value(), Λ.value())));
  }

  function updateLazy(x:Expression<Real[_]>) {
    (σ2.α, σ2.β) <- update_lazy_multivariate_normal_inverse_gamma(x, ν,
        Λ, α, gamma_to_beta(γ, ν, Λ));
  }

  function graftMultivariateNormalInverseGamma(compare:Distribution<Real>) ->
      MultivariateNormalInverseGamma? {
    prune();
    if σ2 == compare {
      return this;
    } else {
      return nil;
    }
  }

  function link() {
    σ2.setChild(this);
  }
  
  function unlink() {
    σ2.releaseChild(this);
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "MultivariateNormalInverseGamma");
    buffer.set("μ", solve(Λ.value(), ν.value()));
    buffer.set("Σ", inv(Λ.value()));
    buffer.set("α", α.value());
    buffer.set("β", gamma_to_beta(γ.value(), ν.value(), Λ.value()));
  }
}

function MultivariateNormalInverseGamma<Left,Middle>(μ:Left, Σ:Middle, σ2:InverseGamma) -> {
  m:MultivariateNormalInverseGamma(box(μ), box(Σ), σ2);
  m.link();
  return m;
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Right>(μ:Left, Σ:Multiply<Right,Random<Real>>) -> Distribution<Real[_]> {
  s2:InverseGamma?;
  if (s2 <- Σ.r!.graftInverseGamma())? {
    return MultivariateNormalInverseGamma(μ, Σ.l!, s2!);
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Left,Right>(μ:Left, Σ:Multiply<Random<Real>,Right>) -> Distribution<Real[_]> {
  s2:InverseGamma?;
  if (s2 <- Σ.l!.graftInverseGamma())? {
    return MultivariateNormalInverseGamma(μ, Σ.r!, s2!);
  } else {
    return construct<MultivariateGaussian>(box(μ), box(Σ));
  }
}

/*
 * Compute the variance scale from the variance scale accumulator and other
 * parameters.
 */
function gamma_to_beta(γ:Real, ν:Real[_], Λ:Real[_,_]) -> Real {
  return γ - 0.5*dot(ν, solve(Λ, ν));
}

/*
 * Compute the variance scale from the variance scale accumulator and other
 * parameters.
 */
function gamma_to_beta(γ:Expression<Real>, ν:Expression<Real[_]>,
    Λ:Expression<Real[_,_]>) -> Expression<Real> {
  return box(γ - 0.5*dot(ν, solve(Λ, ν)));
}

/*
 * Simulate a multivariate normal inverse-gamma distribution.
 *
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 */
function simulate_multivariate_normal_inverse_gamma(ν:Real[_], Λ:Real[_,_],
    α:Real, β:Real) -> Real[_] {
  return simulate_multivariate_student_t(2.0*α, solve(Λ, ν), 2.0*β*inv(Λ));
}

/*
 * Observe a multivariate normal inverse-gamma variate.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_normal_inverse_gamma(x:Real[_], ν:Real[_],
    Λ:Real[_,_], α:Real, β:Real) -> Real {
  return logpdf_multivariate_student_t(x, 2.0*α, solve(Λ, ν), 2.0*β*inv(Λ));
}

/*
 * Observe a multivariate normal inverse-gamma variate.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_multivariate_normal_inverse_gamma(x:Expression<Real[_]>, ν:Expression<Real[_]>,
    Λ:Expression<Real[_,_]>, α:Expression<Real>, β:Expression<Real>) -> Expression<Real> {
  return logpdf_lazy_multivariate_student_t(x, box(2.0*α), box(solve(Λ, ν)), box(2.0*β*inv(Λ)));
}

/*
 * Update the parameters of an inverse-gamma distribution with a linear
 * scaling and Gaussian likelihood.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_multivariate_normal_inverse_gamma(x:Real[_], ν:Real[_],
    Λ:Real[_,_], α:Real, β:Real) -> (Real, Real) {
  let D <- length(x);
  let μ <- solve(Λ, ν);
  return (α + 0.5*D, β + 0.5*dot(x - μ, Λ*(x - μ)));
}

/*
 * Update the parameters of an inverse-gamma distribution with a linear
 * scaling and Gaussian likelihood.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_lazy_multivariate_normal_inverse_gamma(x:Expression<Real[_]>,
    ν:Expression<Real[_]>, Λ:Expression<Real[_,_]>, α:Expression<Real>,
    β:Expression<Real>) -> (Expression<Real>, Expression<Real>) {
  let D <- x.length();
  let μ <- solve(Λ, ν);
  return (box(α + 0.5*D), box(β + 0.5*dot(x - μ, Λ*(x - μ))));
}
