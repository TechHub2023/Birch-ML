/**
 * Dirichlet-multinomial distribution.
 */
final class DirichletMultinomialDistribution<Arg1,Arg2>(n:Arg1, α:Arg2) <
    Distribution<Integer[_]> {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;
   
  /**
   * Category concentrations.
   */
  α:Arg2 <- α;

  override function supportsLazy() -> Boolean {
    return false;
  }

  override function simulate() -> Integer[_] {
    return simulate_dirichlet_multinomial(value(n), value(α));
  }
  
  override function logpdf(x:Integer[_]) -> Real {
    return logpdf_dirichlet_multinomial(x, value(n), value(α));
  }

  override function update(x:Integer[_]) -> Delay? {
    return update_dirichlet_multinomial(x, value(n), value(α));
  }
}

function DirichletMultinomial<Arg1,Arg2>(n:Arg1, α:Arg2) -> {
  return construct<DirichletMultinomialDistribution<Arg1,Arg2>>(n, α);
}

/**
 * Create multinomial distribution.
 */
function Multinomial<Arg>(n:Arg, ρ:Random<Real[_]>) ->
    Distribution<Integer[_]> {
  ρ.prune();
  if ρ.hasDirichlet() {
    let α <- ρ.getDirichlet();
    let p <- DirichletMultinomial(n, α);
    ρ.graft(p);
    return p;
  } else {
    return construct<MultinomialDistribution<Arg,Random<Real[_]>>>(n, ρ);
  }
}

/*
 * Simulate a Dirichlet-multinomial distribution.
 *
 * - n: Number of trials.
 * - α: Concentrations.
 */
function simulate_dirichlet_multinomial(n:Integer, α:Real[_]) -> Integer[_] {
  return simulate_multinomial(n, simulate_dirichlet(α));
}

/*
 * Observe a Dirichlet-multinomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Concentrations.
 *
 * Returns: the log probability mass.
 */
function logpdf_dirichlet_multinomial(x:Integer[_], n:Integer, α:Real[_]) ->
    Real {
  assert length(x) == length(α);
  let A <- sum(α);
  let m <- 0;
  let w <- lgamma(n + 1.0) + lgamma(A) - lgamma(n + A);
  for i in 1..length(α) {
    assert x[i] >= 0;
    m <- m + x[i];
    w <- w + lgamma(x[i] + α[i]) - lgamma(x[i] + 1.0) - lgamma(α[i]);
  }
  if m == n {
    return w;
  } else {
    return -inf;
  }
}

/*
 * Update the parameters of a Dirichlet distribution with a multinomial
 * likelihood.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α': Prior concentrations.
 *
 * Returns: the posterior hyperparameters `α'`.
 */
function update_dirichlet_multinomial(x:Integer[_], n:Integer, α:Real[_]) ->
    DirichletDistribution<Real[_]> {
  assert sum(x) == n;
  return Dirichlet(transform(x, α, \(x:Integer, α:Real) -> { return x + α; }));
}
