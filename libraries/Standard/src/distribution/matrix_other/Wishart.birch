/**
 * Wishart distribution.
 */
final class Wishart(Ψ:Expression<Real[_,_]>, k:Expression<Real>) <
    Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  Ψ:Expression<Real[_,_]> <- Ψ;
  
  /**
   * Degrees of freedom.
   */
  k:Expression<Real> <- k;

  function rows() -> Integer {
    return Ψ.rows();
  }

  function columns() -> Integer {
    return Ψ.columns();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_,_] {
    return simulate_wishart(Ψ.value(), k.value());
  }

  function simulateLazy() -> Real[_,_]? {
    return simulate_wishart(Ψ.peak(), k.peak());
  }
  
  function logpdf(X:Real[_,_]) -> Real {
    return logpdf_wishart(X, Ψ.value(), k.value());
  }

  function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return logpdf_lazy_wishart(X, Ψ, k);
  }

  function graftWishart() -> Wishart? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Wishart");
    buffer.set("Ψ", Ψ);
    buffer.set("k", k);
  }
}

/**
 * Create Wishart distribution.
 */
function Wishart<Left,Right>(Ψ:Left, k:Right) -> {
  return construct<Wishart>(box(Ψ), box(k));
}

/*
 * Simulate a Wishart distribution.
 *
 * - Ψ: Scale.
 * - k: Degrees of freedom.
 */
function simulate_wishart(Ψ:Real[_,_], k:Real) -> Real[_,_] {
  assert rows(Ψ) == columns(Ψ);
  assert k > rows(Ψ) - 1.0;
  let p <- rows(Ψ);
  A:Real[p,p];
  
  for i in 1..p {
    for j in 1..p {
      if j == i {
        /* on diagonal */
        A[i,j] <- sqrt(simulate_chi_squared(k - i + 1.0));
      } else if j < i {
        /* in lower triangle */
        A[i,j] <- simulate_gaussian(0.0, 1.0);
      } else {
        /* in upper triangle */
        A[i,j] <- 0.0;
      }
    }
  }
  return outer(cholesky(Ψ)*A);
}

/*
 * Observe a Wishart variate.
 *
 * - X: The variate.
 * - Ψ: Scale.
 * - ν: Degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_wishart(X:Real[_,_], Ψ:Real[_,_], ν:Real) -> Real {
  let p <- columns(Ψ);
  assert ν > p - 1;
  return 0.5*(ν - p - 1.0)*ldet(X) - 0.5*trace(solve(Ψ, matrix<Real>(X))) -
      0.5*ν*(p*log(2.0) + ldet(Ψ)) - lgamma(0.5*ν, p);
}

/*
 * Observe a Wishart variate.
 *
 * - X: The variate.
 * - Ψ: Scale.
 * - ν: Degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_wishart(X:Expression<Real[_,_]>, Ψ:Expression<Real[_,_]>, ν:Expression<Real>) -> Expression<Real> {
  let p <- columns(Ψ);
  return box(0.5*(ν - p - 1.0)*ldet(X) - 0.5*trace(solve(Ψ, matrix<Real>(X))) -
      0.5*ν*(p*log(2.0) + ldet(Ψ)) - lgamma(0.5*ν, p));
}
