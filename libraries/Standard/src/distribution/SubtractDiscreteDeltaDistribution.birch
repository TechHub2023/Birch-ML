/**
 * Delta distribution on difference of two bounded discrete random variables.
 */
final class SubtractDiscreteDeltaDistribution(p:BoundedDiscreteDistribution,
    q:BoundedDiscreteDistribution) < BoundedDiscreteDistribution {
  /**
   * Distribution over first random variable.
   */
  p:BoundedDiscreteDistribution <- p;

  /**
   * Distribution over second random variable.
   */
  q:BoundedDiscreteDistribution <- q;

  /**
   * Value at which probabilities have been enumerated.
   */
  x:Integer?;
  
  /**
   * If enumerated, then the lower bound on the support of `p`.
   */
  l:Integer <- 0;

  /**
   * If enumerated, then the upper bound on the support of `p`.
   */
  u:Integer <- 0;

  /**
   * If enumerated, then the probabilities across the support of `p`, starting
   * from `l`.
   */
  z:Real[_];
  
  /**
   * If enumerated, then the sum of `z`.
   */
  Z:Real <- 0.0;

  function enumerate(x:Integer!) {
    if !this.x? || this.x! != x! {
      l <- max(p.lower()!!, x! + q.lower()!!);
      u <- min(p.upper()!!, x! + q.upper()!!);
      Z <- -inf;
      if l <= u {
        /* distribution over possible pairs that produce the given sum */
        z <- vector_lambda(\(i:Integer) -> {
              let n <- l + i - 1;
              return p.logpdf(n)! + q.logpdf(n - x!)!;
            }, u - l + 1);
        Z <- log_sum_exp(z);
        z <- norm_exp(z);
      }
      this.x <- x!;
    }
  }

  override function simulate() -> Integer! {
    return p.simulate() - q.simulate();
  }

  override function logpdf(x:Integer!) -> Real! {
    enumerate(x);
    return Z;
  }

  override function update(x:Integer!) -> Delay? {
    enumerate(x);
    return construct<SubtractDiscreteConstrainedDistribution>(z, l, x!);
  }
  
  override function lower() -> Integer!? {
    return p.lower()! - q.upper()!;
  }
  
  override function upper() -> Integer!? {
    return p.upper()! - q.lower()!;
  }

  override function constant() {
    super.constant();
    p.constant();
    q.constant();
  }
}

/**
 * Create delta distribution.
 */
function Delta(μ:Sub<Random<Integer>,Random<Integer>>) ->
    Distribution<Integer> {
  let l <- μ.l;
  let r <- μ.r;
  if l.isBoundedDiscrete() && r.isBoundedDiscrete() {
    let p_l <- l.graft().getBoundedDiscrete()!;
    let p_r <- r.graft().getBoundedDiscrete()!;
    let p <- construct<SubtractDiscreteDeltaDistribution>(p_l, p_r);
    p_l.setMarginalized(p_r);
    p_r.setMarginalized(p);
    return p;
	} else if l.isBoundedDiscrete() {
    let x ~ Delta(r);
    return Delta(l - x);
  } else if r.isBoundedDiscrete() {
    let x ~ Delta(l);
    return Delta(x - r);
  } else {
		return wrap_delta(μ);
	}
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Sub<Random<Integer>,Arg>) -> Distribution<Integer> {
  let r ~ Delta(μ.r);
  return Delta(μ.l - r);
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Sub<Arg,Random<Integer>>) -> Distribution<Integer> {
  let l ~ Delta(μ.l);
  return Delta(l - μ.r);
}

/**
 * Create delta distribution.
 */
function Delta<Arg1,Arg2>(μ:Sub<Arg1,Arg2>) -> Distribution<Integer> {
  let l ~ Delta(μ.l);
  let r ~ Delta(μ.r);
  return Delta(l - r);
}
