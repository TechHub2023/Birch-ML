/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class LinearMatrixNormalInverseWishartMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6) <
    Distribution<Real[_]> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Among-row precision times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row precision.
   */
  Λ:Arg3 <- Λ;

  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        value(a), value(N), value(Λ), value(Ψ), value(k)) + value(c);
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        peek(a), peek(N), peek(Λ), peek(Ψ), peek(k)) + peek(c);
  }
  
  override function logpdf(x:Real[_]) -> Real {
    return logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        x - value(c), value(a), value(N), value(Λ), value(Ψ), value(k));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), a, N, Λ, Ψ, k));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
         x - value(c), value(a), value(N), value(Λ), value(Ψ), value(k));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_multivariate_gaussian(
        box(x - c), a, N, Λ, Ψ, k);
  }
}

function LinearMatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(a:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6) -> {
  return construct<LinearMatrixNormalInverseWishartMultivariateGaussianDistribution<Arg1,
      Arg2,Arg3,Arg4,Arg5,Arg6>>(a, N, Λ, Ψ, k, c);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(
    μ:Add<Dot<Arg1,Random<Real[_,_]>>,Arg2>, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMatrixNormalInverseWishart()&& μ.l.r.isGrandChildOf(Σ) {
    let (N, Λ, Ψ, k) <- μ.l.r.getMatrixNormalInverseWishart();
    let p <- LinearMatrixNormalInverseWishartMultivariateGaussian(μ.l.l, N, Λ,
        Ψ, k, μ.r);
    μ.l.r.graft(p, 1);
    Σ.graftReplace(p, 2);
    μ.l.r.join(Σ);
    return p;
  } else {
    Σ.prune();
    // if Σ.hasInverseWishart() {
    //   return construct<MultivariateGaussianDistribution<Add<Dot<Arg1,
    //       Random<Real[_,_]>>,Arg2>,Random<Real[_,_]>>>(μ, Σ);
    // } else {
      return construct<MultivariateGaussianDistribution<Add<Dot<Arg1,
          Random<Real[_,_]>>,Arg2>,Random<Real[_,_]>>>(μ, Σ);
    // }
  }
}
