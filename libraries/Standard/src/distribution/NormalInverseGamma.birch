/**
 * Normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$\sigma^2 \sim \mathrm{Inverse-Gamma}(\alpha, \beta)$$
 * $$x \mid \sigma^2 \sim \mathrm{N}(\mu, a^2\sigma^2),$$
 *
 * which may be denoted:
 *
 * $$(x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma(\mu, a^2, \alpha, \beta),$$
 *
 * and is the conjugate prior of a Gaussian distribution with both
 * unknown mean and unknown variance.
 *
 * In model code, it is not usual to use this final class directly. Instead,
 * establish the conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, β);
 *     x ~ Gaussian(μ, a^2*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `a2` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 */
final class NormalInverseGamma(μ:Expression<Real>, a2:Expression<Real>,
    σ2:InverseGamma) < Distribution<Real> {
  /**
   * Mean.
   */
  μ:Expression<Real> <- μ;
  
  /**
   * Precision scale.
   */
  λ:Expression<Real> <- box(1.0/a2);
  
  /**
   * Variance.
   */
  σ2:InverseGamma <- σ2;
  
  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_normal_inverse_gamma(μ.value(), 1.0/λ.value(), σ2.α.value(), σ2.β.value());
  }

  function simulateLazy() -> Real? {
    return simulate_normal_inverse_gamma(μ.eval(), 1.0/λ.eval(), σ2.α.eval(), σ2.β.eval());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_normal_inverse_gamma(x, μ.value(), 1.0/λ.value(), σ2.α.value(), σ2.β.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_normal_inverse_gamma(x, μ, box(1.0/λ), σ2.α, σ2.β);
  }

  function update(x:Real) {
    (σ2.α, σ2.β) <- box(update_normal_inverse_gamma(x, μ.value(), λ.value(), σ2.α.value(), σ2.β.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (σ2.α, σ2.β) <- update_lazy_normal_inverse_gamma(x, μ, λ, σ2.α, σ2.β);
  }

  function cdf(x:Real) -> Real? {
    return cdf_normal_inverse_gamma(x, μ.value(), 1.0/λ.value(), σ2.α.value(), σ2.β.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_normal_inverse_gamma(P, μ.value(), 1.0/λ.value(), σ2.α.value(), σ2.β.value());
  }

  function graftNormalInverseGamma(compare:Distribution<Real>) ->
      NormalInverseGamma? {
    prune();
    if σ2 == compare {
      return this;
    } else {
      return nil;
    }
  }

  function link() {
    σ2.setChild(this);
  }
  
  function unlink() {
    σ2.releaseChild(this);
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "NormalInverseGamma");
    buffer.set("μ", μ);
    buffer.set("a2", 1.0/λ);
    buffer.set("α", σ2.α);
    buffer.set("β", σ2.β);
  }
}

function NormalInverseGamma<Left,Middle>(μ:Left, a2:Middle, σ2:InverseGamma) -> {
  m:NormalInverseGamma(box(μ), box(a2), σ2);
  m.link();
  return m;
}

/*
 * Simulate a normal inverse-gamma distribution.
 *
 * - μ: Mean.
 * - a2: Variance scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 */
function simulate_normal_inverse_gamma(μ:Real, a2:Real, α:Real,
    β:Real) -> Real {
  return simulate_student_t(2.0*α, μ, a2*2.0*β);
}

/*
 * Observe a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - a2: Variance scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Returns: the log probability density.
 */
function logpdf_normal_inverse_gamma(x:Real, μ:Real, a2:Real, α:Real,
    β:Real) -> Real {
  return logpdf_student_t(x, 2.0*α, μ, a2*2.0*β);
}

/*
 * Observe a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - a2: Variance scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_normal_inverse_gamma(x:Expression<Real>, μ:Expression<Real>, a2:Expression<Real>, α:Expression<Real>,
    β:Expression<Real>) -> Expression<Real> {
  return logpdf_lazy_student_t(x, box(2.0*α), μ, box(a2*2.0*β));
}

/*
 * Update the parameters of an inverse-gamma distribution that is part
 * of a normal inverse-gamma joint distribution.
 *
 * - x: The variate.
 * - μ: Mean.
 * - λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_normal_inverse_gamma(x:Real, μ:Real, λ:Real, α:Real,
    β:Real) -> (Real, Real) {
  return (α + 0.5, β + 0.5*pow(x - μ, 2.0)*λ);
}

/*
 * Update the parameters of an inverse-gamma distribution that is part
 * of a normal inverse-gamma joint distribution.
 *
 * - x: The variate.
 * - μ: Mean.
 * - λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_lazy_normal_inverse_gamma(x:Expression<Real>,
    μ:Expression<Real>, λ:Expression<Real>, α:Expression<Real>,
    β:Expression<Real>) -> (Expression<Real>, Expression<Real>) {
  return (box(α + 0.5), box(β + 0.5*pow(x - μ, 2.0)*λ));
}

/*
 * CDF of a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Variance.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 *
 * Return: the cumulative probability.
 */
function cdf_normal_inverse_gamma(x:Real, μ:Real, σ2:Real, α:Real,
    β:Real) -> Real {
  return cdf_student_t(x, 2.0*α, μ, σ2*2.0*β);
}

/*
 * Quantile of a normal inverse-gamma distribution.
 *
 * - P: The cumulative probability.
 * - μ: Mean.
 * - a2: Variance scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Return: the quantile.
 */
function quantile_normal_inverse_gamma(P:Real, μ:Real, a2:Real, α:Real,
    β:Real) -> Real {
  return quantile_student_t(P, 2.0*α, μ, a2*β/α);
}
