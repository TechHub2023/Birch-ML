/**
 * Categorical distribution.
 *
 * - ρ: Probabilities.
 */
final class Categorical(ρ:Expression<Real[_]>) < Distribution<Integer> {
  /**
   * Category probabilities.
   */
  ρ:Expression<Real[_]> <- ρ;

  function supportsLazy() -> Boolean {
    return false;
  }

  function simulate() -> Integer {
    return simulate_categorical(ρ.value());
  }

//  function simulateLazy() -> Integer? {
//    return simulate_categorical(ρ.eval());
//  }
  
  function logpdf(x:Integer) -> Real {
    return logpdf_categorical(x, ρ.value());
  }

//  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
//    return logpdf_lazy_categorical(x, ρ);
//  }

  function cdf(x:Integer) -> Real? {
    return cdf_categorical(x, ρ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_categorical(P, ρ.value());
  }

  function lower() -> Integer? {
    return 1;
  }

  function upper() -> Integer? {
    return ρ.rows();
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Categorical");
    buffer.set("ρ", ρ);
  }
}

/**
 * Create categorical distribution.
 */
function Categorical<Middle>(ρ:Middle) -> {
  return construct<Categorical>(box(ρ));
}

/**
 * Create categorical distribution.
 */
function Categorical(ρ:Random<Real[_]>) -> Distribution<Integer> {
  m1:Dirichlet?;
  m2:Restaurant?;
  if (m1 <- ρ.graftDirichlet())? {
    return DirichletCategorical(m1!);
  } else if (m2 <- ρ.graftRestaurant())? {
    return RestaurantCategorical(m2!);
  } else {
    return construct<Categorical>(ρ);
  }    
}
