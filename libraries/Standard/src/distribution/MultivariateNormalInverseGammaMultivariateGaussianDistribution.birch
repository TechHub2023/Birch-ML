/**
 * Multivariate Gaussian distribution with linear transformation of
 * multivariate-normal-inverse-gamma prior.
 */
class MultivariateNormalInverseGammaMultivariateGaussianDistribution<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, k:Arg4,
    β:Arg5, c:Arg6, Ω:Arg7) < MultivariateTDistribution<Arg4,
    Expression<Real[_]>,Expression<Real[_,_]>>(k, box(A*μ + c),
    box(chol((2.0*β)*(A*triouter(Σ)*transpose(A) + triouter(Ω))))) {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Variance scale.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Covariance scale.
   */
  Ω:Arg7 <- Ω;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, value(A), value(μ), value(Σ), value(super.k), value(β), value(c),
        value(Ω), value(super.μ), value(super.Σ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, A, μ, Σ, super.k, β, c, Ω, super.μ, super.Σ);
  }

  override function constant() {
    super.constant();
    global.constant(A);
    global.constant(μ);
    global.constant(Σ);
    global.constant(β);
    global.constant(c);
    global.constant(Ω);
  }
}

function MultivariateNormalInverseGammaMultivariateGaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, Ω:Arg7) -> Distribution<Real[_]> {
  return wrap_multivariate_normal_inverse_gamma_multivariate_gaussian(
      A, μ, chol(Σ), 2.0*α, β, c, chol(Ω));
}
function wrap_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, k:Arg4,
    β:Arg5, c:Arg6, Ω:Arg7) -> {
  return make_multivariate_normal_inverse_gamma_multivariate_gaussian(
      wrap(A), wrap(μ), wrap(Σ), wrap(k), wrap(β), wrap(c), wrap(Ω));
}
function make_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, μ:Arg2, Σ:Arg3, k:Arg4,
    β:Arg5, c:Arg6, Ω:Arg7) -> {
  return construct<MultivariateNormalInverseGammaMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, μ, Σ, k, β, c, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<OpMul<Arg1,
    Random<Real[_]>>,Arg2>, Ω:OpMul<Arg3,Random<Real>>) ->
    Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseGamma() && μ.l.r.isGrandChildOf(Ω.r) {
    let (m, Σ, k, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_multivariate_normal_inverse_gamma_multivariate_gaussian(
        μ.l.l, m, Σ, k, β, μ.r, chol(Ω.l));
    μ.l.r.graft(p, 1);
    Ω.r.graftReplace(p, 2);
    μ.l.r.join(Ω.r);
    return p;
  } else {
    Ω.r.prune();
    if Ω.r.hasInverseGamma() {
      let (α, β) <- Ω.r.getInverseGamma();
      let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω.l), 2.0*α, β);
      Ω.r.graft(p);
      return p;
    } else {
      return wrap_multivariate_gaussian(μ, Ω);
    }
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:OpMul<Arg1,Random<Real[_]>>,
    Ω:OpMul<Arg2,Random<Real>>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>,
    Ω:OpMul<Arg,Random<Real>>) -> Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ + 0.0, Ω);
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - k: Prior degrees of freedom of the inverse-gamma ($k = 2\alpha$).
 * - β: Prior scale of the inverse-gamma.
 * - c: Offset.
 * - Ω: Covariance scale.
 * - m: Precomputed marginal mean.
 * - T: Precomputed marginal covariance.
 *
 * Returns: the posterior hyperparameters `μ'`, `Σ'`, `k'` and `β'`.
 */
function update_multivariate_normal_inverse_gamma_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9,Arg10>(x:Arg1, A:Arg2,
    μ:Arg3, Σ:Arg4, k:Arg5, β:Arg6, c:Arg7, Ω:Arg8, m:Arg9, T:Arg10) -> {
  let n <- length(x);
  let S <- wrap(triouter(Σ));
  let K' <- wrap(2.0*β*S*transpose(A)*cholinv(T));
  let μ' <- wrap(μ + K'*(x - m));
  let Σ' <- wrap(chol(S - K'*A*S));
  let k' <- k + n;
  let β' <- β + 0.5*(dot(trisolve(Ω, x - c)) + dot(trisolve(Σ, μ)) -
      dot(trisolve(Σ', μ')));
  return wrap_multivariate_normal_inverse_gamma(μ', Σ', k', β');
}
