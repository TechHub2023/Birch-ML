/**
 * Delta distribution convolved with a bounded discrete distribution.
 *
 * - p: Bounded discrete distribution.
 */
final class DiscreteDeltaDistribution(p:BoundedDiscreteDistribution) <
    BoundedDiscreteDistribution {
  /**
   * Distribution.
   */
  p:BoundedDiscreteDistribution <- p;

  override function supportsLazy() -> Boolean {
    return p.supportsLazy();
  }

  override function simulate() -> Integer! {
    return p.simulate();
  }

  override function simulateLazy() -> Integer!? {
    return p.simulateLazy();
  }

  override function logpdf(x:Integer!) -> Real! {
    return p.logpdf(x);
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return p.logpdfLazy(x);
  }

  override function update(x:Integer!) -> Delay? {
    return Delta(x);
  }

  override function updateLazy(x:Expression<Integer>) -> Delay? {
    return Delta(x);
  }

  override function lower() -> Integer!? {
		return p.lower();
  }
  
  override function upper() -> Integer!? {
	  return p.upper();
  }
}

/**
 * Create delta distribution.
 */
function Delta(μ:Random<Integer>) -> Distribution<Integer> {
	μ.prune();
	if μ.hasBoundedDiscrete() {
    let p <- construct<DiscreteDeltaDistribution>(μ.getBoundedDiscrete());
    μ.graft(p);
    return p;
  } else {
  	return wrap_delta(μ);
  }
}
