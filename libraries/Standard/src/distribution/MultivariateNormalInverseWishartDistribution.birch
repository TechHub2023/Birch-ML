/**
 * Multivariate normal-inverse-Wishart distribution.
 *
 * !!! note
 *     This class does not inherit from MultivariateTDistribution, as it is
 *     typically used for a random variable that is marginalized out.
 */
final class MultivariateNormalInverseWishartDistribution<Arg1,Arg2,Arg3,Arg4>(
    μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4) < Distribution<Real[_]> {
  /**
   * Mean.
   */
  μ:Arg1 <- μ;

  /**
   * Scale.
   */
  σ2:Arg2 <- σ2;
  
  /**
   * Spread.
   */
  Ψ:Arg3 <- Ψ;
  
  /**
   * Degrees of freedom.
   */
  k:Arg4 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_multivariate_normal_inverse_wishart(value(μ), value(σ2),
        value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_multivariate_normal_inverse_wishart(eval(μ), eval(σ2),
        eval(Ψ), eval(k));
  }
  
  override function logpdf(x:Real[_]) -> Real! {   
    return logpdf_multivariate_normal_inverse_wishart(x, value(μ), value(σ2),
        value(Ψ), value(k));
  }

  override function logpdfLazy(x:Real[_]) -> Real!? {   
    return logpdf_multivariate_normal_inverse_wishart(x, eval(μ), eval(σ2),
        eval(Ψ), eval(k));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_wishart(x, value(μ), value(σ2),
        value(Ψ), value(k));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_wishart(x, μ, σ2, Ψ, k);
  }

  override function hoist() -> Expression<Real>? {   
    return box(logpdf_multivariate_normal_inverse_wishart(this.getVariate(),
        μ, σ2, Ψ, k));
  }

  override function constant() {
    super.constant();
    global.constant(μ);
    global.constant(σ2);
    global.constant(Ψ);
    global.constant(k);
  }

  override function isMultivariateNormalInverseWishart() -> Boolean {
    return true;
  }

  override function getMultivariateNormalInverseWishart() ->
      (Expression<Real[_]>, Expression<Real>, Expression<Real[_,_]>,
      Expression<Real>) {
    return box(μ, σ2, Ψ, k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateNormalInverseWishart");
    buffer.set("μ", value(μ));
    buffer.set("σ2", value(σ2));
    buffer.set("Ψ", value(Ψ));
    buffer.set("k", value(k));
  }
}

function MultivariateNormalInverseWishart<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    σ2:Arg2, Ψ:Arg3, k:Arg4) -> Distribution<Real[_]> {
  return wrap_multivariate_normal_inverse_wishart(μ, σ2, chol(Ψ), k);
}
function wrap_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    σ2:Arg2, Ψ:Arg3, k:Arg4) -> {
  return make_multivariate_normal_inverse_wishart(wrap(μ), wrap(σ2), wrap(Ψ),
      wrap(k));
}
function make_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    σ2:Arg2, Ψ:Arg3, k:Arg4) -> {
  return construct<MultivariateNormalInverseWishartDistribution<Arg1,Arg2,
      Arg3,Arg4>>(μ, σ2, Ψ, k);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1,
    Σ:Mul<Arg2,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  let ω2 <- Σ.l;
  let Ω <- Σ.r;
  if Ω.hasNext() && Ω.getNext().isInverseWishart() {
    Ω.prune();
    let (Ψ, k) <- Ω.getNext().getInverseWishart();
    let p <- wrap_multivariate_normal_inverse_wishart(μ, ω2, Ψ, k);
    Ω.setNext(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1>(μ:Arg1, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  return MultivariateGaussian(μ, 1.0*Σ);
}

/*
 * Simulate a multivariate normal-inverse-Wishart distribution.
 *
 * - μ: Mean.
 * - σ2: Covariance.
 * - Ψ: Covariance shape.
 * - k: Degrees of freedom.
 */
function simulate_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(
    μ:Arg1, σ2:Arg2, Ψ:Arg3, k:Arg4) -> {
  return simulate_multivariate_t(k, μ, sqrt(σ2)*Ψ);
}

/*
 * Observe a multivariate normal-inverse-Wishart variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Covariance.
 * - Ψ: Prior variance spread.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5) -> {
  return logpdf_multivariate_t(x, k, μ, sqrt(σ2)*Ψ);
}

/*
 * Update the parameters of a multivariate normal-inverse-Wishart variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Variance scale.
 * - Ψ: Prior variance spread.
 * - k: Prior degrees of freedom.
 *
 * Returns: the posterior hyperparameters `Ψ'` and `k'`.
 */
function update_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, μ:Arg2, σ2:Arg3, Ψ:Arg4, k:Arg5) -> {
  let Ψ' <- chol(triouter(Ψ) + outer(x - μ)/σ2);
  let k' <- k + 1;
  return wrap_inverse_wishart(Ψ', k');
}
