/**
 * Delta function on a difference of two bounded discrete random
 * variates.
 */
final class SubtractDiscreteDelta(x1:BoundedDiscrete, x2:BoundedDiscrete) <
    BoundedDiscrete {
  /**
   * First discrete random variate.
   */
  x1:BoundedDiscrete <- x1;

  /**
   * Second discrete random variate.
   */
  x2:BoundedDiscrete <- x2;
  
  /**
   * Value for which conditional probabilities have been enumerated.
   */
  x:Integer?;
  
  /**
   * The lower bound of `x1`.
   */
  x0:Integer;
  
  /**
   * The probabilities of all possible values of `x1`, starting from `x0`.
   */
  z:Real[_];
  
  /**
   * The sum of `z`.
   */
  Z:Real;

  function enumerate(x:Integer) {
    if !this.x? || this.x! != x {
      let l <- max(x1.lower()!, x2.lower()! + x);
      let u <- min(x1.upper()!, x2.upper()! + x);

      x0 <- l;
      Z <- 0.0;
      if l <= u {
        /* distribution over possible pairs that produce the given diff */
        z <- vector(0.0, u - l + 1);
        for n in l..u {
          z[n - l + 1] <- x1.pdf(n)*x2.pdf(n - x);
          Z <- Z + z[n - l + 1];
        }
      }
      this.x <- x;
    }
  }

  function supportsLazy() -> Boolean {
    return false;
  }

  function simulate() -> Integer {
    return simulate_delta(x1.simulate() - x2.simulate());
  }
  
//  function simulateLazy() -> Integer? {
//    return simulate_delta(x1.simulateLazy()! - x2.simulateLazy()!);
//  }

  function logpdf(x:Integer) -> Real {
    enumerate(x);
    return log(Z);
  }

//  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
//    enumerate(x);
//    return log(Z);
//  }

  function update(x:Integer) {
    /* choose a pair with the given difference and clamp parents */
    enumerate(x);
    let n <- simulate_categorical(z, Z) + x0 - 1;
    x1.clamp(n);
    x2.clamp(n - x);
  }

//  function updateLazy(x:Expression<Integer>) {
//
//  }

  function cdf(x:Integer) -> Real? {
    let P <- 0.0;
    for n in lower()!..x {
      P <- P + pdf(n);
    }
    return P;
  }
  
  function lower() -> Integer? {
    return x1.lower()! - x2.upper()!;
  }
  
  function upper() -> Integer? {
    return x1.upper()! - x2.lower()!;
  }

  function link() {
    x1.setChild(this);
    x2.setChild(this);
  }
  
  function unlink() {
    x1.releaseChild(this);
    x2.releaseChild(this);
  }
}

function SubtractDiscreteDelta(x1:BoundedDiscrete, x2:BoundedDiscrete) -> SubtractDiscreteDelta {
  m:SubtractDiscreteDelta(x1, x2);
  m.link();
  return m;
}

/**
 * Create delta distribution.
 */
function Delta(μ:Subtract<Random<Integer>,Random<Integer>>) -> Distribution<Integer> {
  let l1 <- μ.l!.graftBoundedDiscrete();
  let r1 <- μ.r!.graftBoundedDiscrete();
  if l1? && r1? {
    return SubtractDiscreteDelta(l1!, r1!);
  } else {
    let l2 <- μ.l!.graftDiscrete();
    let r2 <- μ.r!.graftDiscrete();
    if l2? {
      return LinearDiscreteDelta(1, l2!, -μ.r!);
    } else if r2? {
      return LinearDiscreteDelta(-1, r2!, μ.l!);
    } else {
      return construct<Delta>(box(μ));
    }
  }
}
