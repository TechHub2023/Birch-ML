/**
 * Conway-Maxwell-Poisson distribution.
 *
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * The distribution is always truncated on $[0,n]$ because of an intractable
 * normalizing constant that can only be expressed as an infinite series on
 * the support of the non-truncated distribution, $[0,\infty)$. The larger
 * $n$, the closer the approximation to the non-truncated distribution---if
 * that is desired---but the more expensive operations: most are $O(n)$.
 */
class ConwayMaxwellPoisson<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2, n:Arg3) <
    BoundedDiscrete {
  /**
   * Rate.
   */
  λ:Arg1 <- λ;

  /**
   * Dispersion.
   */
  ν:Arg2 <- ν;

  /**
   * Truncation point.
   */
  n:Arg3 <- n;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer {
    return simulate_conway_maxwell_poisson(value(λ), value(ν), value(n));
  }

  override function simulateLazy() -> Integer? {
    return simulate_conway_maxwell_poisson(peek(λ), peek(ν), peek(n));
  }

  override function logpdf(x:Integer) -> Real {
    return logpdf_conway_maxwell_poisson(x, value(λ), value(ν), value(n));
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_conway_maxwell_poisson(x, λ, ν, n));
  }

  override function cdf(x:Integer) -> Real? {
    return cdf_conway_maxwell_poisson(x, value(λ), value(ν), value(n));
  }

  override function quantile(P:Real) -> Integer? {
    return quantile_conway_maxwell_poisson(P, value(λ), value(ν), value(n));
  }

  override function lower() -> Integer? {
    return 0;
  }

  override function upper() -> Integer? {
    return value(n);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "ConwayMaxwellPoisson");
    buffer.set("λ", value(λ));
    buffer.set("ν", value(ν));
    buffer.set("n", value(n));
  }
}

/**
 * Create Conway-Maxwell-Poisson distribution.
 */
function ConwayMaxwellPoisson<Arg1,Arg2,Arg3>(λ:Arg1, ν:Arg2, n:Arg3) -> {
  return construct<ConwayMaxwellPoisson<Arg1,Arg2,Arg3>>(λ, ν, n);
}

/*
 * Simulate a Conway-Maxwell-Poisson distribution.
 *
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 */
function simulate_conway_maxwell_poisson(λ:Real, ν:Real, n:Integer) ->
    Integer {
  let p <- p_conway_maxwell_poisson(λ, ν, n);
  return simulate_categorical(p, sum(p)) - 1;
}

/*
 * Observe a Conway-Maxwell-Poisson variate.
 *
 * - x: The variate.
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Returns: the log probability mass.
 */
function logpdf_conway_maxwell_poisson<Arg1,Arg2,Arg3,Arg4>(x:Arg1, λ:Arg2,
    ν:Arg3, n:Arg4) -> {
  return x*log(λ) - ν*lgamma(x + 1) - logz_conway_maxwell_poisson(λ, ν, n);
}

/*
 * CDF of a Conway-Maxwell-Poisson variate.
 *
 * - x: The variate.
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: the cumulative probability.
 */
function cdf_conway_maxwell_poisson(x:Integer, λ:Real, ν:Real, n:Integer) ->
    Real {
  let p <- p_conway_maxwell_poisson(λ, ν, n);
  return cdf_categorical(x + 1, p, sum(p));
}

/*
 * Quantile of a Conway-Maxwell-Poisson distribution.
 *
 * - P: The cumulative probability.
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: the quantile.
 */
function quantile_conway_maxwell_poisson(P:Real, λ:Real, ν:Real,
    n:Integer) -> Integer {
  let p <- p_conway_maxwell_poisson(λ, ν, n);
  return quantile_categorical(P, p, sum(p)) - 1;
}

/*
 * Enumerated probabilities of a Conway-Maxwell-Poisson distribution truncated
 * on a finite interval $[0,n]$.
 *
 * - λ: Rate.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: vector of probabilities on $[0,n]$.
 */
function p_conway_maxwell_poisson(λ:Real, ν:Real, n:Integer) -> Real[_] {
  let log_λ <- log(λ);
  let z <- vector_lambda(\(x:Integer) -> {
        return if_then_else(x == 1, 0.0, (x - 1)*log_λ - ν*lgamma(x));
      }, n + 1);
  let mx <- max(z);
  let p <- transform(z, \(x:Real) -> { return exp(x - mx); });
  return p/sum(p);
}
