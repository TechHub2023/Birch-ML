/**
 * Scaled gamma-Poisson distribution.
 */
final class ScaledGammaPoisson(a:Expression<Real>, λ:Gamma) < Discrete {
  /**
   * Scale.
   */
  a:Expression<Real> <- a;

  /**
   * Rate.
   */
  λ:Gamma <- λ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_gamma_poisson(λ.k.value(), a.value()*λ.θ.value());
  }

  function simulateLazy() -> Integer? {
    return simulate_gamma_poisson(λ.k.peak(), a.peak()*λ.θ.peak());
  }
  
  function logpdf(x:Integer) -> Real {
    return logpdf_gamma_poisson(x, λ.k.value(), a.value()*λ.θ.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_gamma_poisson(x, λ.k, box(a*λ.θ));
  }

  function update(x:Integer) {
    (λ.k, λ.θ) <- box(update_scaled_gamma_poisson(x, a.value(), λ.k.value(),
        λ.θ.value()));
  }

  function updateLazy(x:Expression<Integer>) {
    (λ.k, λ.θ) <- update_lazy_scaled_gamma_poisson(x, a, λ.k, λ.θ);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_gamma_poisson(x, λ.k.value(), a.value()*λ.θ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_gamma_poisson(P, λ.k.value(), a.value()*λ.θ.value());
  }

  function lower() -> Integer? {
    return 0;
  }

  function link() {
    λ.setChild(this);
  }
  
  function unlink() {
    λ.releaseChild(this);
  }
}

function ScaledGammaPoisson<Left>(a:Left, λ:Gamma) -> {
  m:ScaledGammaPoisson(box(a), λ);
  m.link();
  return m;
}

/**
 * Create Poisson distribution.
 */
function Poisson<Left>(λ:Multiply<Left,Random<Real>>) -> Distribution<Integer> {
  m:Gamma?;
  if (m <- λ.r!.graftGamma())? {
    return ScaledGammaPoisson(box(λ.l!), m!);
  } else {
    return construct<Poisson>(box(λ));
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson<Right>(λ:Multiply<Random<Real>,Right>) -> Distribution<Integer> {
  m:Gamma?;
  if (m <- λ.l!.graftGamma())? {
    return ScaledGammaPoisson(box(λ.r!), m!);
  } else {
    return construct<Poisson>(box(λ));
  }
}

/*
 * Update the parameters of a scaled Gamma distribution with a Poisson
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_scaled_gamma_poisson(x:Integer, a:Real, k:Real, θ:Real) ->
    (Real, Real) {
  return (k + x, θ/(a*θ + 1.0));
}

/*
 * Update the parameters of a scaled Gamma distribution with a Poisson
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_lazy_scaled_gamma_poisson(x:Expression<Integer>,
    a:Expression<Real>, k:Expression<Real>, θ:Expression<Real>) ->
    (Expression<Real>, Expression<Real>) {
  return (box(k + x), box(θ/(a*θ + 1.0)));
}
