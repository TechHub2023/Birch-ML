/**
 * Restaurant-categorical distribution.
 */
final class RestaurantCategoricalDistribution<Arg1,Arg2,Arg3,Arg4>(α:Arg1, θ:Arg2, n:Arg3,
    N:Arg4) < Distribution<Integer> {
  /**
   * Concentration.
   */
  α:Arg1 <- α;
  
  /**
   * Strength.
   */
  θ:Arg2 <- θ;

  /**
   * Number of samples drawn in each component.
   */
  n:Arg3 <- n;

  /**
   * Number of samples drawn.
   */
  N:Arg4 <- N;

  override function supportsLazy() -> Boolean {
    return false;
  }

  override function simulate() -> Integer {
    return simulate_restaurant_categorical(value(α), value(θ), value(n),
        value(N));
  }
  
  override function logpdf(x:Integer) -> Real {
    return logpdf_restaurant_categorical(x, value(α), value(θ), value(n),
        value(N));
  }

  override function update(x:Integer) -> Delay? {
    return update_restaurant_categorical(x, value(α), value(θ), value(n),
        value(N));
  }
}

function RestaurantCategorical<Arg1,Arg2,Arg3,Arg4>(α:Arg1, θ:Arg2, n:Arg3,
    N:Arg4) -> {
  return construct<RestaurantCategoricalDistribution<Arg1,Arg2,Arg3,Arg4>>(α, θ, n, N);
}

/*
 * Simulate a categorical distribution with Chinese restaurant process
 * prior.
 *
 * - α: Concentration.
 * - θ: Discount.
 * - n: Enumerated items.
 * - N: Total number of items.
 */
function simulate_restaurant_categorical(α:Real, θ:Real, n:Integer[_],
    N:Integer) -> Integer {
  assert N >= 0;
  assert sum(n) == N;
  let k <- 0;
  let K <- length(n);
  if (N == 0) {
    /* first component */
    k <- 1;
  } else {
    let u <- simulate_uniform(0.0, N + θ);
    let U <- K*α + θ;
    if u < U {
      /* new component */
      k <- K + 1;
    } else {
      /* existing component */
      while k < K && u > U {
        k <- k + 1;
        U <- U + n[k] - α;
      }
    }
  }
  return k;
}

/*
 * Observe a categorical variate with Chinese restaurant process
 * prior.
 *
 * - x: The variate.
 * - α: Concentration.
 * - θ: Discount.
 * - n: Enumerated items.
 * - N: Total number of items.
 */
function logpdf_restaurant_categorical(k:Integer, α:Real, θ:Real,
    n:Integer[_], N:Integer) -> Real {
  let K <- length(n);
  if k > K + 1 {
    return -inf;
  } else if (k == K + 1) {
    return log(K*α + θ) - log(N + θ);
  } else {
    return log(n[k] - α) - log(N + θ);
  }
}

/*
 * Update the parameters of a Chinese restaurant process with a categorical
 * likelihood.
 *
 * - x: The variate.
 * - α: Concentration.
 * - θ: Discount.
 * - n: Enumerated items.
 * - N: Total number of items.
 */
function update_restaurant_categorical<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1,
    α:Arg2, θ:Arg3, n:Arg4, N:Arg5) -> {
  let K <- length(n);
  assert x <= K + 1;
  let n' <- vector_lambda(\(i:Integer) -> Integer {
        return n[x] + (x == i);
      }, if_then_else(x == K + 1, K + 1, K));
  let N' <- N + 1;
  return RestaurantCategorical(α, θ, n', N');
}
