/**
 * Beta-negative-binomial distribution.
 */
final class BetaNegativeBinomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) <
    Discrete {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Arg1 <- k;

  /**
   * First shape.
   */
  α:Arg2 <- α;

  /**
   * Second shape.
   */
  β:Arg3 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer {
    return simulate_beta_negative_binomial(value(k), value(α), value(β));
  }

  override function simulateLazy() -> Integer? {
    return simulate_beta_negative_binomial(peak(k), peak(α), peak(β));
  }

  override function logpdf(x:Integer) -> Real {
    return logpdf_beta_negative_binomial(x, value(k), value(α), value(β));
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_beta_negative_binomial(x, k, α, β));
  }

  override function update(x:Integer) -> Delay? {
    return update_beta_negative_binomial(x, value(k), value(α), value(β));
  }

  override function updateLazy(x:Expression<Integer>) -> Delay? {
    return update_beta_negative_binomial(x, k, α, β);
  }
  
  override function lower() -> Integer? {
    return 0;
  }
}

function BetaNegativeBinomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) -> {
  return construct<BetaNegativeBinomial<Arg1,Arg2,Arg3>>(k, α, β);
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Arg1>(k:Arg1, ρ:Random<Real>) -> Distribution<Integer> {
  if ρ.hasBeta() {
    ρ.prune();
    let (α, β) <- ρ.getBeta();
    let p <- BetaNegativeBinomial(k, α, β);
    ρ.graft(p);
    return p;
  } else {
    return construct<NegativeBinomial<Arg1,Random<Real>>>(k, ρ);
  }
}

/*
 * Simulate a beta-negative-binomial distribution.
 *
 * - k: Number of successes.
 * - α: Shape.
 * - β: Shape.
 */
function simulate_beta_negative_binomial(k:Integer, α:Real, β:Real) -> Integer {
  assert 0.0 < α;
  assert 0.0 < β;
  assert 0 < k;
  return simulate_negative_binomial(k, simulate_beta(α, β));
}

/*
 * Observe a beta-negative-binomial variate
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_negative_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1,
    k:Arg2, α:Arg3, β:Arg4) -> {
  return lbeta(α + k, β + x) - lbeta(α, β) + lchoose(x + k - 1, x);
}

/*
 * Update the parameters of a Beta distribution with a Negative Binomial likelihood.
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_negative_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2,
    α:Arg3, β:Arg4) -> {
  return Beta(α + k, β + x);
}
