/**
 * Beta-negative-binomial distribution.
 */
final class BetaNegativeBinomial(k:Expression<Integer>, ρ:Beta) < Discrete {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Expression<Integer> <- k;

  /**
   * Success probability.
   */
  ρ:Beta <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_beta_negative_binomial(k.value(), ρ.α.value(), ρ.β.value());
  }

  function simulateLazy() -> Integer? {
    return simulate_beta_negative_binomial(k.peak(), ρ.α.peak(), ρ.β.peak());
  }

  function logpdf(x:Integer) -> Real {
    return logpdf_beta_negative_binomial(x, k.value(), ρ.α.value(), ρ.β.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_beta_negative_binomial(x, k, ρ.α, ρ.β);
  }

  function update(x:Integer) {
    (ρ.α, ρ.β) <- box(update_beta_negative_binomial(x, k.value(), ρ.α.value(), ρ.β.value()));
  }

  function updateLazy(x:Expression<Integer>) {
    (ρ.α, ρ.β) <- update_lazy_beta_negative_binomial(x, k, ρ.α, ρ.β);
  }
  
  function lower() -> Integer? {
    return 0;
  }

  function link() {
    ρ.setChild(this);
  }
  
  function unlink() {
    ρ.releaseChild(this);
  }
}

function BetaNegativeBinomial<Left>(k:Left, ρ:Beta) -> {
  m:BetaNegativeBinomial(box(k), ρ);
  m.link();
  return m;
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Left>(k:Left, ρ:Random<Real>) -> Distribution<Integer> {
  ρ1:Beta?;
  if (ρ1 <- ρ.graftBeta())? {
    return BetaNegativeBinomial(box(k), ρ1!);
  } else {
    return construct<NegativeBinomial>(box(k), ρ);
  }
}

/*
 * Simulate a beta-negative-binomial distribution.
 *
 * - k: Number of successes.
 * - α: Shape.
 * - β: Shape.
 */
function simulate_beta_negative_binomial(k:Integer, α:Real, β:Real) -> Integer {
  assert 0.0 < α;
  assert 0.0 < β;
  assert 0 < k;

  return simulate_negative_binomial(k, simulate_beta(α, β));
}

/*
 * Observe a beta-negative-binomial variate
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_negative_binomial(x:Integer, k:Integer, α:Real, β:Real) -> Real {
  assert 0.0 < α;
  assert 0.0 < β;

  if (x >= 0) {
    return lbeta(α + k, β + x) - lbeta(α, β) + lchoose(x + k - 1, x);
  } else {
    return -inf;
  }
}

/*
 * Observe a beta-negative-binomial variate
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_beta_negative_binomial(x:Expression<Integer>, k:Expression<Integer>, α:Expression<Real>, β:Expression<Real>) -> Expression<Real> {
  return box(lbeta(α + k, β + x) - lbeta(α, β) + lchoose(x + k - 1, x));
}

/*
 * Update the parameters of a Beta distribution with a Negative Binomial likelihood.
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_negative_binomial(x:Integer, k:Integer, α:Real,
    β:Real) -> (Real, Real) {
  return (α + k, β + x);
}

/*
 * Update the parameters of a Beta distribution with a Negative Binomial likelihood.
 *
 * - x: The variate.
 * - k: Number of successes.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_lazy_beta_negative_binomial(x:Expression<Integer>,
    k:Expression<Integer>, α:Expression<Real>,
    β:Expression<Real>) -> (Expression<Real>, Expression<Real>) {
  return (box(α + k), box(β + x));
}
