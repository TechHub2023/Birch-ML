/**
 * Beta-binomial distribution.
 */
final class BetaBinomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) <
    BoundedDiscrete {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;

  /**
   * First shape.
   */
  α:Arg2 <- α;

  /**
   * Second shape.
   */
  β:Arg3 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer {
    return simulate_beta_binomial(value(n), value(α), value(β));
  }
  
  override function simulateLazy() -> Integer? {
    return simulate_beta_binomial(peek(n), peek(α), peek(β));
  }
  
  override function logpdf(x:Integer) -> Real {
    return logpdf_beta_binomial(x, value(n), value(α), value(β));
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_beta_binomial(x, n, α, β));
  }

  override function update(x:Integer) -> Delay? {
    return update_beta_binomial(x, value(n), value(α), value(β));
  }

  override function updateLazy(x:Expression<Integer>) -> Delay? {
    return update_beta_binomial(x, n, α, β);
  }

  override function cdf(x:Integer) -> Real? {
    return cdf_beta_binomial(x, value(n), value(α), value(β));
  }
  
  override function lower() -> Integer? {
    return 0;
  }
  
  override function upper() -> Integer? {
    return value(n);
  }
}

function BetaBinomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) -> {
  return construct<BetaBinomial<Arg1,Arg2,Arg3>>(n, α, β);
}

/**
 * Create binomial distribution.
 */
function Binomial<Arg1>(n:Arg1, ρ:Random<Real>) -> Distribution<Integer> {
  ρ.prune();
  if ρ.hasBeta() {
    let (α, β) <- ρ.getBeta();
    let p <- BetaBinomial(n, α, β);
    ρ.graft(p);
    return p;
  } else {
    return construct<Binomial<Arg1,Random<Real>>>(n, ρ);
  }
}

/*
 * Simulate a beta-binomial distribution.
 *
 * - n: Number of trials.
 * - α: First shape.
 * - β: Second shape.
 */
function simulate_beta_binomial(n:Integer, α:Real, β:Real) -> Integer {
  assert 0 <= n;
  assert 0.0 < α;
  assert 0.0 < β;
  return simulate_binomial(n, simulate_beta(α, β));
}

/*
 * Observe a beta-binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: First shape.
 * - β: Second shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, n:Arg2, α:Arg3,
    β:Arg4) -> {
  return lbeta(x + α, n - x + β) - lbeta(α, β) + lchoose(n, x);
}

/*
 * Update the parameters of a Beta distribution with a Binomial likelihood.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, n:Arg2, α:Arg3,
    β:Arg4) -> {
  return Beta(α + x, β + n - x);
}

/*
 * CDF of a beta-binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Shape.
 * - β: Shape.
 *
 * Return: the cumulative probability.
 */
function cdf_beta_binomial(x:Integer, n:Integer, α:Real, β:Real) -> Real {
  let P <- 0.0;
  for i in 0..min(n, x) {
    P <- P + exp(logpdf_beta_binomial(i, n, α, β));
  }
  return P;
}
