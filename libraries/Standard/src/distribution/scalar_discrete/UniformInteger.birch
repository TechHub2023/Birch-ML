/**
 * Uniform integer distribution.
 */
final class UniformInteger(l:Expression<Integer>, u:Expression<Integer>) <
    BoundedDiscrete {
  /**
   * Lower bound.
   */
  l:Expression<Integer> <- l;

  /**
   * Upper bound.
   */
  u:Expression<Integer> <- u;

  function supportsLazy() -> Boolean {
    return false;
  }

  function simulate() -> Integer {
    return simulate_uniform_int(l.value(), u.value());
  }

//  function simulateLazy() -> Integer? {
//    return simulate_uniform_int(l.peak(), u.peak());
//  }

  function logpdf(x:Integer) -> Real {
    return logpdf_uniform_int(x, l.value(), u.value());
  }

//  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
//    return logpdf_lazy_uniform_int(x, l, u);
//  }

  function cdf(x:Integer) -> Real? {
    return cdf_uniform_int(x, l.value(), u.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_uniform_int(P, l.value(), u.value());
  }
  
  function lower() -> Integer? {
    return l.value();
  }
  
  function upper() -> Integer? {
    return u.value();
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "UniformInteger");
    buffer.set("l", l);
    buffer.set("u", u);
  }
}

/**
 * Create uniform distribution over integers.
 */
function UniformInteger<Left,Right>(l:Left, u:Right) -> {
  return construct<UniformInteger>(box(l), box(u));
}

/*
 * Simulate a uniform distribution on an integer range.
 *
 * - l: Lower bound of range.
 * - u: Upper bound of range.
 */
function simulate_uniform_int(l:Integer, u:Integer) -> Integer {
  assert l <= u;
  cpp{{
  return std::uniform_int_distribution<birch::type::Integer>(l, u)(rng);
  }}
}

/*
 * Observe an integer uniform variate.
 *
 * - x: The variate.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Returns: the log probability mass.
 */
function logpdf_uniform_int(x:Integer, l:Integer, u:Integer) -> Real {
  if (x >= l && x <= u) {
    return -log1p(u - l);
  } else {
    return -inf;
  }
}

/*
 * CDF of a uniform integer variate.
 *
 * - x: The variate.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Return: the cumulative probability.
 */
function cdf_uniform_int(x:Integer, l:Integer, u:Integer) -> Real {
  if x < l {
    return 0.0;
  } else if x > u {
    return 1.0;
  } else {
    return (x - l + 1.0)/(u - l + 1.0);
  }
}

/*
 * Quantile of a uniform integer distribution.
 *
 * - P: The cumulative probability.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Return: the quantile.
 */
function quantile_uniform_int(P:Real, l:Integer, u:Integer) -> Integer {
  assert l <= u;
  return l + scalar<Integer>(P*(u - l));
}
