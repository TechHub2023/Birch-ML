/**
 * Binomial distribution.
 */
final class Binomial(n:Expression<Integer>, ρ:Expression<Real>) <
    BoundedDiscrete {
  /**
   * Number of trials.
   */
  n:Expression<Integer> <- n;

  /**
   * Success probability.
   */
  ρ:Expression<Real> <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_binomial(n.value(), ρ.value());
  }
  
  function simulateLazy() -> Integer? {
    return simulate_binomial(n.peak(), ρ.peak());
  }

  function logpdf(x:Integer) -> Real {
    return logpdf_binomial(x, n.value(), ρ.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_binomial(x, n, ρ);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_binomial(x, n.value(), ρ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_binomial(P, n.value(), ρ.value());
  }

  function lower() -> Integer? {
    return 0;
  }
  
  function upper() -> Integer? {
    return n.value();
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Binomial");
    buffer.set("n", n);
    buffer.set("ρ", ρ);
  }
}

/**
 * Create binomial distribution.
 */
function Binomial<Left,Right>(n:Left, ρ:Right) -> {
  return construct<Binomial>(box(n), box(ρ));
}

/*
 * Simulate a binomial distribution.
 *
 * - n: Number of trials.
 * - ρ: Probability of a true result.
 */
function simulate_binomial(n:Integer, ρ:Real) -> Integer {
  assert 0 <= n;
  assert 0.0 <= ρ && ρ <= 1.0;
  cpp{{
  return std::binomial_distribution<birch::type::Integer>(n, ρ)(rng);
  }}
}

/*
 * Observe a binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - ρ: Probability of a true result.
 *
 * Returns: the log probability mass.
 */
function logpdf_binomial(x:Integer, n:Integer, ρ:Real) -> Real {
  assert 0 <= n;
  assert 0.0 <= ρ && ρ <= 1.0;

  if ρ == 0.0 || ρ == 1.0 {
    if x == n*ρ {
      return 0.0;
    } else {
      return -inf;
    }
  } else if 0 <= x && x <= n {
    return x*log(ρ) + (n - x)*log1p(-ρ) + lchoose(n, x);
  } else {
    return -inf;
  }
}

/*
 * Observe a binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - ρ: Probability of a true result.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_binomial(x:Expression<Integer>, n:Expression<Integer>, ρ:Expression<Real>) -> Expression<Real> {
  return box(x*log(ρ) + (n - x)*log1p(-ρ) + lchoose(n, x));
}

/*
 * CDF of a binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - ρ: Probability of a true result.
 *
 * Return: the cumulative probability.
 */
function cdf_binomial(x:Integer, n:Integer, ρ:Real) -> Real {
  assert 0 <= n;
  assert 0.0 <= ρ && ρ <= 1.0;

  if x < 0 {
    return 0.0;
  } else if x > n {
    return 1.0;
  } else {
    return ibeta(n - x, x + 1.0, 1.0 - ρ);
  }
}

/*
 * Quantile of a binomial distribution.
 *
 * - P: The cumulative probability.
 * - n: Number of trials.
 * - ρ: Probability of a true result.
 *
 * Return: the quantile.
 */
function quantile_binomial(P:Real, n:Integer, ρ:Real) -> Integer {
  assert 0 <= n;
  assert 0.0 <= ρ && ρ <= 1.0;
  cpp{{
  return boost::math::quantile(boost::math::binomial_distribution<>(n, ρ), P);
  }}
}
