/**
 * Bernoulli distribution.
 */
final class Bernoulli(ρ:Expression<Real>) < Distribution<Boolean> {
  /**
   * Success probability.
   */
  ρ:Expression<Real> <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Boolean {
    return simulate_bernoulli(ρ.value());
  }
  
  function simulateLazy() -> Boolean? {
    return simulate_bernoulli(ρ.peak());
  }
  
  function logpdf(x:Boolean) -> Real {
    return logpdf_bernoulli(x, ρ.value());
  }

  function logpdfLazy(x:Expression<Boolean>) -> Expression<Real>? {
    return logpdf_lazy_bernoulli(x, ρ);
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Bernoulli");
    buffer.set("ρ", ρ);
  }
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli<Middle>(ρ:Middle) -> {
  return construct<Bernoulli>(box(ρ));
}

/*
 * Simulate a Bernoulli distribution.
 *
 * - ρ: Probability of a true result.
 */
function simulate_bernoulli(ρ:Real) -> Boolean {
  assert 0.0 <= ρ && ρ <= 1.0;
  cpp{{
  return std::bernoulli_distribution(ρ)(rng);
  }}
}

/*
 * Observe a Bernoulli variate.
 *
 * - x: The variate.
 * - ρ: Probability of a true result.
 *
 * Returns: the log probability mass.
 */
function logpdf_bernoulli(x:Boolean, ρ:Real) -> Real {
  assert 0.0 <= ρ && ρ <= 1.0;
  return if_then_else(x, log(ρ), log1p(-ρ));
}

/*
 * Observe a Bernoulli variate.
 *
 * - x: The variate.
 * - ρ: Probability of a true result.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_bernoulli(x:Expression<Boolean>, ρ:Expression<Real>) -> Expression<Real> {
  return box(if_then_else(x, log(ρ), log1p(-ρ)));
}
