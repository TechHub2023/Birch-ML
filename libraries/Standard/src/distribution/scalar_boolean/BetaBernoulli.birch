/**
 * Beta-Bernoulli distribution.
 */
final class BetaBernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) < Distribution<Boolean> {
  /**
   * Prior first shape of success probability,
   */
  α:Arg1 <- α;

  /**
   * Prior second shape of success probability.
   */
  β:Arg2 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Boolean {
    return simulate_beta_bernoulli(value(α), value(β));
  }
  
  override function simulateLazy() -> Boolean? {
    return simulate_beta_bernoulli(peek(α), peek(β));
  }
  
  override function logpdf(x:Boolean) -> Real {
    return logpdf_beta_bernoulli(x, value(α), value(β));
  }

  override function logpdfLazy(x:Expression<Boolean>) -> Expression<Real>? {
    return box(logpdf_beta_bernoulli(x, α, β));
  }

  override function update(x:Boolean) -> Delay? {
    return update_beta_bernoulli(x, value(α), value(β));
  }

  override function updateLazy(x:Expression<Boolean>) -> Delay? {
    return update_beta_bernoulli(x, α, β);
  }
}

function BetaBernoulli<Arg1,Arg2>(α:Arg1, β:Arg2) -> {
  return construct<BetaBernoulli<Arg1,Arg2>>(α, β);
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli(ρ:Random<Real>) -> Distribution<Boolean> {
  ρ.prune();
  if ρ.hasBeta() {
    let (α, β) <- ρ.getBeta();
    let p <- BetaBernoulli(α, β);
    ρ.graft(p);
    return p;
  } else {
    return construct<Bernoulli<Random<Real>>>(ρ);
  }
}

/*
 * Simulate a beta-bernoulli distribution.
 *
 * - α: Shape.
 * - β: Shape.
 */
function simulate_beta_bernoulli(α:Real, β:Real) -> Boolean {
  assert 0.0 < α;
  assert 0.0 < β;
  return simulate_bernoulli(simulate_beta(α, β));
}

/*
 * Observe a beta-bernoulli variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_bernoulli<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return if_then_else(x, log(α), log(β)) - log(α + β);
}

/*
 * Update the parameters of a Beta distribution with a Bernoulli likelihood.
 *
 * - x: The variate.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_bernoulli<Arg1,Arg2,Arg3>(x:Arg1, α:Arg2, β:Arg3) -> {
  return Beta(α + x, β + 1.0 - x);
}
