/**
 * Beta-Bernoulli distribution.
 */
final class BetaBernoulli(ρ:Beta) < Distribution<Boolean> {
  /**
   * Success probability.
   */
  ρ:Beta <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Boolean {
    return simulate_beta_bernoulli(ρ.α.value(), ρ.β.value());
  }
  
  function simulateLazy() -> Boolean? {
    return simulate_beta_bernoulli(ρ.α.eval(), ρ.β.eval());
  }
  
  function logpdf(x:Boolean) -> Real {
    return logpdf_beta_bernoulli(x, ρ.α.value(), ρ.β.value());
  }

  function logpdfLazy(x:Expression<Boolean>) -> Expression<Real>? {
    return logpdf_lazy_beta_bernoulli(x, ρ.α, ρ.β);
  }

  function update(x:Boolean) {
    (ρ.α, ρ.β) <- box(update_beta_bernoulli(x, ρ.α.value(), ρ.β.value()));
  }

  function updateLazy(x:Expression<Boolean>) {
    (ρ.α, ρ.β) <- update_lazy_beta_bernoulli(x, ρ.α, ρ.β);
  }

  function link() {
    ρ.setChild(this);
  }
  
  function unlink() {
    ρ.releaseChild(this);
  }
}

function BetaBernoulli(ρ:Beta) -> BetaBernoulli {
  m:BetaBernoulli(ρ);
  m.link();
  return m;
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli(ρ:Random<Real>) -> Distribution<Boolean> {
  m:Beta?;
  if (m <- ρ.graftBeta())? {
    return BetaBernoulli(m!);
  } else {
    return construct<Bernoulli>(ρ);
  }
}

/*
 * Simulate a beta-bernoulli distribution.
 *
 * - α: Shape.
 * - β: Shape.
 */
function simulate_beta_bernoulli(α:Real, β:Real) -> Boolean {
  assert 0.0 < α;
  assert 0.0 < β;
  
  return simulate_bernoulli(simulate_beta(α, β));
}

/*
 * Observe a beta-bernoulli variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_bernoulli(x:Boolean, α:Real, β:Real) -> Real {
  assert 0.0 < α;
  assert 0.0 < β;
  return if_then_else(x, log(α), log(β)) - log(α + β);
}

/*
 * Observe a beta-bernoulli variate.
 *
 * - x: The variate.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_beta_bernoulli(x:Expression<Boolean>, α:Expression<Real>, β:Expression<Real>) -> Expression<Real> {
  return box(if_then_else(x, log(α), log(β)) - log(α + β));
}

/*
 * Update the parameters of a Beta distribution with a Bernoulli likelihood.
 *
 * - x: The variate.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_bernoulli(x:Boolean, α:Real, β:Real) -> (Real, Real) {
  if x {
    return (α + 1.0, β);
  } else {
    return (α, β + 1.0);
  }
}

/*
 * Update the parameters of a Beta distribution with a Bernoulli likelihood.
 *
 * - x: The variate.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_lazy_beta_bernoulli(x:Expression<Boolean>,
    α:Expression<Real>, β:Expression<Real>) ->
    (Expression<Real>, Expression<Real>) {
  return (box(α + x), box(β + (1.0 - x)));
}
