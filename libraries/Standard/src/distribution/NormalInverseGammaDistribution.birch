/**
 * Normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$\sigma^2 \sim \mathrm{Inverse-Gamma}(\alpha, \beta)$$
 * $$x \mid \sigma^2 \sim \mathrm{N}(\mu, a^2\sigma^2),$$
 *
 * which may be denoted:
 *
 * $$(x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma(\mu, a^2, \alpha, \beta),$$
 *
 * and is the conjugate prior of a Gaussian distribution with both
 * unknown mean and unknown variance.
 *
 * In model code, it is not usual to use this final class directlyDistribution. Instead,
 * establish the conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, β);
 *     x ~ Gaussian(μ, a2*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `a2` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 */
final class NormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    σ2:Arg2, α:Arg3, β:Arg4) < Distribution<Real> {
  /**
   * Mean.
   */
  μ:Arg1 <- μ;
  
  /**
   * Variance.
   */
  σ2:Arg2 <- σ2;
  
  /**
   * Variance shape.
   */
  α:Arg3 <- α;

  /**
   * Variance scale.
   */
  β:Arg4 <- β;
  
  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_normal_inverse_gamma(value(μ), value(σ2), value(α),
        value(β));
  }

  override function simulateLazy() -> Real!? {
    return simulate_normal_inverse_gamma(eval(μ), eval(σ2), eval(α), eval(β));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_normal_inverse_gamma(x, value(μ), value(σ2), value(α),
        value(β));
  }

  override function logpdfLazy(x:Real!) -> Real!? {
    return logpdf_normal_inverse_gamma(x, eval(μ), eval(σ2), eval(α),
        eval(β));
  }

  override function hitch(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_normal_inverse_gamma(x, μ, σ2, α, β));
  }

  override function update(x:Real!) -> Delay? {
    return update_normal_inverse_gamma(x, value(μ), value(σ2), value(α),
        value(β));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
   return update_normal_inverse_gamma(x, μ, σ2, α, β);
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_normal_inverse_gamma(x, value(μ), value(σ2), value(α),
        value(β));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_normal_inverse_gamma(P, value(μ), value(σ2), value(α),
        value(β));
  }

  override function constant() {
    super.constant();
    global.constant(μ);
    global.constant(σ2);
    global.constant(α);
    global.constant(β);
  }

  override function isNormalInverseGamma() -> Boolean {
    return true;
  }

  override function getNormalInverseGamma() -> (Expression<Real>, Expression<Real>,
      Expression<Real>, Expression<Real>)? {
    return box(μ, σ2, α, β);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "NormalInverseGamma");
    buffer.set("μ", value(μ));
    buffer.set("σ2", value(σ2));
    buffer.set("α", value(α));
    buffer.set("β", value(β));
  }
}

function NormalInverseGamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, σ2:Arg2, α:Arg3,
    β:Arg4) -> Distribution<Real> {
  return wrap_normal_inverse_gamma(μ, σ2, α, β);
}
function wrap_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, σ2:Arg2,
    α:Arg3, β:Arg4) -> {
  return make_normal_inverse_gamma(wrap(μ), wrap(σ2), wrap(α), wrap(β));
}
function make_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, σ2:Arg2,
    α:Arg3, β:Arg4) -> {
  return construct<NormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>>(μ, σ2,
      α, β);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Arg1, σ2:OpMul<Arg2,Random<Real>>) ->
    Distribution<Real> {
  σ2.r.prune();
  if σ2.r.hasInverseGamma() {
    let (α, β) <- σ2.r.getInverseGamma();
    let p <- wrap_normal_inverse_gamma(μ, σ2.l, α, β);
    σ2.r.graft(p);
    return p;
  } else {
    return wrap_gaussian(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Arg, σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(μ, 1.0*σ2);
}

/*
 * Simulate a normal inverse-gamma distribution.
 *
 * - μ: Mean.
 * - σ2: Variance.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 */
function simulate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, σ2:Arg2,
    α:Arg3, β:Arg4) -> {
  return simulate_student_t(2.0*α, μ, (β/α)*σ2);
}

/*
 * Observe a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Variance.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Returns: the log probability density.
 */
function logpdf_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1,
    μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5) -> {
  return logpdf_student_t(x, 2.0*α, μ, (β/α)*σ2);
}

/*
 * Update the parameters of an inverse-gamma distribution that is part
 * of a normal inverse-gamma joint distribution.
 *
 * - x: The variate.
 * - μ: Mean.
 * - σ2: Variance.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1,
    μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5) -> {
  return wrap_inverse_gamma(α + 0.5, β + 0.5*pow(x - μ, 2.0)/σ2);
}

/*
 * CDF of a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 *
 * Return: the cumulative probability.
 */
function cdf_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1, μ:Arg2,
    σ2:Arg3, α:Arg4, β:Arg5) -> {
  return cdf_student_t(x, 2.0*α, μ, (β/α)*σ2);
}

/*
 * Quantile of a normal inverse-gamma distribution.
 *
 * - P: The cumulative probability.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Return: the quantile.
 */
function quantile_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(P:Arg1,
    μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5) -> {
  return quantile_student_t(P, 2.0*α, μ, (β/α)*σ2);
}
