/**
 * Bernoulli distribution.
 */
final class Bernoulli(ρ:Expression<Real>) < Distribution<Boolean> {
  /**
   * Success probability.
   */
  ρ:Expression<Real> <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Boolean {
    return simulate_bernoulli(ρ.value());
  }
  
  function simulateLazy() -> Boolean? {
    return simulate_bernoulli(ρ.eval());
  }
  
  function logpdf(x:Boolean) -> Real {
    return logpdf_bernoulli(x, ρ.value());
  }

  function logpdfLazy(x:Expression<Boolean>) -> Expression<Real>? {
    return logpdf_lazy_bernoulli(x, ρ);
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Bernoulli");
    buffer.set("ρ", ρ);
  }
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli(ρ:Expression<Real>) -> Distribution<Boolean> {
  m:Beta?;
  if (m <- ρ.graftBeta())? {
    return BetaBernoulli(m!);
  } else {
    return construct<Bernoulli>(ρ);
  }
}

/**
 * Create Bernoulli distribution.
 */
function Bernoulli(ρ:Real) -> Distribution<Boolean> {
  return Bernoulli(box(ρ));
}
