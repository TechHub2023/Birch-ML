/**
 * Gamma distribution.
 */
final class Gamma(k:Expression<Real>, θ:Expression<Real>) <
    Distribution<Real> {
  /**
   * Shape.
   */
  k:Expression<Real> <- k;
  
  /**
   * Scale.
   */
  θ:Expression<Real> <- θ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_gamma(k.value(), θ.value());
  }

  function simulateLazy() -> Real? {
    return simulate_gamma(k.eval(), θ.eval());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_gamma(x, k.value(), θ.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_gamma(x, k, θ);
  }

  function cdf(x:Real) -> Real? {
    return cdf_gamma(x, k.value(), θ.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_gamma(P, k.value(), θ.value());
  }

  function lower() -> Real? {
    return 0.0;
  }

  function graftGamma() -> Gamma? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Gamma");
    buffer.set("k", k);
    buffer.set("θ", θ);
  }
}

/**
 * Create gamma distribution.
 */
function Gamma(k:Expression<Real>, θ:Expression<Real>) -> Distribution<Real> {
  θ1:InverseGamma?;
  if (θ1 <- θ.graftInverseGamma())? {
    return InverseGammaGamma(k, θ1!);
  } else {
    return construct<Gamma>(k, θ);
  }
}

/**
 * Create gamma distribution.
 */
function Gamma(k:Expression<Real>, θ:Real) -> Distribution<Real> {
  return Gamma(k, box(θ));
}

/**
 * Create gamma distribution.
 */
function Gamma(k:Real, θ:Expression<Real>) -> Distribution<Real> {
  return Gamma(box(k), θ);
}

/**
 * Create gamma distribution.
 */
function Gamma(k:Real, θ:Real) -> Distribution<Real> {
  return Gamma(box(k), box(θ));
}
