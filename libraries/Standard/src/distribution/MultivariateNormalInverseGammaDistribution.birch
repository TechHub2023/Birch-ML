/**
 * Multivariate normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$
 * \begin{align*}
 * \sigma^2 & \sim \mathrm{Inverse-Gamma}(\alpha, \beta) \\
 * x \mid \sigma^2 & \sim \mathrm{N}(\mu, \Sigma\sigma^2),
 * \end{align*}
 * $$
 *
 * which may be denoted:
 *
 * $$
 * (x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma}(\mu, \Sigma, \alpha, \beta),
 * $$
 *
 * and is a conjugate prior of a Gaussian distribution with both unknown mean
 * and variance. The variance scaling is independent and identical in the
 * sense that all components of $x$ share the same $\sigma^2$.
 *
 * In model code, it is not usual to use this class directlyDistribution. Instead,
 * establish a conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, β);
 *     x ~ Gaussian(μ, Σ*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `Σ` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 *
 * !!! note
 *     This class does not inherit from MultivariateTDistribution, as it is
 *     typically used for a random variable that is marginalized out.
 */
final class MultivariateNormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>(
    μ:Arg1, Σ:Arg2, k:Arg3, β:Arg4) < Distribution<Real[_]> {
  /**
   * Mean.
   */
  μ:Arg1 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg2 <- Σ;

  /**
   * Degrees of freedom.
   */
  k:Arg3 <- k;

  /**
   * Variance scale.
   */
  β:Arg4 <- β;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_multivariate_normal_inverse_gamma(value(μ), value(Σ),
        value(k), value(β));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_multivariate_normal_inverse_gamma(eval(μ), eval(Σ),
        eval(k), eval(β));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_multivariate_normal_inverse_gamma(x, value(μ), value(Σ),
        value(k), value(β));
  }

  override function logpdfLazy(x:Real[_]) -> Real!? {
    return logpdf_multivariate_normal_inverse_gamma(x, eval(μ), eval(Σ),
        eval(k), eval(β));
  }

  override function hitch(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_multivariate_normal_inverse_gamma(x, μ, Σ, k, β));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_gamma(x, value(μ), value(Σ),
        value(k), value(β));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_gamma(x, μ, Σ, k, β);
  }

  override function constant() {
    super.constant();
    global.constant(μ);
    global.constant(Σ);
    global.constant(k);
    global.constant(β);
  }

  override function isMultivariateNormalInverseGamma() -> Boolean {
    return true;
  }

  override function getMultivariateNormalInverseGamma() -> (Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real>, Expression<Real>) {
    return box(μ, Σ, k, β);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateNormalInverseGamma");
    buffer.set("μ", value(μ));
    buffer.set("Σ", value(Σ));
    buffer.set("α", 0.5*value(k));
    buffer.set("β", value(β));
  }
}

function MultivariateNormalInverseGamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, Σ:Arg2,
    α:Arg3, β:Arg4) -> Distribution<Real> {
  return wrap_multivariate_normal_inverse_gamma(μ, chol(Σ), 2.0*α, β);
}
function wrap_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    Σ:Arg2, k:Arg3, β:Arg4) -> {
  return make_multivariate_normal_inverse_gamma(wrap(μ), wrap(Σ), wrap(k),
      wrap(β));
}
function make_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    Σ:Arg2, k:Arg3, β:Arg4) -> {
  return construct<MultivariateNormalInverseGammaDistribution<Arg1,Arg2,Arg3,
      Arg4>>(μ, Σ, k, β);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1,
    Σ:OpMul<Arg2,Random<Real>>) -> Distribution<Real[_]> {
  let Ω <- Σ.l;
  let ω2 <- Σ.r;
  if ω2.hasNext() && ω2.getNext().isInverseGamma() {
    ω2.prune();
    let (α, β) <- ω2.getNext().getInverseGamma();
    let p <- wrap_multivariate_normal_inverse_gamma(μ, chol(Ω), 2.0*α, β);
    ω2.setNext(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1,
    Σ:OpMul<Random<Real>,Arg2>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ, Σ.r*Σ.l);
}

/*
 * Simulate a multivariate normal inverse-gamma distribution.
 *
 * - μ: Mean.
 * - Σ: Covariance.
 * - k: Degrees of freedom of inverse-gamma on covariance scale.
 * - β: Scale of inverse-gamma on covariance scale.
 */
function simulate_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(
    μ:Arg1, Σ:Arg2, k:Arg3, β:Arg4) -> {
  return simulate_multivariate_t(k, μ, sqrt(2.0*β)*Σ);
}

/*
 * Observe a multivariate normal inverse-gamma variate.
 *
 * - x: The variate.
 * - μ: Precision times mean vector.
 * - Σ: Precision matrix.
 * - k: Degrees of freedom of inverse-gamma on covariance scale.
 * - β: Scale of inverse-gamma on covariance scale.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(
      x:Arg1, μ:Arg2, Σ:Arg3, k:Arg4, β:Arg5) -> {
  return logpdf_multivariate_t(x, k, μ, sqrt(2.0*β)*Σ);
}

/*
 * Update the parameters of an inverse-gamma distribution with a linear
 * scaling and Gaussian likelihood.
 *
 * - x: The variate.
 * - μ: Precision times mean.
 * - Σ: Precision.
 * - k: Prior degrees of freedom of the inverse-gamma ($k = 2\alpha$).
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(
      x:Arg1, μ:Arg2, Σ:Arg3, k:Arg4, β:Arg5) -> {
  let n <- length(x);
  return wrap_inverse_gamma(0.5*(k + n), β + 0.5*dot(trisolve(Σ, x - μ)));
}
