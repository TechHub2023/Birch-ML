/**
 * Multinomial distribution.
 */
final class MultinomialDistribution<Arg1,Arg2>(n:Arg1, ρ:Arg2) <
    Distribution<Integer[_]> {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;

  /**
   * Category probabilities.
   */
  ρ:Arg2 <- ρ;

  override function simulate() -> Integer[_] {
    return simulate_multinomial(global.value(n), global.value(ρ));
  }

  override function simulateLazy() -> Integer[_] {
    return simulate_multinomial(global.eval(n), global.eval(ρ));
  }

  override function logpdf(x:Integer[_]) -> Real! {
    return logpdf_multinomial(x, global.value(n), global.value(ρ));
  }

  override function logpdfLazy(x:Integer[_]) -> Real! {
    return logpdf_multinomial(x, global.eval(n), global.eval(ρ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_multinomial(random(), n, ρ));
  }

  function doConstant() {
    super.constant();
    global.constant(n);
    global.constant(ρ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Multinomial");
    buffer.set("n", global.value(n));
    buffer.set("ρ", global.value(ρ));
  }
}

/**
 * Create multinomial distribution.
 */
function Multinomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> Distribution<Integer[_]> {
  return wrap_multinomial(n, ρ);
}
function wrap_multinomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> {
  return make_multinomial(wrap(n), wrap(ρ));
}
function make_multinomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> {
  return construct<MultinomialDistribution<Arg1,Arg2>>(n, ρ);
}

/*
 * Simulate a multinomial distribution.
 *
 * @param n Number of trials.
 * @param ρ Category probabilities. These should sum to one.
 *
 * This uses an $\mathcal{O}(N)$ implementation based on:
 *
 * Bentley, J. L. and J. B. Saxe (1979). Generating sorted lists of random
 * numbers. Technical Report 2450, Carnegie Mellon University, Computer
 * Science Department.
 */
function simulate_multinomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> {
  return simulate_multinomial(n, ρ, 1.0);
}

/*
 * Simulate a multinomial distribution.
 *
 * @param n Number of trials.
 * @param ρ Unnormalized category probabilities.
 * @param Z Sum of the unnormalized category probabilities.
 *
 * This uses an $\mathcal{O}(N)$ implementation based on:
 *
 * Bentley, J. L. and J. B. Saxe (1979). Generating sorted lists of random
 * numbers. Technical Report 2450, Carnegie Mellon University, Computer
 * Science Department.
 */
function simulate_multinomial<Arg1,Arg2,Arg3>(n:Arg1, ρ:Arg2, Z:Arg3) -> {
  assert global.length(ρ) > 0;
  assert abs(sum(ρ)! - Z) < 1.0e-6;

  let D <- global.length(ρ);
  let R <- ρ[D];
  let lnMax <- 0.0;
  let j <- D;
  let i <- n;
  let x <- vector(0, D);

  while i > 0 {
    let u <- simulate_uniform(0.0, 1.0);
    lnMax <- lnMax + log(u)/i;
    u <- Z*exp(lnMax);
    while u < Z - R {
      j <- j - 1;
      R <- R + ρ[j];
    }
    x[j] <- x[j] + 1;
    i <- i - 1;
  }
  while j > 1 {
    j <- j - 1;
    x[j] <- 0;
  }
  return x;
}

/*
 * Observe a multinomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param ρ Category probabilities.
 *
 * @return the log probability mass.
 */
function logpdf_multinomial<Arg1,Arg2,Arg3>(x:Arg1, n:Arg2, ρ:Arg3) -> {
  assert global.length(x) == global.length(ρ);
  return lfact(n) + sum(hadamard(x, log(ρ)) - lfact(x));
}
