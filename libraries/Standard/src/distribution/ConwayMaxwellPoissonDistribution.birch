/**
 * Conway-Maxwell-Poisson distribution.
 *
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * The distribution is always truncated on $[0,n]$ because of an intractable
 * normalizing constant that can only be expressed as an infinite series on
 * the support of the non-truncated distribution, $[0,\infty)$. The larger
 * $n$, the closer the approximation to the non-truncated distribution---if
 * that is desired---but the more expensive operations: most are $O(n)$.
 */
class ConwayMaxwellPoissonDistribution<Arg1,Arg2,Arg3>(μ:Arg1, ν:Arg2,
    n:Arg3) < BoundedDiscreteDistribution {
  /**
   * Mode.
   */
  μ:Arg1 <- μ;

  /**
   * Dispersion.
   */
  ν:Arg2 <- ν;

  /**
   * Truncation point.
   */
  n:Arg3 <- n;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer! {
    return simulate_conway_maxwell_poisson(value(μ), value(ν), value(n));
  }

  override function simulateLazy() -> Integer!? {
    return simulate_conway_maxwell_poisson(eval(μ), eval(ν), eval(n));
  }

  override function logpdf(x:Integer!) -> Real! {
    return logpdf_conway_maxwell_poisson(x, value(μ), value(ν), value(n));
  }

  override function logpdfLazy(x:Integer!) -> Real!? {
    return logpdf_conway_maxwell_poisson(x, eval(μ), eval(ν), eval(n));
  }

  override function hitch(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_conway_maxwell_poisson(x, μ, ν, n));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_conway_maxwell_poisson(x, value(μ), value(ν), value(n));
  }

  override function quantile(P:Real!) -> Integer!? {
    return quantile_conway_maxwell_poisson(P, value(μ), value(ν), value(n));
  }

  override function lower() -> Integer!? {
    return 0;
  }

  override function upper() -> Integer!? {
    return value(n);
  }

  override function constant() {
    super.constant();
    global.constant(μ);
    global.constant(ν);
    global.constant(n);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "ConwayMaxwellPoisson");
    buffer.set("μ", value(μ));
    buffer.set("ν", value(ν));
    buffer.set("n", value(n));
  }
}

/**
 * Create Conway-Maxwell-Poisson distribution.
 */
function ConwayMaxwellPoisson<Arg1,Arg2,Arg3>(μ:Arg1, ν:Arg2, n:Arg3) ->
    Distribution<Integer> {
  return wrap_conway_maxwell_poisson(μ, ν, n);
}
function wrap_conway_maxwell_poisson<Arg1,Arg2,Arg3>(μ:Arg1, ν:Arg2,
    n:Arg3) -> {
  return make_conway_maxwell_poisson(wrap(μ), wrap(ν), wrap(n));
}
function make_conway_maxwell_poisson<Arg1,Arg2,Arg3>(μ:Arg1, ν:Arg2,
    n:Arg3) -> {
  return construct<ConwayMaxwellPoissonDistribution<Arg1,Arg2,Arg3>>(μ, ν, n);
}

/*
 * Simulate a Conway-Maxwell-Poisson distribution.
 *
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 */
function simulate_conway_maxwell_poisson<Arg1,Arg2,Arg3>(μ:Arg1, ν:Arg2,
    n:Arg3) -> {
  let p <- p_conway_maxwell_poisson(μ, ν, n);
  return simulate_categorical(p, 1.0) - 1;
}

/*
 * Observe a Conway-Maxwell-Poisson variate.
 *
 * - x: The variate.
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Returns: the log probability mass.
 */
function logpdf_conway_maxwell_poisson<Arg1,Arg2,Arg3,Arg4>(x:Arg1, μ:Arg2,
    ν:Arg3, n:Arg4) -> {
  return if_then_else(0 <= x && x <= n, x*ν*log(μ) - ν*lfact(x) -
      logz_conway_maxwell_poisson(μ, ν, n), -inf);
}

/*
 * CDF of a Conway-Maxwell-Poisson variate.
 *
 * - x: The variate.
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: the cumulative probability.
 */
function cdf_conway_maxwell_poisson<Arg1,Arg2,Arg3,Arg4>(x:Arg1, μ:Arg2,
    ν:Arg3, n:Arg4) -> {
  let p <- p_conway_maxwell_poisson(μ, ν, n);
  return cdf_categorical(x + 1, p, 1.0);
}

/*
 * Quantile of a Conway-Maxwell-Poisson distribution.
 *
 * - P: The cumulative probability.
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: the quantile.
 */
function quantile_conway_maxwell_poisson<Arg1,Arg2,Arg3,Arg4>(P:Arg1, μ:Arg2,
    ν:Arg3, n:Arg4) -> {
  let p <- p_conway_maxwell_poisson(μ, ν, n);
  return quantile_categorical(P, p, 1.0) - 1;
}

/*
 * Enumerated probabilities of a Conway-Maxwell-Poisson distribution truncated
 * on a finite interval $[0,n]$.
 *
 * - μ: Mode.
 * - ν: Dispersion.
 * - n: Truncation point.
 *
 * Return: vector of probabilities on $[0,n]$.
 */
function p_conway_maxwell_poisson(μ:Real, ν:Real, n:Integer) -> Real[_] {
  let log_λ <- ν*log(μ);
  let log_xf <- 0.0;  // accumulator of log(x!)
  z:Real[n + 1];
  for x in 1..(n + 1) {
    z[x] <- (x - 1)*log_λ - ν*log_xf;
    log_xf <- log_xf + log(x);
  }
  return norm_exp(z);
}
