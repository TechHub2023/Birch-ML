/**
 * Delta distribution, representing a distribution on a discrete space with
 * all probability mass at one location.
 *
 * - μ: Location.
 */
final class Delta<Arg>(μ:Arg) < BoundedDiscrete {
  /**
   * Location.
   */
  μ:Arg <- μ;

  override function simulate() -> Integer {
    return value(μ);
  }

  override function logpdf(x:Integer) -> Real {
    return if_then_else(x == value(μ), 0.0, -inf);
  }

  override function lower() -> Integer? {
    return value(μ);
  }
  
  override function upper() -> Integer? {
    return value(μ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Delta");
    buffer.set("μ", value(μ));
  }
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Arg) -> Distribution<Integer> {
  return construct<Delta<Arg>>(μ);
}
