/**
 * Delta distribution convolved with a bounded discrete distribution, with
 * negation.
 *
 * - p: Bounded discrete distribution.
 */
final class NegateDiscreteDelta(p:BoundedDiscrete) < BoundedDiscrete {
  /**
   * Distribution.
   */
  p:BoundedDiscrete <- p;

  override function simulate() -> Integer {
    return -p.simulate();
  }

  override function logpdf(x:Integer) -> Real {
    return p.logpdf(-x);
  }

  override function update(x:Integer) -> Delay? {
    return Delta(-x);
  }

  override function lower() -> Integer? {
    let l <- p.upper();
		if l? {
			return -l!;
		} else {
			return nil;
		}
  }
  
  override function upper() -> Integer? {
    let l <- p.lower();
		if l? {
			return -l!;
		} else {
			return nil;
		}
  }
}

/**
 * Create delta distribution.
 */
function Delta(μ:Negate<Random<Integer>>) -> Distribution<Integer> {
	μ.m.prune();
	if μ.m.hasBoundedDiscrete() {
    let p <- construct<NegateDiscreteDelta>(μ.m.getBoundedDiscrete());
    μ.m.graft(p);
    return p;
	} else {
		return construct<Delta<Negate<Random<Integer>>>>(μ);
	}
}

/**
 * Create delta distribution.
 */
function Delta<Arg>(μ:Negate<Arg>) -> {
  let m ~ Delta(μ.m);
  return Delta(-m);
}
