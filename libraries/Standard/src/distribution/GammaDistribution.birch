hpp{{
#include <boost/math/distributions/gamma.hpp>
}}

/**
 * Gamma distribution.
 */
final class GammaDistribution<Arg1,Arg2>(k:Arg1, θ:Arg2) < Distribution<Real> {
  /**
   * Shape.
   */
  k:Arg1 <- k;
  
  /**
   * Scale.
   */
  θ:Arg2 <- θ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_gamma(value(k), value(θ));
  }

  override function simulateLazy() -> Real!? {
    return simulate_gamma(eval(k), eval(θ));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_gamma(x, value(k), value(θ));
  }

  override function logpdfLazy(x:Real!) -> Real!? {
    return logpdf_gamma(x, eval(k), eval(θ));
  }

  override function hitch(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_gamma(x, k, θ));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_gamma(x, value(k), value(θ));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_gamma(P, value(k), value(θ));
  }

  override function lower() -> Real!? {
    return 0.0;
  }

  override function constant() {
    super.constant();
    global.constant(k);
    global.constant(θ);
  }

  override function isGamma() -> Boolean {
    return true;
  }

  override function getGamma() -> (Expression<Real>, Expression<Real>)? {
    return box(k, θ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Gamma");
    buffer.set("k", value(k));
    buffer.set("θ", value(θ));
  }
}

/**
 * Create gamma distribution.
 */
function Gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> Distribution<Real> {
  return wrap_gamma(k, θ);
}
function wrap_gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return make_gamma(wrap(k), wrap(θ));
}
function make_gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return construct<GammaDistribution<Arg1,Arg2>>(k, θ);
}

hpp{{
using numbirch::simulate_gamma;
}}

/*
 * Observe a gamma variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_gamma<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return if_then_else(0.0 < x, (k - 1.0)*log(x) - x/θ - lgamma(k) - k*log(θ),
      -inf);
}

/*
 * CDF of a gamma variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the cumulative probability.
 */
function cdf_gamma<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return if_then_else(0.0 < x, gamma_p(k, x/θ), 0.0);
}

/*
 * Quantile of a gamma distribution.
 *
 * - P: The cumulative probability.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the quantile.
 */
function quantile_gamma<Arg1,Arg2,Arg3>(P:Arg1, k:Arg2, θ:Arg3) -> {
  cpp{{
  return boost::math::quantile(boost::math::gamma_distribution<Real>(wait(k),
      wait(θ)), wait(P));
  }}
}
