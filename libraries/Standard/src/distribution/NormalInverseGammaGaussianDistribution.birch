/**
 * Gaussian distribution with linear transformation of normal-inverse-gamma
 * prior.
 */
final class NormalInverseGammaGaussianDistribution<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6,
    s2:Arg7) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Variance.
   */
  σ2:Arg3 <- σ2;

  /**
   * Shape.
   */
  α:Arg4 <- α;

  /**
   * Scale.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood variance scale.
   */
  s2:Arg7 <- s2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_normal_inverse_gamma_gaussian(value(a), value(μ),
        value(σ2), value(α), value(β), value(c), value(s2));
  }

  override function simulateLazy() -> Real!? {
    return simulate_normal_inverse_gamma_gaussian(eval(a), eval(μ),
        eval(σ2), eval(α), eval(β), eval(c), eval(s2));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_normal_inverse_gamma_gaussian(x, value(a), value(μ),
        value(σ2), value(α), value(β), value(c), value(s2));
  }

  override function logpdfLazy(x:Real!) -> Real!? {
    return logpdf_normal_inverse_gamma_gaussian(x, eval(a), eval(μ),
        eval(σ2), eval(α), eval(β), eval(c), eval(s2));
  }

  override function hitch(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_normal_inverse_gamma_gaussian(x, a, μ, σ2, α, β,
        c, s2));
  }

  override function update(x:Real!) -> Delay? {
    return update_normal_inverse_gamma_gaussian(x, value(a), value(μ),
        value(σ2), value(α), value(β), value(c), value(s2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_normal_inverse_gamma_gaussian(x, a, μ, σ2, α, β,
        c, s2);
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_normal_inverse_gamma_gaussian(x, value(a), value(μ),
        value(σ2), value(α), value(β), value(c), value(s2));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_normal_inverse_gamma_gaussian(P, value(a),
        value(μ), value(σ2), value(α), value(β), value(c), value(s2));
  }

  override function constant() {
    super.constant();
    global.constant(a);
    global.constant(μ);
    global.constant(σ2);
    global.constant(α);
    global.constant(β);
    global.constant(c);
    global.constant(s2);
  }
}

function NormalInverseGammaGaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(
    a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6, s2:Arg7)  ->
    Distribution<Real> {
  return wrap_normal_inverse_gamma_gaussian(a, μ, σ2, α, β, c, s2);
}
function wrap_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7>(a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6, s2:Arg7)  -> {
  return make_normal_inverse_gamma_gaussian(wrap(a), wrap(μ), wrap(σ2),
      wrap(α), wrap(β), wrap(c), wrap(s2));
}
function make_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7>(a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6, s2:Arg7)  -> {
  return construct<NormalInverseGammaGaussianDistribution<Arg1,Arg2,
      Arg3,Arg4,Arg5,Arg6,Arg7>>(a, μ, σ2, α, β, c, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:OpAdd<OpMul<Arg1,Random<Real>>,Arg2>,
    σ2:OpMul<Arg3,Random<Real>>) -> Distribution<Real> {
  let a <- μ.l.l;
  let m <- μ.l.r;
  let c <- μ.r;
  let ω2 <- σ2.l;
  let τ2 <- σ2.r;

  if (τ2.hasNext() && τ2.getNext().isNormalInverseGamma() &&
      τ2.getNext(2) == m) || (τ2.hasSide() && τ2.getSide() == m) {
    m.prune();
    let (m1, s2, α, β) <- τ2.getNext().getNormalInverseGamma();
    let p <- wrap_normal_inverse_gamma_gaussian(a, m1, s2, α, β, c, ω2);
    m.setNext(p);
    τ2.setNext(nil);
    m.setSide(τ2);
    τ2.setSide(m);
    return p;
  } else if τ2.hasNext() && τ2.getNext().isInverseGamma() {
    τ2.prune();
    let (α, β) <- τ2.getNext().getInverseGamma();
    let p <- wrap_normal_inverse_gamma(μ, ω2, α, β);
    τ2.setNext(p);
    return p;
  } else if m.hasNext() && m.getNext().isGaussian() {
    m.prune();
    let (m1, s2) <- m.getNext().getGaussian();
    let p <- wrap_gaussian_gaussian(a, m1, s2, c, σ2);
    m.setNext(p);
    return p;
  } else {
    return wrap_gaussian(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:OpAdd<OpMul<Arg1,Random<Real>>,Arg2>,
    σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(μ, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:OpMul<Arg1,Random<Real>>,
    σ2:OpMul<Arg2,Random<Real>>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Random<Real>, σ2:OpMul<Arg,Random<Real>>) ->
     Distribution<Real> {
  return Gaussian(1.0*μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Random<Real>, σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(1.0*μ + 0.0, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:OpMul<Arg,Random<Real>>, σ2:Random<Real>) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, 1.0*σ2);
}

/*
 * Simulate a Gaussian distribution with a normal inverse-gamma prior.
 *
 * - a: Scale.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Variance shape.
 * - β: Variance scale.
 * - c: Offset.
 * - s2: Likelihood variance scale.
 */
function simulate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6,
    s2:Arg7) -> {
  return simulate_student_t(2.0*α, a*μ + c, (β/α)*(a*a*σ2 + s2));
}

/*
 * Observe a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Variance shape.
 * - β: Variance scale.
 * - c: Offset.
 * - s2: Likelihood variance scale.
 *
 * Returns: the log probability density.
 */
function logpdf_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, α:Arg5, β:Arg6, c:Arg7,
    s2:Arg8) -> {
  return logpdf_student_t(x, 2.0*α, a*μ + c, (β/α)*(a*a*σ2 + s2));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior precision times mean.
 * - σ2: Prior precision.
 * - α: Prior variance shape.
 * - β: Prior variance scale.
 * - c: Offset.
 * - s2: Likelihood variance scale.
 *
 * Returns: the posterior hyperparameters `μ'`, `σ2'`, `α'` and `β'`.
 */
function update_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, α:Arg5, β:Arg6, c:Arg7,
    s2:Arg8) -> {
  let σ2' <- 1.0/(1.0/σ2 + a*a/s2);
  let μ' <- σ2'*(μ/σ2 + a*(x - c)/s2);
  let α' <- α + 0.5;
  let β' <- β + 0.5*(pow(x - c, 2.0)/s2 + pow(μ, 2.0)/σ2 - pow(μ', 2.0)/σ2');
  return wrap_normal_inverse_gamma(μ', σ2', α', β');
}

/*
 * CDF of a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Variance shape.
 * - β: Variance scale.
 * - c: Offset.
 * - s2: Likelihood variance scale.
 *
 * Return: the cumulative probability.
 */
function cdf_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, α:Arg5, β:Arg6, c:Arg7,
    s2:Arg8) -> {
  return cdf_student_t(x, 2.0*α, a*μ + c, (β/α)*(a*a*σ2 + s2));
}

/*
 * Quantile of a Gaussian distribution with a normal inverse-gamma prior with
 * linear transformation.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - μ: Precision times mean.
 * - σ2: Precision.
 * - α: Variance shape.
 * - β: Variance scale.
 * - c: Offset.
 * - s2: Likelihood variance scale.
 *
 * Return: the quantile.
 */
function quantile_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7,Arg8>(P:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, α:Arg5, β:Arg6,
    c:Arg7, s2:Arg8) -> {
  return quantile_student_t(P, 2.0*α, a*μ + c, (β/α)*(a*a*σ2 + s2));
}
