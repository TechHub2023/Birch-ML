/**
 * Linear-Gaussian-Gaussian distribution.
 */
final class LinearGaussianGaussianDistribution<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, μ:Arg2,
    σ2:Arg3, c:Arg4, s2:Arg5) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Prior mean.
   */
  μ:Arg2 <- μ;

  /**
   * Prior variance.
   */
  σ2:Arg3 <- σ2;

  /**
   * Offset.
   */
  c:Arg4 <- c;

  /**
   * Likelihood variance.
   */
  s2:Arg5 <- s2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_linear_gaussian_gaussian(value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function simulateLazy() -> Real!? {
    return simulate_linear_gaussian_gaussian(peek(a), peek(μ), peek(σ2),
        peek(c), peek(s2));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_linear_gaussian_gaussian(x, value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_linear_gaussian_gaussian(x, a, μ, σ2, c, s2));
  }

  override function update(x:Real!) -> Delay? {
    return update_linear_gaussian_gaussian(x, value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_linear_gaussian_gaussian(x, a, μ, σ2, c, s2);
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_linear_gaussian_gaussian(x, value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_linear_gaussian_gaussian(P, value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function isGaussian() -> Boolean {
    return true;
  }

  override function getGaussian() -> (Expression<Real>, Expression<Real>)? {
    return box(a*μ + c, a*a*σ2 + s2);
  }
}

function LinearGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, μ:Arg2,
    σ2:Arg3, c:Arg4, s2:Arg5) -> {
  return wrap_linear_gaussian_gaussian(wrap(a), wrap(μ), wrap(σ2), wrap(c),
      wrap(s2));
}
function wrap_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1,
    μ:Arg2, σ2:Arg3, c:Arg4, s2:Arg5) -> {
  return construct<LinearGaussianGaussianDistribution<Arg1,Arg2,Arg3,Arg4,
      Arg5>>(a, μ, σ2, c, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:Add<Multiply<Arg1,Random<Real>>,Arg2>,
    σ2:Arg3) -> Distribution<Real> {
  μ.l.r.prune();
  if μ.l.r.hasGaussian() {
    let (m, s2) <- μ.l.r.getGaussian();
    let p <- LinearGaussianGaussian(μ.l.l, m, s2, μ.r, σ2);
    μ.l.r.graft(p);
    return p;
  } else {
    return Gaussian(wrap(μ), wrap(σ2));
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real>>, σ2:Arg2) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/*
 * Simulate a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Variance.
 */
function simulate_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1,
    μ:Arg2, σ2:Arg3, c:Arg4, s2:Arg5) -> {
  return simulate_gaussian(a*μ + c, a*a*σ2 + s2);
}

/*
 * Observe a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Variance.
 *
 * Returns: the log probability density.
 */
function logpdf_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, c:Arg5, s2:Arg6) -> {
  return logpdf_gaussian(x, a*μ + c, a*a*σ2 + s2);
}

/*
 * CDF of a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Variance.
 *
 * Return: the cumulative probability.
 */
function cdf_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(x:Arg1,
    a:Arg2, μ:Arg3, σ2:Arg4, c:Arg5, s2:Arg6) -> {
  return cdf_gaussian(x, a*μ + c, a*a*σ2 + s2);
}

/*
 * Quantile of a Gaussian distribution with linear transformation of Gaussian
 * prior on the mean.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Variance.
 *
 * Return: the quantile.
 */
function quantile_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
      P:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, c:Arg5, s2:Arg6) -> {
  return quantile_gaussian(P, a*μ + c, a*a*σ2 + s2);
}

/*
 * Update the parameters of a Gaussian distribution with linear transformation
 * of Gaussian prior on the mean.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Likelihood variance.
 *
 * Returns: the posterior hyperparameters `μ'` and `λ'`.
 */
function update_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, c:Arg5, s2:Arg6) -> {
  let k' <- σ2*a/(a*a*σ2 + s2);
  let μ' <- μ + k'*(x - a*μ - c);
  let σ2' <- σ2 - k'*a*σ2;
  return Gaussian(μ', σ2');
}
