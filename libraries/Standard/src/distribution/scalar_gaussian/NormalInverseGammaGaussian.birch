/**
 * Normal-inverse-gamma-Gaussian distribution.
 */
final class NormalInverseGammaGaussian(μ:NormalInverseGamma) <
    Distribution<Real> {
  /**
   * Mean.
   */
  μ:NormalInverseGamma <- μ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_normal_inverse_gamma_gaussian(μ.μ.value(),
        1.0/μ.λ.value(), μ.σ2.α.value(), μ.σ2.β.value());
  }

  function simulateLazy() -> Real? {
    return simulate_normal_inverse_gamma_gaussian(μ.μ.peak(),
        1.0/μ.λ.peak(), μ.σ2.α.peak(), μ.σ2.β.peak());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_normal_inverse_gamma_gaussian(x, μ.μ.value(),
        1.0/μ.λ.value(), μ.σ2.α.value(), μ.σ2.β.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_normal_inverse_gamma_gaussian(x, μ.μ,
        box(1.0/μ.λ), μ.σ2.α, μ.σ2.β);
  }

  function update(x:Real) {
    (μ.μ, μ.λ, μ.σ2.α, μ.σ2.β) <- box(update_normal_inverse_gamma_gaussian(
        x, μ.μ.value(), μ.λ.value(), μ.σ2.α.value(), μ.σ2.β.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (μ.μ, μ.λ, μ.σ2.α, μ.σ2.β) <- update_lazy_normal_inverse_gamma_gaussian(
        x, μ.μ, μ.λ, μ.σ2.α, μ.σ2.β);
  }

  function cdf(x:Real) -> Real? {
    return cdf_normal_inverse_gamma_gaussian(x, μ.μ.value(),
        1.0/μ.λ.value(), μ.σ2.α.value(), μ.σ2.β.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_normal_inverse_gamma_gaussian(P, μ.μ.value(),
        1.0/μ.λ.value(), μ.σ2.α.value(), μ.σ2.β.value());
  }

  function link() {
    μ.setChild(this);
  }
  
  function unlink() {
    μ.releaseChild(this);
  }
}

function NormalInverseGammaGaussian(μ:NormalInverseGamma) -> NormalInverseGammaGaussian {
  m:NormalInverseGammaGaussian(μ);
  m.link();
  return m;
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Random<Real>, σ2:Random<Real>) -> Distribution<Real> {
  let p <- InverseGamma?(σ2.p);
  if p? {
    let q <- μ.graftNormalInverseGamma(p!);
    if q? {
      return NormalInverseGammaGaussian(q!);
    } else {
      return NormalInverseGamma(μ, box(1.0), p!);
    }
  } else {
    return construct<Gaussian>(μ, σ2);
  }
}

/*
 * Simulate a Gaussian distribution with a normal inverse-gamma prior.
 *
 * - μ: Mean.
 * - a2: Variance.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 */
function simulate_normal_inverse_gamma_gaussian(μ:Real, a2:Real,
    α:Real, β:Real) -> Real {
  return simulate_student_t(2.0*α, μ, 2.0*β*(1.0 + a2));
}

/*
 * Observe a Gaussian variate with a normal inverse-gamma prior.
 *
 * - x: The variate.
 * - μ: Mean.
 * - a2: Variance.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_normal_inverse_gamma_gaussian(x:Real, μ:Real, a2:Real,
    α:Real, β:Real) -> Real {
  return logpdf_student_t(x, 2.0*α, μ, 2.0*β*(1.0 + a2));
}

/*
 * Observe a Gaussian variate with a normal inverse-gamma prior.
 *
 * - x: The variate.
 * - μ: Mean.
 * - a2: Variance.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_normal_inverse_gamma_gaussian(x:Expression<Real>, μ:Expression<Real>, a2:Expression<Real>,
    α:Expression<Real>, β:Expression<Real>) -> Expression<Real> {
  return logpdf_lazy_student_t(x, box(2.0*α), μ, box(2.0*β*(1.0 + a2)));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * - x: The variate.
 * - μ: Mean.
 * - λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `μ'`, `λ'`, `α'` and `β'`.
 */
function update_normal_inverse_gamma_gaussian(x:Real, μ:Real, λ:Real,
    α:Real, β:Real) -> (Real, Real, Real, Real) {
  let λ' <- λ + 1.0;
  let μ' <- (λ*μ + x)/λ';
  let α' <- α + 0.5;
  let β' <- β + 0.5*(λ/λ')*pow(x - μ, 2.0);
  
  return (μ', λ', α', β');
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * - x: The variate.
 * - μ: Mean.
 * - λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `μ'`, `λ'`, `α'` and `β'`.
 */
function update_lazy_normal_inverse_gamma_gaussian(x:Expression<Real>,
    μ:Expression<Real>, λ:Expression<Real>, α:Expression<Real>,
    β:Expression<Real>) -> (Expression<Real>, Expression<Real>,
    Expression<Real>, Expression<Real>) {
  let λ' <- λ + 1.0;
  let μ' <- (λ*μ + x)/λ';
  let α' <- α + 0.5;
  let β' <- β + 0.5*(λ/λ')*pow(x - μ, 2.0);
  return (box(μ'), box(λ'), box(α'), box(β'));
}

/*
 * CDF of a Gaussian variate with a normal inverse-gamma prior.
 *
 * - x: The variate.
 * - μ: Mean.
 * - a2: Variance.
 * - α: Shape of the inverse-gamma.
 * - β: Scale of the inverse-gamma.
 *
 * Return: the cumulative probability.
 */
function cdf_normal_inverse_gamma_gaussian(x:Real, μ:Real, a2:Real,
    α:Real, β:Real) -> Real {
  return cdf_student_t(x, 2.0*α, μ, 2.0*β*(1.0 + a2));
}
