/**
 * Multivariate linear-normal-inverse-gamma-Gaussian distribution.
 */
final class LinearMultivariateNormalInverseGammaGaussian(
    a:Expression<Real[_]>, μ:MultivariateNormalInverseGamma,
    c:Expression<Real>) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Expression<Real[_]> <- a;
    
  /**
   * Mean.
   */
  μ:MultivariateNormalInverseGamma <- μ;

  /**
   * Offset.
   */
  c:Expression<Real> <- c;

  function rows() -> Integer {
    return c.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_linear_multivariate_normal_inverse_gamma_gaussian(
        a.value(), μ.ν.value(), μ.Λ.value(), c.value(), μ.α.value(),
        μ.γ.value());
  }

  function simulateLazy() -> Real? {
    return simulate_linear_multivariate_normal_inverse_gamma_gaussian(
        a.eval(), μ.ν.eval(), μ.Λ.eval(), c.eval(), μ.α.eval(), μ.γ.eval());
        
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_linear_multivariate_normal_inverse_gamma_gaussian(x,
        a.value(), μ.ν.value(), μ.Λ.value(), c.value(), μ.α.value(),
        μ.γ.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_linear_multivariate_normal_inverse_gamma_gaussian(x,
        a, μ.ν, μ.Λ, c, μ.α, μ.γ);
  }

  function update(x:Real) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- box(update_linear_multivariate_normal_inverse_gamma_gaussian(
        x, a.value(), μ.ν.value(), μ.Λ.value(), c.value(), μ.α.value(), 
        μ.γ.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (μ.ν, μ.Λ, μ.α, μ.γ) <- update_lazy_linear_multivariate_normal_inverse_gamma_gaussian(
        x, a, μ.ν, μ.Λ, c, μ.α, μ.γ);
  }

  function cdf(x:Real) -> Real? {
    return cdf_linear_multivariate_normal_inverse_gamma_gaussian(x,
        a.value(), μ.ν.value(), μ.Λ.value(), c.value(), μ.α.value(),
        μ.γ.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_linear_multivariate_normal_inverse_gamma_gaussian(P,
        a.value(), μ.ν.value(), μ.Λ.value(), c.value(), μ.α.value(),
        μ.γ.value());
  }

  function link() {
    μ.setChild(this);
  }
  
  function unlink() {
    μ.releaseChild(this);
  }
}

function LinearMultivariateNormalInverseGammaGaussian<Left,Right>(a:Left, μ:MultivariateNormalInverseGamma, c:Right) -> {
  m:LinearMultivariateNormalInverseGammaGaussian(box(a), μ, box(c));
  m.link();
  return m;
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle>(μ:DotAdd<Left,Random<Real[_]>,Middle>, σ2:Random<Real>) -> Distribution<Real> {
  let p <- InverseGamma?(σ2.p);
  if p? {
    let q <- μ.m!.graftMultivariateNormalInverseGamma(p!);
    if q? {
      return LinearMultivariateNormalInverseGammaGaussian(μ.l!, q!, μ.r!);
    } else {
      return NormalInverseGamma(μ, box(1.0), p!);
    }
  } else {
    return construct<Gaussian>(box(μ), σ2);
  }
}

/*
 * Simulate a Gaussian distribution with a linear transformation of a
 * multivariate linear normal inverse-gamma prior.
 *
 * - a: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 */
function simulate_linear_multivariate_normal_inverse_gamma_gaussian(
    a:Real[_], ν:Real[_], Λ:Real[_,_], c:Real, α:Real, γ:Real) -> Real {
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return simulate_student_t(2.0*α, dot(a, μ) + c,
      2.0*β*(1.0 + dot(a, solve(Λ, a))));
}

/*
 * Observe a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_linear_multivariate_normal_inverse_gamma_gaussian(x:Real,
    a:Real[_], ν:Real[_], Λ:Real[_,_], c:Real, α:Real, γ:Real) -> Real {
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return logpdf_student_t(x, 2.0*α, dot(a, μ) + c,
      2.0*β*(1.0 + dot(a, solve(Λ, a))));
}

/*
 * Observe a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_linear_multivariate_normal_inverse_gamma_gaussian(x:Expression<Real>,
    a:Expression<Real[_]>, ν:Expression<Real[_]>, Λ:Expression<Real[_,_]>, c:Expression<Real>, α:Expression<Real>, γ:Expression<Real>) -> Expression<Real> {
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return logpdf_lazy_student_t(x, box(2.0*α), box(dot(a, μ) + c), box(2.0*β*(1.0 + dot(a, solve(Λ, a)))));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation involving a dot product, and Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - ν: Prior precision times mean.
 * - Λ: Prior precision.
 * - c: Offset.
 * - α: Prior shape of the inverse-gamma.
 * - γ: Prior scale accumulator.
 *
 * Returns: the posterior hyperparameters `μ'`, `Λ'`, `γ'`, `α'` and `β'`.
 */
function update_linear_multivariate_normal_inverse_gamma_gaussian(
    x:Real, a:Real[_], ν:Real[_], Λ:Real[_,_], c:Real, α:Real, γ:Real) ->
    (Real[_], Real[_,_], Real, Real) {
  let Λ' <- rank_update(Λ, a);
  let ν' <- ν + a*(x - c);
  let α' <- α + 0.5;
  let γ' <- γ + 0.5*pow(x - c, 2.0);
  return (ν', Λ', α', γ');
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation involving a dot product, and Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - ν: Prior precision times mean.
 * - Λ: Prior precision.
 * - c: Offset.
 * - α: Prior shape of the inverse-gamma.
 * - γ: Prior scale accumulator.
 *
 * Returns: the posterior hyperparameters `μ'`, `Λ'`, `γ'`, `α'` and `β'`.
 */
function update_lazy_linear_multivariate_normal_inverse_gamma_gaussian(
    x:Expression<Real>, a:Expression<Real[_]>, ν:Expression<Real[_]>,
    Λ:Expression<Real[_,_]>, c:Expression<Real>, α:Expression<Real>,
    γ:Expression<Real>) -> (Expression<Real[_]>, Expression<Real[_,_]>,
    Expression<Real>, Expression<Real>) {
  let Λ' <- rank_update(Λ, a);
  let ν' <- ν + a*(x - c);
  let α' <- α + 0.5;
  let γ' <- γ + 0.5*pow(x - c, 2.0);
  return (box(ν'), box(Λ'), box(α'), box(γ'));
}

/*
 * CDF of a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Return: the cumulative probability.
 */
function cdf_linear_multivariate_normal_inverse_gamma_gaussian(x:Real,
    a:Real[_], ν:Real[_], Λ:Real[_,_], c:Real, α:Real, γ:Real) -> Real {
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return cdf_student_t(x, 2.0*α, dot(a, μ) + c, 2.0*β*(1.0 + dot(a, solve(Λ, a))));
}

/*
 * Quantile of a Gaussian distribution with a multivariate linear normal
 * inverse-gamma prior with linear transformation.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - ν: Precision times mean.
 * - Λ: Precision.
 * - c: Offset.
 * - α: Shape of the inverse-gamma.
 * - γ: Scale accumulator of the inverse-gamma.
 *
 * Return: the quantile.
 */
function quantile_linear_multivariate_normal_inverse_gamma_gaussian(P:Real,
    a:Real[_], ν:Real[_], Λ:Real[_,_], c:Real, α:Real, γ:Real) -> Real {
  let μ <- solve(Λ, ν);
  let β <- γ - 0.5*dot(μ, ν);
  return quantile_student_t(P, 2.0*α, dot(a, μ) + c,
      (β/α)*(1.0 + dot(a, solve(Λ, a))));
}
