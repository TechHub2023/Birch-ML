/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class LinearMultivariateGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(
    a:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, s2:Arg5) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Prior mean.
   */
  μ:Arg2 <- μ;

  /**
   * Prior covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;
  
  /**
   * Likelihood covariance.
   */
  s2:Arg5 <- s2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_linear_multivariate_gaussian_gaussian(value(a), value(μ),
        value(Σ), value(c), value(s2));
  }

  override function simulateLazy() -> Real? {
    return simulate_linear_multivariate_gaussian_gaussian(peak(a), peak(μ),
        peak(Σ), peak(c), peak(s2));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_linear_multivariate_gaussian_gaussian(x, value(a), value(μ),
        value(Σ), value(c), value(s2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_linear_multivariate_gaussian_gaussian(x, a, μ, Σ, c,
        s2));
  }

  override function update(x:Real) -> Delay? {
    return update_linear_multivariate_gaussian_gaussian(x, value(a), value(μ),
        value(Σ), value(c), value(s2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_linear_multivariate_gaussian_gaussian(x, a, μ, Σ, c, s2);
  }

  override function cdf(x:Real) -> Real? {
    return cdf_linear_multivariate_gaussian_gaussian(x, value(a), value(μ),
        value(Σ), value(c), value(s2));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_linear_multivariate_gaussian_gaussian(P, value(a),
        value(μ), value(Σ), value(c), value(s2));
  }

  override function isGaussian() -> Boolean {
    return true;
  }

  override function getGaussian() -> (Expression<Real>, Expression<Real>)? {
    return box(dot(a, μ) + c, dot(a, Σ*a) + s2);
  }
}

function LinearMultivariateGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1,
    μ:Arg2, Σ:Arg3, c:Arg4, s2:Arg5) -> {
  return construct<LinearMultivariateGaussianGaussian<Arg1,Arg2,Arg3,Arg4,
      Arg5>>(a, μ, Σ, c, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:DotAdd<Arg1,Random<Real[_]>,Arg2>,
    Σ:Arg3) -> Distribution<Real> {
  if μ.m.hasMultivariateGaussian() {
    μ.m.prune();
    let (m, S) <- μ.m.getMultivariateGaussian();
    let p <- LinearMultivariateGaussianGaussian(μ.l, m, S, μ.r, Σ);
    μ.m.graft(p);
    return p;
  } else {
    return construct<Gaussian<DotAdd<Arg1,Random<Real[_]>,Arg2>,Arg3>>(μ, Σ);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Dot<Arg1,Random<Real[_]>>, Σ:Arg2) ->
    Distribution<Real> {
  if μ.r.hasMultivariateGaussian() {
    μ.r.prune();
    let (m, S) <- μ.r.getMultivariateGaussian();
    let p <- LinearMultivariateGaussianGaussian(μ.l, m, S, 0.0, Σ);
    μ.r.graft(p);
    return p;
  } else {
    return construct<Gaussian<Dot<Arg1,Random<Real[_]>>,Arg2>>(μ, Σ);
  }
}

/*
 * Simulate a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 */
function simulate_linear_multivariate_gaussian_gaussian(a:Real[_], μ:Real[_],
    Σ:Real[_,_], c:Real, s2:Real) -> Real {
  return simulate_gaussian(dot(a, μ) + c, dot(a, Σ*a) + s2);
}

/*
 * Observe a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_linear_multivariate_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6>(x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, s2:Arg6) -> {
  return logpdf_gaussian(x, dot(a, μ) + c, dot(a, Σ*a) + s2);
}

/*
 * CDF of a Gaussian variate with linear transformation of Gaussian prior on
 * the mean.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Return: the cumulative probability.
 */
function cdf_linear_multivariate_gaussian_gaussian(x:Real, a:Real[_],
    μ:Real[_], Σ:Real[_,_], c:Real, s2:Real) -> Real {
  return cdf_gaussian(x, dot(a, μ) + c, dot(a, Σ*a) + s2);
}

/*
 * Quantile of a Gaussian distribution with linear transformation of Gaussian
 * prior on the mean.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Return: the quantile.
 */
function quantile_linear_multivariate_gaussian_gaussian(P:Real, a:Real[_],
    μ:Real[_], Σ:Real[_,_], c:Real, s2:Real) -> Real {
  return quantile_gaussian(P, dot(a, μ) + c, dot(a, Σ*a) + s2);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation involving a dot product, and a multivariate Gaussian
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_linear_multivariate_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6>(x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, s2:Arg6) -> {
  let k' <- Σ*a/(dot(a, Σ*a) + s2);
  let μ' <- μ + k'*(x - dot(a, μ) - c);
  let Σ' <- Σ - outer(k', a)*Σ;
  return MultivariateGaussian(μ', Σ');
}
