/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class LinearMultivariateGaussianGaussian(a:Expression<Real[_]>,
    m:MultivariateGaussian, c:Expression<Real>, s2:Expression<Real>) <
    Gaussian(box(dot(a, m.μ) + c), box(dot(a, matrix<Real>(m.Σ)*a) + s2)) {
  /**
   * Scale.
   */
  a:Expression<Real[_]> <- a;
    
  /**
   * Mean.
   */
  m:MultivariateGaussian <- m;

  /**
   * Offset.
   */
  c:Expression<Real> <- c;
  
  /**
   * Likelihood covariance.
   */
  s2:Expression<Real> <- s2;

  function update(x:Real) {
    (m.μ, m.Σ) <- box(update_linear_multivariate_gaussian_gaussian(x, a.value(), m.μ.value(), m.Σ.value(), c.value(), s2.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (m.μ, m.Σ) <- update_lazy_linear_multivariate_gaussian_gaussian(x, a, m.μ, m.Σ, c, s2);
  }

  function link() {
    m.setChild(this);
  }
  
  function unlink() {
    m.releaseChild(this);
  }
}

function LinearMultivariateGaussianGaussian<Arg1,Arg3,Arg4>(a:Arg1, μ:MultivariateGaussian, c:Arg3, σ2:Arg4) -> {
  m:LinearMultivariateGaussianGaussian(box(a), μ, box(c), box(σ2));
  m.link();
  return m;
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle,Right>(μ:DotAdd<Left,Random<Real[_]>,Middle>, σ2:Right) -> Distribution<Real> {
  let p <- μ.m!.graftMultivariateGaussian();
  if p? {
    return LinearMultivariateGaussianGaussian(μ.l!, p!, μ.r!, σ2);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation involving a dot product, and a multivariate Gaussian
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_linear_multivariate_gaussian_gaussian(x:Real, a:Real[_],
    μ:Real[_], Σ:Real[_,_], c:Real, s2:Real) -> (Real[_], Real[_,_]) {
  let k' <- Σ*a/(dot(a, Σ*a) + s2);
  let μ' <- μ + k'*(x - dot(a, μ) - c);
  let Σ' <- Σ - outer(k', a)*Σ;
  return (μ', Σ');
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation involving a dot product, and a multivariate Gaussian
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - s2: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_lazy_linear_multivariate_gaussian_gaussian(
    x:Expression<Real>, a:Expression<Real[_]>, μ:Expression<Real[_]>,
    Σ:Expression<Real[_,_]>, c:Expression<Real>, s2:Expression<Real>) ->
    (Expression<Real[_]>, Expression<Real[_,_]>) {
  let k' <- Σ*a/(dot(a, Σ*a) + s2);
  let μ' <- μ + k'*(x - dot(a, μ) - c);
  let Σ' <- Σ - outer(k', a)*Σ;
  return (box(μ'), box(Σ'));
}
