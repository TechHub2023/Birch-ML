/**
 * Normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$\sigma^2 \sim \mathrm{Inverse-Gamma}(\alpha, \beta)$$
 * $$x \mid \sigma^2 \sim \mathrm{N}(\mu, a^2\sigma^2),$$
 *
 * which may be denoted:
 *
 * $$(x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma(\mu, a^2, \alpha, \beta),$$
 *
 * and is the conjugate prior of a Gaussian distribution with both
 * unknown mean and unknown variance.
 *
 * In model code, it is not usual to use this final class directlyDistribution. Instead,
 * establish the conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, β);
 *     x ~ Gaussian(μ, a2*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `a2` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 */
final class NormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>(ν:Arg1,
    λ:Arg2, α:Arg3, β:Arg4) < Distribution<Real> {
  /**
   * Mean.
   */
  ν:Arg1 <- ν;
  
  /**
   * Precision scale.
   */
  λ:Arg2 <- λ;
  
  /**
   * Variance shape.
   */
  α:Arg3 <- α;

  /**
   * Variance scale.
   */
  β:Arg4 <- β;
  
  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_normal_inverse_gamma(value(ν), value(λ), value(α),
        value(β));
  }

  override function simulateLazy() -> Real? {
    return simulate_normal_inverse_gamma(peek(ν), peek(λ), peek(α), peek(β));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_normal_inverse_gamma(x, value(ν), value(λ), value(α),
        value(β));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_normal_inverse_gamma(x, ν, λ, α, β));
  }

  override function update(x:Real) -> Delay? {
    return update_normal_inverse_gamma(x, value(ν), value(λ), value(α),
        value(β));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
   return update_normal_inverse_gamma(x, ν, λ, α, β);
  }

  override function cdf(x:Real) -> Real? {
    return cdf_normal_inverse_gamma(x, value(ν), value(λ), value(α),
        value(β));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_normal_inverse_gamma(P, value(ν), value(λ), value(α),
        value(β));
  }

  override function isNormalInverseGamma() -> Boolean {
    return true;
  }

  override function getNormalInverseGamma() -> (Expression<Real>, Expression<Real>,
      Expression<Real>, Expression<Real>)? {
    return box(ν, λ, α, β);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "NormalInverseGamma");
    buffer.set("ν", value(ν));
    buffer.set("λ", value(λ));
    buffer.set("α", value(α));
    buffer.set("β", value(β));
  }
}

// instantiated class NormalInverseGammaDistribution<Expression<Real>,
//     Expression<Real>,Expression<Real>,Expression<Real>>;

function NormalInverseGamma<Arg1,Arg2,Arg3,Arg4>(ν:Arg1, λ:Arg2, α:Arg3,
    β:Arg4) -> {
  return construct<NormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>>(ν, λ,
      α, β);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Arg, σ2:Random<Real>) -> Distribution<Real> {
  σ2.prune();
  if σ2.hasInverseGamma() {
    let (α, β) <- σ2.getInverseGamma();
    let p <- NormalInverseGamma(μ, 1.0, α, β);
    σ2.graft(p);
    return p;
  } else {
    return construct<GaussianDistribution<Arg,Random<Real>>>(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Arg1, σ2:Multiply<Arg2,Random<Real>>) ->
    Distribution<Real> {
  σ2.r.prune();
  if σ2.r.hasInverseGamma() {
    let (α, β) <- σ2.r.getInverseGamma();
    let p <- NormalInverseGamma(μ/σ2.l, 1.0/σ2.l, α, β);
    σ2.r.graft(p);
    return p;
  } else {
    return construct<GaussianDistribution<Arg1,Multiply<Arg2,Random<Real>>>>(
        μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Arg1, σ2:Multiply<Random<Real>,Arg2>) ->
    Distribution<Real> {
  σ2.l.prune();
  if σ2.l.hasInverseGamma() {
    let (α, β) <- σ2.l.getInverseGamma();
    let p <- NormalInverseGamma(μ/σ2.r, 1.0/σ2.r, α, β);
    σ2.l.graft(p);
    return p;
  } else {
    return construct<GaussianDistribution<Arg1,Multiply<Random<Real>,Arg2>>>(
        μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Arg, σ2:Multiply<Random<Real>,Random<Real>>) ->
    Distribution<Real> {
  σ2.l.prune();
  σ2.r.prune();
  if σ2.l.hasInverseGamma() {
    let (α, β) <- σ2.l.getInverseGamma();
    let p <- NormalInverseGamma(μ/σ2.r, 1.0/σ2.r, α, β);
    σ2.l.graft(p);
    return p;
  } else if σ2.r.hasInverseGamma() {
    let (α, β) <- σ2.r.getInverseGamma();
    let p <- NormalInverseGamma(μ/σ2.l, 1.0/σ2.l, α, β);
    σ2.r.graft(p);
    return p;
  } else {
    return construct<GaussianDistribution<Arg,Multiply<Random<Real>,
        Random<Real>>>>(μ, σ2);
  }
}

/*
 * Simulate a normal inverse-gamma distribution.
 *
 * - ν: Precision times mean.
 * - λ: Precision scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 */
function simulate_normal_inverse_gamma(ν:Real, λ:Real, α:Real, β:Real) ->
    Real {
  return simulate_student_t(2.0*α, ν/λ, β/(α*λ));
}

/*
 * Observe a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - λ: Precision scale.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Returns: the log probability density.
 */
function logpdf_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1,
    ν:Arg2, λ:Arg3, α:Arg4, β:Arg5) -> {
  return logpdf_student_t(x, 2.0*α, ν/λ, β/(α*λ));
}

/*
 * Update the parameters of an inverse-gamma distribution that is part
 * of a normal inverse-gamma joint distribution.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - α: Prior shape of the inverse-gamma.
 * - β: Prior scale of the inverse-gamma.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(x:Arg1,
    ν:Arg2, λ:Arg3, α:Arg4, β:Arg5) -> {
  return InverseGamma(α + 0.5, β + 0.5*pow(x - ν/λ, 2.0)*λ);
}

/*
 * CDF of a normal inverse-gamma variate.
 *
 * - x: The variate.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - α: Shape of inverse-gamma on scale.
 * - β: Scale of inverse-gamma on scale.
 *
 * Return: the cumulative probability.
 */
function cdf_normal_inverse_gamma(x:Real, ν:Real, λ:Real, α:Real, β:Real) ->
    Real {
  return cdf_student_t(x, 2.0*α, ν/λ, β/(α*λ));
}

/*
 * Quantile of a normal inverse-gamma distribution.
 *
 * - P: The cumulative probability.
 * - ν: Precision times mean.
 * - λ: Precision.
 * - α: Shape of inverse-gamma on variance.
 * - β: Scale of inverse-gamma on variance.
 *
 * Return: the quantile.
 */
function quantile_normal_inverse_gamma(P:Real, ν:Real, λ:Real, α:Real,
    β:Real) -> Real {
  return quantile_student_t(P, 2.0*α, ν/λ, β/(α*λ));
}
