/**
 * Linear-Gaussian-Gaussian distribution.
 */
final class LinearGaussianGaussian(a:Expression<Real>, m:Gaussian,
    c:Expression<Real>, s2:Expression<Real>) < Gaussian(box(a*m.μ + c),
    box(a*a*m.σ2 + s2)) {
  /**
   * Scale.
   */
  a:Expression<Real> <- a;
    
  /**
   * Mean.
   */
  m:Gaussian <- m;

  /**
   * Offset.
   */
  c:Expression<Real> <- c;

  /**
   * Likelihood variance.
   */
  s2:Expression<Real> <- s2;

  function update(x:Real) {
    (m.μ, m.σ2) <- box(update_linear_gaussian_gaussian(x, a.value(), m.μ.value(), m.σ2.value(), c.value(), s2.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (m.μ, m.σ2) <- update_lazy_linear_gaussian_gaussian(x, a, m.μ, m.σ2, c, s2);
  }

  function link() {
    m.setChild(this);
  }
  
  function unlink() {
    m.releaseChild(this);
  }
}

function LinearGaussianGaussian<Arg1,Arg3,Arg4>(a:Arg1, μ:Gaussian, c:Arg3, σ2:Arg4) -> {
  m:LinearGaussianGaussian(box(a), μ, box(c), box(σ2));
  m.link();
  return m;
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Left,Middle,Right>(μ:MultiplyAdd<Left,Random<Real>,Middle>, σ2:Right) -> Distribution<Real> {
  let p <- μ.m!.graftGaussian();
  if p? {
    return LinearGaussianGaussian(μ.l!, p!, μ.r!, σ2);
  } else {
    return construct<Gaussian>(box(μ), box(σ2));
  }
}

/*
 * Update the parameters of a Gaussian distribution with a Gaussian
 * likelihood and scaling.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Likelihood variance.
 *
 * Returns: the posterior hyperparameters `μ'` and `λ'`.
 */
function update_linear_gaussian_gaussian(x:Real, a:Real, μ:Real, σ2:Real,
    c:Real, s2:Real) -> (Real, Real) {
  let λ <- 1.0/σ2;
  let l <- 1.0/s2;
  let λ' <- λ + a*a*l;
  let μ' <- (λ*μ + a*l*(x - c))/λ';
  return (μ', 1.0/λ');
}

/*
 * Update the parameters of a Gaussian distribution with a Gaussian
 * likelihood and scaling.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Likelihood variance.
 *
 * Returns: the posterior hyperparameters `μ'` and `λ'`.
 */
function update_lazy_linear_gaussian_gaussian(x:Expression<Real>,
    a:Expression<Real>, μ:Expression<Real>, σ2:Expression<Real>,
    c:Expression<Real>, s2:Expression<Real>) -> (Expression<Real>, Expression<Real>) {
  let λ <- 1.0/σ2;
  let l <- 1.0/s2;
  let λ' <- λ + a*a*l;
  let μ' <- (λ*μ + a*l*(x - c))/λ';
  return (box(μ'), box(1.0/λ'));
}
