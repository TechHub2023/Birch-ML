/**
 * Linear-Gaussian-Gaussian distribution.
 */
final class LinearGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, μ:Arg2,
    σ2:Arg3, c:Arg4, s2:Arg5) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Prior mean.
   */
  μ:Arg2 <- μ;

  /**
   * Prior variance.
   */
  σ2:Arg3 <- σ2;

  /**
   * Offset.
   */
  c:Arg4 <- c;

  /**
   * Likelihood variance.
   */
  s2:Arg5 <- s2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_gaussian(value(a*μ + c), value(a*a*σ2 + s2));
  }

  override function simulateLazy() -> Real? {
    return simulate_gaussian(peak(a*μ + c), peak(a*a*σ2 + s2));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_gaussian(x, value(a*μ + c), value(a*a*σ2 + s2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_gaussian(x, a*μ + c, a*a*σ2 + s2));
  }

  override function update(x:Real) -> Delay? {
    return update_linear_gaussian_gaussian(x, value(a), value(μ), value(σ2),
        value(c), value(s2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_linear_gaussian_gaussian(x, a, μ, σ2, c, s2);
  }

  override function cdf(x:Real) -> Real? {
    return cdf_gaussian(x, value(a*μ + c), value(a*a*σ2 + s2));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_gaussian(P, value(a*μ + c), value(a*a*σ2 + s2));
  }

  override function isGaussian() -> Boolean {
    return true;
  }

  override function getGaussian() -> (Expression<Real>, Expression<Real>)? {
    return box(a*μ + c, a*a*σ2 + s2);
  }
}

function LinearGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1, μ:Arg2,
    σ2:Arg3, c:Arg4, s2:Arg5) -> {
  return construct<LinearGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>>(a, μ, σ2,
      c, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:MultiplyAdd<Arg1,Random<Real>,Arg2>,
    σ2:Arg3) -> Distribution<Real> {
  if μ.m!.hasGaussian() {
    μ.m!.prune();
    let (m, s2) <- μ.m!.getGaussian();
    let p <- LinearGaussianGaussian(μ.l!, m, s2, μ.r!, σ2);
    μ.m!.graft(p);
    return p;
  } else {
    return construct<Gaussian<MultiplyAdd<Arg1,Random<Real>,Arg2>,Arg3>>(μ,
        σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Multiply<Arg1,Random<Real>>, σ2:Arg2) ->
    Distribution<Real> {
  if μ.r!.hasGaussian() {
    μ.l!.prune();
    let (m, s2) <- μ.l!.getGaussian();
    let p <- LinearGaussianGaussian(μ.l!, m, s2, 0.0, σ2);
    μ.l!.graft(p);
    return p;
  } else {
    return construct<Gaussian<Multiply<Arg1,Random<Real>>,Arg2>>(μ, σ2);
  }
}

/*
 * Update the parameters of a Gaussian distribution with a Gaussian
 * likelihood and scaling.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - c: Offset.
 * - s2: Likelihood variance.
 *
 * Returns: the posterior hyperparameters `μ'` and `λ'`.
 */
function update_linear_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    x:Arg1, a:Arg2, μ:Arg3, σ2:Arg4, c:Arg5, s2:Arg6) -> {
  let λ <- 1.0/σ2;
  let l <- 1.0/s2;
  let λ' <- λ + a*a*l;
  let μ' <- (λ*μ + a*l*(x - c))/λ';
  return Gaussian(μ', 1.0/λ');
}
