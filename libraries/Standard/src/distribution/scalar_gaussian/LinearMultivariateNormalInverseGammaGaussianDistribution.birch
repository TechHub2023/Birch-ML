/**
 * Multivariate linear-normal-inverse-gamma-Gaussian distribution.
 */
final class LinearMultivariateNormalInverseGammaGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5,
    c:Arg6, ω2:Arg7) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Prior shape.
   */
  α:Arg4 <- α;

  /**
   * Prior scale.
   */
  β:Arg5 <- β;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood variance scale.
   */
  ω2:Arg7 <- ω2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_linear_multivariate_normal_inverse_gamma_gaussian(
        value(a), value(μ), value(Σ), value(c), value(α), value(β),
        value(ω2));
  }

  override function simulateLazy() -> Real!? {
    return simulate_linear_multivariate_normal_inverse_gamma_gaussian(
        eval(a), eval(μ), eval(Σ), eval(c), eval(α), eval(β), eval(ω2));
        
  }
  
  override function logpdf(x:Real!) -> Real! {
    return logpdf_linear_multivariate_normal_inverse_gamma_gaussian(x,
        value(a), value(μ), value(Σ), value(c), value(α), value(β),
        value(ω2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_linear_multivariate_normal_inverse_gamma_gaussian(x, a,
        μ, Σ, c, α, β, ω2));
  }

  override function update(x:Real!) -> Delay? {
    return update_linear_multivariate_normal_inverse_gamma_gaussian(x,
        value(a), value(μ), value(Σ), value(c), value(α), value(β),
        value(ω2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_linear_multivariate_normal_inverse_gamma_gaussian(x, a,
        μ, Σ, c, α, β, ω2);
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_linear_multivariate_normal_inverse_gamma_gaussian(x, value(a),
        value(μ), value(Σ), value(c), value(α), value(β), value(ω2));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_linear_multivariate_normal_inverse_gamma_gaussian(P,
        value(a), value(μ), value(Σ), value(c), value(α), value(β),
        value(ω2));
  }
}

function LinearMultivariateNormalInverseGammaGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return wrap_linear_multivariate_normal_inverse_gamma_gaussian(a, μ, chol(Σ),
      α, β, c, sqrt(ω2));
}
function wrap_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return make_linear_multivariate_normal_inverse_gamma_gaussian(wrap(a),
      wrap(μ), wrap(Σ), wrap(α), wrap(β), wrap(c), wrap(ω2));
}
function make_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return construct<LinearMultivariateNormalInverseGammaGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(a, μ, Σ, α, β, c, ω2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:OpAdd<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(μ, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:OpAdd<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:OpMul<Random<Real>,Arg3>) -> Distribution<Real> {
  return Gaussian(μ, σ2.r*σ2.l);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:OpAdd<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:OpMul<Arg3,Random<Real>>) -> Distribution<Real> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseGamma() && μ.l.r.isGrandChildOf(σ2.r) {
    let (m, Σ, α, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_linear_multivariate_normal_inverse_gamma_gaussian(μ.l.l, m,
        Σ, α, β, μ.r, σ2.l);
    μ.l.r.graft(p, 1);
    σ2.r.graftReplace(p, 2);
    μ.l.r.join(σ2.r);
    return p;
  } else {
    σ2.r.prune();
    if σ2.r.hasInverseGamma() {
      let (α, β) <- σ2.r.getInverseGamma();
      let p <- wrap_normal_inverse_gamma(μ, σ2.l, α, β);
      σ2.r.graft(p);
      return p;
    } else if μ.l.r.hasMultivariateGaussian() {
      let (m, S) <- μ.l.r.getMultivariateGaussian();
      let p <- wrap_linear_multivariate_gaussian_gaussian(μ.l.l, m, S, μ.r,
          σ2);
      μ.l.r.graft(p);
      return p;
    } else {
      return wrap_gaussian(μ, σ2);
    }
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:OpAdd<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:OpMul<Random<Real>,Random<Real>>) -> Distribution<Real> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateNormalInverseGamma() && μ.l.r.isGrandChildOf(σ2.r) {
    let (m, Σ, α, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_linear_multivariate_normal_inverse_gamma_gaussian(μ.l.l, m,
        Σ, α, β, μ.r, σ2.l);
    μ.l.r.graft(p, 1);
    σ2.r.graftReplace(p, 2);
    μ.l.r.join(σ2.r);
    return p;
  } else if μ.l.r.hasMultivariateNormalInverseGamma() &&
      μ.l.r.isGrandChildOf(σ2.l) {
    let (m, Σ, α, β) <- μ.l.r.getMultivariateNormalInverseGamma();
    let p <- wrap_linear_multivariate_normal_inverse_gamma_gaussian(μ.l.l, m,
        Σ, α, β, μ.r, σ2.r);
    μ.l.r.graft(p, 1);
    σ2.l.graftReplace(p, 2);
    μ.l.r.join(σ2.l);
    return p;
  } else {
    σ2.l.prune();
    σ2.r.prune();
    if σ2.l.hasInverseGamma() {
      let (α, β) <- σ2.l.getInverseGamma();
      let p <- wrap_normal_inverse_gamma(μ, σ2.r, α, β);
      σ2.l.graft(p);
      return p;
    } else if σ2.r.hasInverseGamma() {
      let (α, β) <- σ2.r.getInverseGamma();
      let p <- wrap_normal_inverse_gamma(μ, σ2.l, α, β);
      σ2.r.graft(p);
      return p;
    } else if μ.l.r.hasMultivariateGaussian() {
      let (m, S) <- μ.l.r.getMultivariateGaussian();
      let p <- wrap_linear_multivariate_gaussian_gaussian(μ.l.l, m, S, μ.r,
          σ2);
      μ.l.r.graft(p);
      return p;
    } else {
      return wrap_gaussian(μ, σ2);
    }
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Dot<Arg,Random<Real[_]>>, σ2:Random<Real>) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Dot<Arg1,Random<Real[_]>>,
    σ2:OpMul<Arg2,Random<Real>>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Dot<Arg1,Random<Real[_]>>,
    σ2:OpMul<Random<Real>,Arg2>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Dot<Arg,Random<Real[_]>>,
    σ2:OpMul<Random<Real>,Random<Real>>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/*
 * Simulate a Gaussian distribution with a linear transformation of a
 * multivariate linear normal inverse-gamma prior.
 *
 * - a: Scale vector.
 * - μ: Mean.
 * - Σ: Covariance.
 * - c: Offset.
 * - α: Variance shape.
 * - β: Variance scale.
 * - ω2: Likelihood variance scale.
 */
function simulate_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, α:Arg5, β:Arg6,
    ω2:Arg7) -> {
  let m <- dot(a, μ) + c;
  let s2 <- (β/α)*(ω2 + dot(triinner(Σ, a)));
  return simulate_student_t(2.0*α, m, s2);
}

/*
 * Observe a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * - x: The variate.
 * - a: Scale vector.
 * - μ: Mean.
 * - Σ: Covariance.
 * - c: Offset.
 * - α: Variance shape.
 * - β: Variance scale.
 * - ω2: Likelihood variance scale.
 *
 * Returns: the log probability density.
 */
function logpdf_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5,
    α:Arg6, β:Arg7, ω2:Arg8) -> {
  let m <- dot(a, μ) + c;
  let s2 <- (β/α)*(ω2 + dot(triinner(Σ, a)));
  return logpdf_student_t(x, 2.0*α, m, s2);
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation involving a dot product, and Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Mean.
 * - Σ: Covariance.
 * - c: Offset.
 * - α: Prior variance shape.
 * - β: Prior variance scale.
 * - ω2: Likelihood variance scale.
 *
 * Returns: the posterior hyperparameters `μ'`, `Σ'`, `α'` and `β'`.
 */
function update_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4,
    c:Arg5, α:Arg6, β:Arg7, ω2:Arg8) -> {
  let S <- wrap(triouter(Σ));
  let K' <- wrap(outer(S*a/(dot(triinner(Σ, a)) + ω2), a));
  let S' <- wrap(S - K'*S);
  let μ' <- wrap(μ - K'*μ + S'*a*((x - c)/ω2));
  let Σ' <- wrap(chol(S'));
  let α' <- α + 0.5;
  let β' <- β + 0.5*(pow(x - c, 2.0)/ω2 + dot(trisolve(Σ, μ)) -
      dot(trisolve(Σ', μ')));
  return wrap_multivariate_normal_inverse_gamma(μ', Σ', α', β');
  
}

/*
 * CDF of a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * - x: The variate.
 * - a: Scale.
 * - μ: Mean.
 * - Σ: Covariance.
 * - c: Offset.
 * - α: Variance shape.
 * - β: Variance scale.
 * - ω2: Likelihood variance scale.
 *
 * Return: the cumulative probability.
 */
function cdf_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, α:Arg6,
    β:Arg7, ω2:Arg8) -> {
  let m <- dot(a, μ) + c;
  let s2 <- (β/α)*(dot(triinner(Σ, a)) + ω2);
  return cdf_student_t(x, 2.0*α, m, s2);
}

/*
 * Quantile of a Gaussian distribution with a multivariate linear normal
 * inverse-gamma prior with linear transformation.
 *
 * - P: The cumulative probability.
 * - a: Scale.
 * - μ: Mean.
 * - Σ: Covariance.
 * - c: Offset.
 * - α: Variance shape.
 * - β: Variance scale.
 * - ω2: Likelihood variance scale.
 *
 * Return: the quantile.
 */
function quantile_linear_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(P:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5,
    α:Arg6, β:Arg7, ω2:Arg8) -> {
  let m <- dot(a, μ) + c;
  let s2 <- (β/α)*(dot(triinner(Σ, a)) + ω2);
  return quantile_student_t(P, 2.0*α, m, s2);
}
