/**
 * Gaussian-Gaussian distribution.
 */
final class GaussianGaussian<Arg1,Arg2,Arg3>(μ:Arg1, σ2:Arg2, s2:Arg3) <
    Distribution<Real> {
  /**
   * Mean.
   */
  μ:Arg1 <- μ;

  /**
   * Prior variance.
   */
  σ2:Arg2 <- σ2;

  /**
   * Variance.
   */
  s2:Arg3 <- s2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_gaussian(value(μ), value(σ2 + s2));
  }

  override function simulateLazy() -> Real? {
    return simulate_gaussian(peak(μ), peak(σ2 + s2));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_gaussian(x, value(μ), value(σ2 + s2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_gaussian(x, μ, σ2 + s2));
  }

  override function update(x:Real) -> Delay? {
    return update_gaussian_gaussian(x, value(μ), value(σ2), value(s2));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_gaussian_gaussian(x, μ, σ2, s2);
  }

  override function cdf(x:Real) -> Real? {
    return cdf_gaussian(x, value(μ), value(σ2 + s2));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_gaussian(P, value(μ), value(σ2 + s2));
  }

  override function isGaussian() -> Boolean {
    return true;
  }

  override function getGaussian() -> (Expression<Real>, Expression<Real>)? {
    return box(μ, σ2 + s2);
  }
}

function GaussianGaussian<Arg1,Arg2,Arg3>(μ:Arg1, σ2:Arg2, s2:Arg3) -> {
  return construct<GaussianGaussian<Arg1,Arg2,Arg3>>(μ, σ2, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Random<Real>, σ2:Arg) -> Distribution<Real> {
  if μ.hasGaussian() {
    μ.prune();
    let (m, s2) <- μ.getGaussian();
    let p <- GaussianGaussian(m, s2, σ2);
    μ.graft(p);
    return p;
  } else {
    return construct<Gaussian<Random<Real>,Arg>>(μ, σ2);
  }
}

/*
 * Update the parameters of a Gaussian distribution with a Gaussian
 * likelihood.
 *
 * - x: The variate.
 * - μ: Prior mean.
 * - σ2: Prior variance.
 * - s2: Likelihood variance.
 *
 * Returns: the posterior hyperparameters `μ'` and `σ2'`.
 */
function update_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4>(x:Arg1, μ:Arg2,
    σ2:Arg3, s2:Arg4) -> {
  let λ <- 1.0/σ2;
  let l <- 1.0/s2;
  let λ' <- λ + l;
  let μ' <- (λ*μ + l*x)/λ';
  return Gaussian(μ', 1.0/λ');
}
