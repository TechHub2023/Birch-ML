/**
 * Matrix normal-inverse-Wishart distribution.
 *
 * !!! note
 *     This class does not inherit from MatrixTDistribution, as it is
 *     typically used for a random variable that is marginalized out.
 */
final class MatrixNormalInverseWishartDistribution<Arg1,Arg2,Arg3,Arg4>(
    M:Arg1, Σ:Arg2, Ψ:Arg3, k:Arg4) < Distribution<Real[_,_]> {
  /**
   * Mean.
   */
  M:Arg1 <- M;

  /**
   * Among-row covariance.
   */
  Σ:Arg2 <- Σ;
  
  /**
   * Among-column spread.
   */
  Ψ:Arg3 <- Ψ;
  
  /**
   * Among-column degrees of freedom.
   */
  k:Arg4 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart(value(M), value(Σ),
        value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart(eval(M), eval(Σ), eval(Ψ),
        eval(k));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {   
    return logpdf_matrix_normal_inverse_wishart(X, value(M), value(Σ),
        value(Ψ), value(k));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real!? {   
    return logpdf_matrix_normal_inverse_wishart(X, eval(M), eval(Σ),
        eval(Ψ), eval(k));
  }

  override function hitch(X:Expression<Real[_,_]>) -> Expression<Real>? {   
    return box(logpdf_matrix_normal_inverse_wishart(X, M, Σ, Ψ, k));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart(X, value(M), value(Σ),
        value(Ψ), value(k));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart(X, M, Σ, Ψ, k);
  }

  override function constant() {
    super.constant();
    global.constant(M);
    global.constant(Σ);
    global.constant(Ψ);
    global.constant(k);
  }

  override function isMatrixNormalInverseWishart() -> Boolean {
    return true;
  }

  override function getMatrixNormalInverseWishart() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>)? {
    return box(M, Σ, Ψ, k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MatrixNormalInverseWishart");
    buffer.set("M", value(M));
    buffer.set("Σ", value(Σ));
    buffer.set("Ψ", value(Ψ));
    buffer.set("k", value(k));
  }
}

function MatrixNormalInverseWishart<Arg1,Arg2,Arg3,Arg4>(M:Arg1, Σ:Arg2,
    Ψ:Arg3, k:Arg4) -> Distribution<Real[_,_]> {
  return wrap_matrix_normal_inverse_wishart(M, chol(Σ), chol(Ψ), k);
}
function wrap_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(M:Arg1,
    Σ:Arg2, Ψ:Arg3, k:Arg4) -> {
  return make_matrix_normal_inverse_wishart(wrap(M), wrap(Σ), wrap(Ψ),
      wrap(k));
}
function make_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(M:Arg1,
    Σ:Arg2, Ψ:Arg3, k:Arg4) -> {
  return construct<MatrixNormalInverseWishartDistribution<Arg1,Arg2,Arg3,
      Arg4>>(M, Σ, Ψ, k);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Arg1, U:Arg2, V:Random<Real[_,_]>) ->
    Distribution<Real[_,_]> {
  V.prune();
  if V.hasInverseWishart() {
    let (Ψ, k) <- V.getInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart(M, chol(U), Ψ, k);
    V.graft(p);
    return p;
  } else {
    return wrap_matrix_gaussian(M, chol(U), chol(V));
  }
}

/*
 * Simulate a matrix normal-inverse-Wishart distribution.
 *
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Covariance shape.
 * - k: Degrees of freedom.
 */
function simulate_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(M:Arg1,
    Σ:Arg2, Ψ:Arg3, k:Arg4) -> {
  return simulate_matrix_t(k, M, Σ, Ψ);
}

/*
 * Observe a matrix normal-inverse-Wishart variate.
 *
 * - X: The variate.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance spread.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    X:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5) -> {
  return logpdf_matrix_t(X, k, M, Σ, Ψ);
}

/*
 * Update the parameters of a matrix normal-inverse-Wishart variate.
 *
 * - X: The variate.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance spread.
 * - k: Prior degrees of freedom.
 *
 * Returns: the posterior hyperparameters `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    X:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5) -> {
  let n <- rows(X);
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Σ, X - M)));
  let k' <- k + n;
  return wrap_inverse_wishart(Ψ', k');
}
