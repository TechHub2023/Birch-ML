/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class MultivariateGaussianMultivariateGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) <
    Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;
    
  /**
   * Mean of mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance of mean.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;

  /**
   * Covariance.
   */
  S:Arg5 <- S;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_multivariate_gaussian_multivariate_gaussian(
        value(A), value(μ), value(Σ), value(c), value(S));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_multivariate_gaussian_multivariate_gaussian(
        eval(A), eval(μ), eval(Σ), eval(c), eval(S));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_multivariate_gaussian_multivariate_gaussian(x,
        value(A), value(μ), value(Σ), value(c), value(S));
  }

  override function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return box(logpdf_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, c, S));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x,
        value(A), value(μ), value(Σ), value(c), value(S));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x, A, μ,
        Σ, c, S);
  }

  override function isMultivariateGaussian() -> Boolean {
    return true;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    return box(A*μ + c, chol(A*triouter(Σ)*transpose(A) + triouter(S)));
  }
}

function MultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) -> Distribution<Real[_]> {
  return wrap_multivariate_gaussian_multivariate_gaussian(A, μ,
      chol(Σ), c, chol(S));
}
function wrap_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) -> {
  return make_multivariate_gaussian_multivariate_gaussian(wrap(A),
      wrap(μ), wrap(Σ), wrap(c), wrap(S));
}
function make_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, S:Arg5) -> {
  return construct<MultivariateGaussianMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>>(A, μ, Σ, c, S);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<OpMul<Arg1,
    Random<Real[_]>>,Arg2>, Σ:Arg3) -> Distribution<Real[_]> {
  μ.l.r.prune();
  if μ.l.r.hasMultivariateGaussian() {
    let (m, S) <- μ.l.r.getMultivariateGaussian();
    let p <- wrap_multivariate_gaussian_multivariate_gaussian(μ.l.l, m,
        S, μ.r, chol(Σ));
    μ.l.r.graft(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, chol(Σ));
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:OpMul<Arg1,Random<Real[_]>>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:OpAdd<Random<Real[_]>,Arg1>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ.l + μ.r, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>, Σ:Arg) ->
    Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ + 0.0, Σ);
}

/*
 * Simulate a multivariate Gaussian distribution with a linear transformation
 * and multivariate Gaussian likelihood.
 *
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - Ω: Likelihood covariance.
 */
function simulate_multivariate_gaussian_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  let m <- A*μ + c;
  let S <- chol(A*triouter(Σ)*transpose(A) + outer(Ω));
  return simulate_multivariate_gaussian(m, S);
}

/*
 * Observe a multivariate Gaussian variate with a linear transformation
 * and multivariate Gaussian likelihood.
 *
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - Ω: Likelihood covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, Ω:Arg6) -> {
  let m <- A*μ + c;
  let S <- chol(A*triouter(Σ)*transpose(A) + outer(Ω));
  return logpdf_multivariate_gaussian(x, m, S);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - Ω: Likelihood covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, Ω:Arg6) -> {
  let S <- wrap(triouter(Σ));
  let K' <- wrap(S*transpose(A)*cholinv(chol(A*S*transpose(A) + triouter(Ω))));
  let μ' <- μ + K'*(x - A*μ - c);
  let Σ' <- chol(S - K'*A*S);
  return wrap_multivariate_gaussian(μ', Σ');
}
