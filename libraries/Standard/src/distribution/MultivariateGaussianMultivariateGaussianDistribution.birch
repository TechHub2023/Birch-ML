/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class MultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) <
    MultivariateGaussianDistribution<Expression<Real[_]>,
    Expression<Real[_,_]>>(box(A*μ + c), box(A*Σ*transpose(A) + Ω)) {
  /**
   * Scale.
   */
  A:Arg1 <- A;
    
  /**
   * Mean of mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance of mean.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;

  /**
   * Covariance.
   */
  Ω:Arg5 <- Ω;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x, value(A),
        value(μ), value(Σ), value(c), value(Ω), value(super.μ),
        value(super.Σ));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x, A, μ, Σ, c,
        Ω, super.μ, super.Σ);
  }

  override function constant() {
    super.constant();
    global.constant(A);
    global.constant(μ);
    global.constant(Σ);
    global.constant(c);
    global.constant(Ω);
  }
}

function MultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> Distribution<Real[_]> {
  return wrap_multivariate_gaussian_multivariate_gaussian(A, μ, Σ, c, Ω);
}
function wrap_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  return make_multivariate_gaussian_multivariate_gaussian(wrap(A), wrap(μ),
      wrap(Σ), wrap(c), wrap(Ω));
}
function make_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  return construct<MultivariateGaussianMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>>(A, μ, Σ, c, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:Add<Mul<Arg1,
    Random<Real[_]>>,Arg2>, Σ:Arg3) -> Distribution<Real[_]> {
  let A <- μ.l.l;
  let m <- μ.l.r;
  let c <- μ.r;
  if m.hasNext() && m.getNext().isMultivariateGaussian() {
    m.prune();
    let (μ1, Σ1) <- m.getNext().getMultivariateGaussian();
    let p <- wrap_multivariate_gaussian_multivariate_gaussian(A, μ1, Σ1, c,
        Σ);
    m.setNext(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Mul<Arg1,Random<Real[_]>>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Add<Random<Real[_]>,Arg1>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ.l + μ.r, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>, Σ:Arg) ->
    Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ + 0.0, Σ);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * - x: The variate.
 * - A: Scale.
 * - μ: Prior mean.
 * - Σ: Prior covariance.
 * - c: Offset.
 * - Ω: Likelihood covariance.
 * - m: Precomputed marginal mean.
 * - T: Precomputed marginal covariance.
 *
 * Returns: the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, Ω:Arg6,
    m:Arg7, T:Arg8) -> {
  let K' <- wrap(Σ*transpose(A)*cholinv(chol(T)));
  let μ' <- μ + K'*(x - m);
  let Σ' <- Σ - K'*A*Σ;
  return wrap_multivariate_gaussian(μ', Σ');
}
