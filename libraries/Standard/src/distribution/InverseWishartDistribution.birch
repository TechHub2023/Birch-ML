/**
 * Inverse Wishart distribution.
 *
 * This is typically used to establish a conjugate prior for a Bayesian
 * multivariate linear regression:
 *
 * $$\begin{align*}
 * \boldsymbol{\Sigma} &\sim \mathcal{W}^{-1}(\boldsymbol{\Psi}, \nu) \\
 * \mathbf{W} &\sim \mathcal{MN}(\mathbf{M}, \mathbf{A}, \boldsymbol{\Sigma}) \\
 * \mathbf{Y} &\sim \mathcal{N}(\mathbf{X}\mathbf{W}, \boldsymbol{\Sigma}),
 * \end{align*}$$
 *
 * where $\mathbf{X}$ are inputs and $\mathbf{Y}$ are outputs.
 *
 * The relationship is established in code as follows:
 *
 *     V:Random<Real[_,_]>;
 *     Ψ:Real[_,_];
 *     k:Real;
 *     W:Random<Real[_,_]>;
 *     M:Real[_,_];
 *     U:Real[_,_];
 *     Y:Random<Real[_,_]>;
 *     X:Real[_,_];
 *
 *     V ~ InverseWishart(Ψ, k);
 *     W ~ Gaussian(M, U, V);
 *     Y ~ Gaussian(X*W, V);
 */
final class InverseWishartDistribution<Arg1,Arg2>(Ψ:Arg1, k:Arg2) <
    Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  Ψ:Arg1 <- Ψ;
  
  /**
   * Degrees of freedom.
   */
  k:Arg2 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_inverse_wishart(value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_inverse_wishart(eval(Ψ), eval(k));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_inverse_wishart(X, value(Ψ), value(k));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real!? {
    return logpdf_inverse_wishart(X, eval(Ψ), eval(k));
  }

  override function hoist() -> Expression<Real>? {
    return box(logpdf_inverse_wishart(this.getVariate(), Ψ, k));
  }

  override function constant() {
    super.constant();
    global.constant(Ψ);
    global.constant(k);
  }

  override function isInverseWishart() -> Boolean {
    return true;
  }

  override function getInverseWishart() -> (Expression<Real[_,_]>,
      Expression<Real>) {
    return box(Ψ, k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "InverseWishart");
    buffer.set("Ψ", value(Ψ));
    buffer.set("k", value(k));
  }
}

/**
 * Create inverse-Wishart distribution.
 */
function InverseWishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) ->
    Distribution<Real[_,_]> {
  return wrap_inverse_wishart(Ψ, k);
}
function wrap_inverse_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  return make_inverse_wishart(wrap(Ψ), wrap(k));
}
function make_inverse_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  return construct<InverseWishartDistribution<Arg1,Arg2>>(Ψ, k);
}

/*
 * Simulate an inverse-Wishart distribution.
 *
 * - Ψ: Scale matrix.
 * - k: Degrees of freedom.
 */
function simulate_inverse_wishart<Arg1,Arg2>(Ψ:Arg1, k:Arg2) -> {
  assert rows(Ψ) == columns(Ψ);
  let n <- rows(Ψ);
  cpp{{
  auto Y = numbirch::standard_wishart(k, n);
  }}
  return inner(trisolve(Y, transpose(chol(Ψ))));
}

/*
 * Observe an inverse Wishart variate.
 *
 * - X: The variate.
 * - Ψ: Scale matrix.
 * - k: Degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_inverse_wishart<Arg1,Arg2,Arg3>(X:Arg1, Ψ:Arg2, k:Arg3) -> {
  let p <- columns(X);
  let l <- wrap(k + (p + 1.0));
  let L <- wrap(chol(X));
  let J <- wrap(chol(Ψ));
  return -0.5*((l + (p + 1.0))*lcholdet(L) + frobenius(trisolve(L, J)) +
      l*(p*log(2.0) - lcholdet(J))) - lgamma(0.5*l, p);
}
