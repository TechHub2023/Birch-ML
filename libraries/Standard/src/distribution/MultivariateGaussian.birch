/**
 * Multivariate Gaussian distribution.
 *
 * !!! note
 *     See Gaussian for associated factory functions for the creation of
 *     MultivariateGaussian objects.
 */
class MultivariateGaussian(μ:Expression<Real[_]>, Σ:Expression<LLT>) <
    Distribution<Real[_]> {
  /**
   * Mean.
   */
  μ:Expression<Real[_]> <- μ;
  
  /**
   * Covariance.
   */
  Σ:Expression<LLT> <- Σ;

  function rows() -> Integer {
    return μ.rows();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_] {
    return simulate_multivariate_gaussian(μ.value(), Σ.value());
  }

  function simulateLazy() -> Real[_]? {
    return simulate_multivariate_gaussian(μ.eval(), Σ.eval());
  }
  
  function logpdf(x:Real[_]) -> Real {
    return logpdf_multivariate_gaussian(x, μ.value(), Σ.value());
  }

  function logpdfLazy(x:Expression<Real[_]>) -> Expression<Real>? {
    return logpdf_lazy_multivariate_gaussian(x, μ, Σ);
  }

  function graftMultivariateGaussian() -> MultivariateGaussian? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "MultivariateGaussian");
    buffer.set("μ", μ);
    buffer.set("Σ", Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<LLT>) ->
    Distribution<Real[_]> {
  s1:InverseWishart?;
  m1:TransformDotMultivariate<MatrixNormalInverseWishart>?;
  m2:TransformLinearMultivariate<MultivariateGaussian>?;
  m3:MultivariateGaussian?;

  let compare <- Random<LLT>?(Σ);
  if compare? && compare!.hasDistribution() {
    /* for normal-inverse-Wishart relationships, the same inverse Wishart
     * distribution must occur in the prior and likelihood */
    let p <- compare!.getDistribution();
    if (m1 <- μ.graftDotMatrixNormalInverseWishart(p))? {
      return LinearMatrixNormalInverseWishartMultivariateGaussian(m1!.a, m1!.X, m1!.c);
    }
  }
  if (m2 <- μ.graftLinearMultivariateGaussian())? {
    return LinearMultivariateGaussianMultivariateGaussian(m2!.A, m2!.x, m2!.c, Σ);
  } else if (m3 <- μ.graftMultivariateGaussian())? {
    return MultivariateGaussianMultivariateGaussian(m3!, Σ);
  } else {
    return construct<MultivariateGaussian>(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:LLT) -> Distribution<Real[_]> {
  return Gaussian(μ, box(Σ));
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Real[_], Σ:Expression<LLT>) -> Distribution<Real[_]> {
  return Gaussian(box(μ), Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Real[_], Σ:LLT) -> Distribution<Real[_]> {
  return Gaussian(box(μ), box(Σ));
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<Real[_,_]>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ));
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Real[_,_]) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ));
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Real[_], Σ:Expression<Real[_,_]>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ));
}

/**
 * Create multivariate Gaussian distribution.
 */
function Gaussian(μ:Real[_], Σ:Real[_,_]) -> Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ));
}

/**
 * Create multivariate Gaussian distribution with independent and identical
 * variance.
 */
function Gaussian(μ:Expression<Real[_]>, σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  s1:InverseGamma?;
  m1:TransformLinearMultivariate<MultivariateNormalInverseGamma>?;
  m2:MultivariateNormalInverseGamma?;
  m3:TransformLinearMultivariate<MultivariateGaussian>?;
  m4:MultivariateGaussian?;

  let compare <- Random<Real>?(σ2);
  if compare? && compare!.hasDistribution() {
    /* for normal-inverse-gamma relationships, the same inverse gamma
     * distribution must occur in the prior and likelihood */
    let p <- compare!.getDistribution();
    if (m1 <- μ.graftLinearMultivariateNormalInverseGamma(p))? {
      return LinearMultivariateNormalInverseGammaMultivariateGaussian(m1!.A, m1!.x, m1!.c);
    } else if (m2 <- μ.graftMultivariateNormalInverseGamma(p))? {
      return MultivariateNormalInverseGammaMultivariateGaussian(m2!);
    }
  }
  if (m3 <- μ.graftLinearMultivariateGaussian())? {
    return LinearMultivariateGaussianMultivariateGaussian(m3!.A, m3!.x, m3!.c, llt(diagonal(σ2, m3!.rows())));
  } else if (m4 <- μ.graftMultivariateGaussian())? {
    return MultivariateGaussianMultivariateGaussian(m4!, llt(diagonal(σ2, m4!.rows())));
  } else if (s1 <- σ2.graftInverseGamma())? {
    return MultivariateNormalInverseGamma(μ, box(llt(identity(μ.rows()))), s1!);
  } else {
    return construct<MultivariateGaussian>(μ, llt(diagonal(σ2, μ.rows())));
  }
}

/**
 * Create multivariate Gaussian distribution with independent and identical
 * variance.
 */
function Gaussian(μ:Expression<Real[_]>, σ2:Real) -> Distribution<Real[_]> {
  return Gaussian(μ, box(σ2));
}

/**
 * Create multivariate Gaussian distribution with independent and identical
 * variance.
 */
function Gaussian(μ:Real[_], σ2:Expression<Real>) -> Distribution<Real[_]> {
  return Gaussian(box(μ), σ2);
}

/**
 * Create multivariate Gaussian distribution with independent and identical
 * variance.
 */
function Gaussian(μ:Real[_], σ2:Real) -> Distribution<Real[_]> {
  return Gaussian(box(μ), box(σ2));
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<LLT>,
    σ2:Expression<Real>) -> Distribution<Real[_]> {
  s1:InverseGamma?;
  if (s1 <- σ2.graftInverseGamma())? {
    return MultivariateNormalInverseGamma(μ, Σ, s1!);
  } else {
    return construct<MultivariateGaussian>(μ, llt(canonical(Σ)*σ2));
  }
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<LLT>, σ2:Real) ->
    Distribution<Real[_]> {
  return Gaussian(μ, Σ, box(σ2));
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:LLT, σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, box(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:LLT, σ2:Real) ->
    Distribution<Real[_]> {
  return Gaussian(μ, box(Σ), box(σ2));
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Expression<LLT>, σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(box(μ), Σ, σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Expression<LLT>, σ2:Real) ->
    Distribution<Real[_]> {
  return Gaussian(box(μ), Σ, box(σ2));
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:LLT, σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(box(μ), box(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:LLT, σ2:Real) -> Distribution<Real[_]> {
  return Gaussian(box(μ), box(Σ), box(σ2));
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<Real[_,_]>,
    σ2:Expression<Real>) -> Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Expression<Real[_,_]>, σ2:Real) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Real[_,_], σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Expression<Real[_]>, Σ:Real[_,_], σ2:Real) ->
      Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Expression<Real[_,_]>, σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Expression<Real[_,_]>, σ2:Real) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Real[_,_], σ2:Expression<Real>) ->
    Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}

/**
 * Create multivariate Gaussian distribution where the covariance is given
 * as a matrix multiplied by a scalar. This is usually used for establishing
 * a multivariate normal-inverse-gamma, where the final argument is
 * inverse-gamma distributed.
 */
function Gaussian(μ:Real[_], Σ:Real[_,_], σ2:Real) -> Distribution<Real[_]> {
  return Gaussian(μ, llt(Σ), σ2);
}
