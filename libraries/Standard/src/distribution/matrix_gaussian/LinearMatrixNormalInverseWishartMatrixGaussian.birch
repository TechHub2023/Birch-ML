/**
 * Matrix Gaussian variate with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class LinearMatrixNormalInverseWishartMatrixGaussian(
    A:Expression<Real[_,_]>, M:MatrixNormalInverseWishart,
    C:Expression<Real[_,_]>, U:Expression<Real[_,_]>) < Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Expression<Real[_,_]> <- A;

  /**
   * Mean.
   */
  M:MatrixNormalInverseWishart <- M;

  /**
   * Offset.
   */
  C:Expression<Real[_,_]> <- C;

  /**
   * Among-row covariance.
   */
  U:Expression<Real[_,_]> <- U;

  function rows() -> Integer {
    return C.rows();
  }
  
  function columns() -> Integer {
    return C.columns();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_,_] {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        A.value(), M.N.value(), M.Λ.value(), U.value(), M.V.Ψ.value(),
        M.V.k.value()) + C.value();
  }

  function simulateLazy() -> Real[_,_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        A.peak(), M.N.peak(), M.Λ.peak(), U.peak(), M.V.Ψ.peak(),
        M.V.k.peak()) + C.peak();
  }
  
  function logpdf(X:Real[_,_]) -> Real {
    return logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C.value(), A.value(), M.N.value(), M.Λ.value(), U.value(),
        M.V.Ψ.value(), M.V.k.value());
  }

  function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return logpdf_lazy_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        box(X - C), A, M.N, M.Λ, U, M.V.Ψ, M.V.k);
  }

  function update(X:Real[_,_]) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- box(update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C.value(), A.value(), M.N.value(), M.Λ.value(), U.value(),
        M.V.Ψ.value(), M.V.k.value()));
  }

  function updateLazy(X:Expression<Real[_,_]>) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- update_lazy_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        box(X - C), A, M.N, M.Λ, U, M.V.Ψ, M.V.k);
  }

  function link() {
    M.setChild(this);
  }
  
  function unlink() {
    M.releaseChild(this);
  }
}

function LinearMatrixNormalInverseWishartMatrixGaussian<Left,Middle,Right>(
    A:Left, M:MatrixNormalInverseWishart, C:Middle, U:Right) -> {
  m:LinearMatrixNormalInverseWishartMatrixGaussian(box(A), M, box(C), box(U));
  m.link();
  return m;
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Left,Middle,Right>(
  M:MultiplyAdd<Left,Random<Real[_,_]>,Middle>, U:Right,
  V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let p <- InverseWishart?(V.p);
  if p? {
    let q <- M.m!.graftMatrixNormalInverseWishart(p!);
    if q? {
      return LinearMatrixNormalInverseWishartMatrixGaussian(M.l!, q!, M.r!, U);
    } else {
      return MatrixNormalInverseWishart(M, U, p!);
    }
  } else {
    return construct<MatrixGaussian>(box(M), box(U), V);
  }
}
