/**
 * Matrix normal-inverse-Wishart-Gaussian distribution.
 */
final class MatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5>(M:Arg1, Σ:Arg2, Ψ:Arg3, k:Arg4, Φ:Arg5) <
    MatrixTDistribution<Arg4,Arg1,Expression<Real[_,_]>,Arg3>(k, M,
    box(chol(triouter(Σ) + triouter(Φ))), Ψ) {
  /**
   * Covariance.
   */
  Σ:Arg2 <- Σ;
  
  /**
   * Among-row covariance.
   */
  Φ:Arg5 <- Φ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(X,
        value(super.M), value(Σ), value(super.Ψ), value(super.k), value(Φ),
        value(super.Σ));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(X, super.M, Σ,
        super.Ψ, super.k, Φ, super.Σ);
  }
}

function MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(
      M:Arg1, Σ:Arg2, Ψ:Arg3, k:Arg4, Φ:Arg5) -> {
  return wrap_matrix_normal_inverse_wishart_matrix_gaussian(M, chol(Σ),
      chol(Ψ), k, chol(Φ));
}
function wrap_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5>(M:Arg1, Σ:Arg2, Ψ:Arg3, k:Arg4, Φ:Arg5) -> {
  return make_matrix_normal_inverse_wishart_matrix_gaussian(wrap(M),
      wrap(Σ), wrap(Ψ), wrap(k), wrap(Φ));
}
function make_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5>(M:Arg1, Σ:Arg2, Ψ:Arg3, k:Arg4, Φ:Arg5) -> {
  return construct<MatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,
      Arg2,Arg3,Arg4,Arg5>>(M, Σ, Ψ, k, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg>(M:Random<Real[_,_]>, Σ:Arg,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  M.prune();
  if M.hasMatrixNormalInverseWishart() && M.isGrandChildOf(Ψ) {
    let (M1, Σ1, Ψ1, k) <- M.getMatrixNormalInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart_matrix_gaussian(M1, Σ1, Ψ1, k,
        chol(Σ));
    M.graft(p, 1);
    Ψ.graftReplace(p, 2);
    M.join(Ψ);
    return p;
  } else {
    Ψ.prune();
    if Ψ.hasInverseWishart() {
      let (Ψ1, k) <- Ψ.getInverseWishart();
      let p <- wrap_matrix_normal_inverse_wishart(M, chol(Σ), Ψ1, k);
      Ψ.graft(p);
      return p;
    } else {
      return wrap_matrix_gaussian(M, chol(Σ), chol(Ψ));
    }
  }
}

/*
 * Update the parameters of a Gaussian variate with
 * matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior among-column covariance shape.
 * - k: Prior among-column covariance degrees of freedom.
 * - Φ: Among-row covariance.
 * - T: Precomputed marginal among-row covariance.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(X:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, Φ:Arg6,
    T:Arg7) -> {
  let n <- rows(X);
  let S <- wrap(triouter(Σ));
  let K <- wrap(S*cholinv(T));
  let M' <- wrap(M + K*(X - M));
  let Σ' <- wrap(chol(S - K*S));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Φ, X)) + inner(trisolve(Σ, M)) -
      inner(trisolve(Σ', M')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
