/**
 * Matrix Gaussian variate with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) <
    Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Among-row precision times mean.
   */
  M:Arg2 <- M;

  /**
   * Among-row precision.
   */
  Σ:Arg3 <- Σ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;
  
  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Among-row covariance.
   */
  U:Arg6 <- U;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        value(A), value(M), value(Σ), value(Ψ), value(k), value(U));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        eval(A), eval(M), eval(Σ), eval(Ψ), eval(k), eval(U));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X, value(A), value(M), value(Σ), value(Ψ), value(k), value(U));
  }

  override function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return box(logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X, A, M, Σ, Ψ, k, U));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        value(A), value(M), value(Σ), value(Ψ), value(k), value(U));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        A, M, Σ, Ψ, k, U);
  }
}

function ScaledMatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) -> {
  return wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian(A, M,
      chol(Σ), chol(Ψ), k, chol(U));
}
function wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) -> {
  return make_scaled_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(U));
}
function make_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) -> {
  return construct<ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, M, Σ, Ψ, k, U);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Multiply<Arg1,Random<Real[_,_]>>, U:Arg2,
    V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  M.r.prune();
  if M.r.hasMatrixNormalInverseWishart() && M.r.isGrandChildOf(V) {
    let (M1, Σ, Ψ, k) <- M.r.getMatrixNormalInverseWishart();
    let p <- wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian(M.l,
        M1, Σ, Ψ, k, chol(U));
    M.r.graft(p, 1);
    V.graftReplace(p, 2);
    M.r.join(V);
    return p;
  } else {
    V.prune();
    if V.hasInverseWishart() {
      let (Ψ, k) <- V.getInverseWishart();
      let p <- wrap_matrix_normal_inverse_wishart(M, U, Ψ, k);
      V.graft(p);
      return p;
    } else {
      return wrap_matrix_gaussian(M, chol(U), chol(V));
    }
  }
}

/*
 * Simulate a Gaussian distribution with linear transformation of as
 * matrix-normal-inverse-Wishart prior.
 *
 * - A: Scale matrix.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Shape matrix.
 * - k: Degrees of freedom.
 * - U: Among-row covariance matrix.
 */
function simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5,
    U:Arg6) -> {
  return simulate_matrix_t(k, A*M, chol(outer(A*Σ) + triouter(U)), Ψ);
}

/*
 * Observe a Gaussian variate with linear transformation of a
 * matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - A: Scale matrix.
 * - M: Precision times mean matrix.
 * - Σ: Precision matrix.
 * - Ψ: Shape matrix.
 * - k: Degrees of freedom.
 * - U: Among-row covariance matrix.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(X:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5,
    k:Arg6, U:Arg7) -> {
  return logpdf_matrix_t(X, k, A*M, chol(outer(A*Σ) + triouter(U)), Ψ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - A: Scale.
 * - M: Prior precision times mean matrix.
 * - Σ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - U: Among-row covariance.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(X:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5,
    k:Arg6, U:Arg7) -> {
  let n <- rows(X);
  let S <- wrap(triouter(Σ));
  let K' <- wrap(S*inner(A, cholinv(chol(A*outer(S, A) + triouter(U)))));
  let M' <- wrap(M + K'*(X - A*M));
  let Σ' <- wrap(chol(S - K'*A*S));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(U, X)) + inner(trisolve(Σ, M)) -
      inner(trisolve(Σ', M')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
