/**
 * Matrix Gaussian variate with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) <
    Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Among-row precision times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row precision.
   */
  Λ:Arg3 <- Λ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;
  
  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Among-row covariance.
   */
  U:Arg6 <- U;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        value(A), value(N), value(Λ), value(Ψ), value(k), value(U));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        eval(A), eval(N), eval(Λ), eval(Ψ), eval(k), eval(U));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X, value(A), value(N), value(Λ), value(Ψ), value(k), value(U));
  }

  override function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return box(logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian(
        X, A, N, Λ, Ψ, k, U));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        value(A), value(N), value(Λ), value(Ψ), value(k), value(U));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        A, N, Λ, Ψ, k, U);
  }
}

function ScaledMatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) -> {
  return wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(N), wrap(Λ), wrap(Ψ), wrap(k), wrap(U));
}
function wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5, U:Arg6) -> {
  return construct<ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, N, Λ, Ψ, k, U);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Multiply<Arg1,Random<Real[_,_]>>, U:Arg2,
    V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  M.prune();
  if M.hasMatrixNormalInverseWishart() && M.isGrandChildOf(V) {
    let (N, Λ, Ψ, k) <- M.getMatrixNormalInverseWishart();
    let p <- ScaledMatrixNormalInverseWishartMatrixGaussian(M.l, N, Λ, Ψ, k,
        U);
    M.graft(p, 1);
    V.graftReplace(p, 2);
    M.join(V);
    return p;
  } else {
    V.prune();
    if V.hasInverseWishart() {
      let (Ψ, k) <- V.getInverseWishart();
      let Λ <- cholinv(U);
      let p <- MatrixNormalInverseWishart(Λ*M, Λ, Ψ, k);
      V.graft(p);
      return p;
    } else {
      return MatrixGaussian(wrap(M), wrap(U), wrap(V));
    }
  }
}

/*
 * Simulate a Gaussian distribution with linear transformation of as
 * matrix-normal-inverse-Wishart prior.
 *
 * - A: Scale matrix.
 * - N: Precision times mean matrix.
 * - Λ: Precision matrix.
 * - Ψ: Shape matrix.
 * - k: Degrees of freedom.
 * - U: Among-row covariance matrix.
 */
function simulate_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6>(A:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5,
    U:Arg6) -> {
  let S <- cholinv(Λ);
  let M <- A*S*N;
  let Σ <- U + outer(A*S, A);
  return simulate_matrix_t(k, M, Σ, Ψ);
}

/*
 * Observe a Gaussian variate with linear transformation of a
 * matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - A: Scale matrix.
 * - N: Precision times mean matrix.
 * - Λ: Precision matrix.
 * - Ψ: Shape matrix.
 * - k: Degrees of freedom.
 * - U: Among-row covariance matrix.
 *
 * Returns: the log probability density.
 */
function logpdf_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(X:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5,
    k:Arg6, U:Arg7) -> {
  let S <- cholinv(Λ);
  let M <- A*S*N;
  let Σ <- U + outer(A*S, A);
  return logpdf_matrix_t(X, k, M, Σ, Ψ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - A: Scale.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - U: Among-row covariance.
 *
 * Returns: the posterior hyperparameters `N'`, `Λ'`, `Ψ'` and `k'`.
 */
function update_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(X:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Ψ:Arg5,
    k:Arg6, U:Arg7) -> {
  let n <- rows(X);
  let L <- cholinv(U);
  let Z <- L*X;
  let Λ' <- Λ + inner(A, L*A);
  let N' <- N + inner(A, Z);
  let M <- cholsolve(Λ, N);
  let M' <- cholsolve(Λ', N');
  let Ψ' <- Ψ + inner(X, Z) + inner(M, N) - inner(M', N');
  let k' <- k + n;
  return MatrixNormalInverseWishart(N', Λ', Ψ', k');
}
