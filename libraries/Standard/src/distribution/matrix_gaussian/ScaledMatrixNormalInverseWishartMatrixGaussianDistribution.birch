/**
 * Matrix Gaussian variate with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, Φ:Arg6) <
    MatrixTDistribution<Arg5,Expression<Real[_,_]>,Expression<Real[_,_]>,
    Arg4>(k, box(A*M), box(chol(inner(triinner(Σ, transpose(A))) +
    triouter(Φ))), Ψ) {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Mean.
   */
  M:Arg2 <- M;

  /**
   * Among-row covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Among-row covariance.
   */
  Φ:Arg6 <- Φ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        value(A), value(M), value(Σ), value(super.Ψ), value(super.k),
        value(Φ), value(super.M), value(super.Σ));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_scaled_matrix_normal_inverse_wishart_matrix_gaussian(X,
        A, M, Σ, super.Ψ, super.k, Φ, super.M, super.Σ);
  }
}

function ScaledMatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, Φ:Arg6) -> {
  return wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian(A, M,
      chol(Σ), chol(Ψ), k, chol(Φ));
}
function wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, Φ:Arg6) -> {
  return make_scaled_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(Φ));
}
function make_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, Φ:Arg6) -> {
  return construct<ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>>(A, M, Σ, Ψ, k, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:OpMul<Arg1,Random<Real[_,_]>>, Σ:Arg2,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  M.r.prune();
  if M.r.hasMatrixNormalInverseWishart() && M.r.isGrandChildOf(Ψ) {
    let (M1, Σ1, Ψ1, k) <- M.r.getMatrixNormalInverseWishart();
    let p <- wrap_scaled_matrix_normal_inverse_wishart_matrix_gaussian(M.l,
        M1, Σ1, Ψ1, k, chol(Σ));
    M.r.graft(p, 1);
    Ψ.graftReplace(p, 2);
    M.r.join(Ψ);
    return p;
  } else {
    Ψ.prune();
    if Ψ.hasInverseWishart() {
      let (Ψ1, k) <- Ψ.getInverseWishart();
      let p <- wrap_matrix_normal_inverse_wishart(M, chol(Σ), Ψ1, k);
      Ψ.graft(p);
      return p;
    } else {
      return wrap_matrix_gaussian(M, chol(Σ), chol(Ψ));
    }
  }
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - A: Scale.
 * - M: Prior precision times mean matrix.
 * - Σ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - Φ: Among-row covariance.
 * - N: Precomputed marginal mean.
 * - T: Precomputed marginal among-row covariance.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_scaled_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9>(X:Arg1, A:Arg2, M:Arg3, Σ:Arg4,
    Ψ:Arg5, k:Arg6, Φ:Arg7, N:Arg8, T:Arg9) -> {
  let n <- rows(X);
  let S <- wrap(triouter(Σ));
  let K' <- wrap(outer(S, cholsolve(T, A)));
  let M' <- wrap(M + K'*(X - N));
  let Σ' <- wrap(chol(S - K'*A*S));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Φ, X)) + inner(trisolve(Σ, M)) -
      inner(trisolve(Σ', M')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
