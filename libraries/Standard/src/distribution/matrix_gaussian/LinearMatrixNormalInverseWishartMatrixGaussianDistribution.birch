/**
 * Matrix Gaussian variate with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
final class LinearMatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5,
    C:Arg6, Φ:Arg7) <
    ScaledMatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg7>(A, M, Σ, Ψ, k, Φ) {
  /**
   * Offset.
   */
  C:Arg6 <- C;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return super.simulate() + value(C);
  }

  override function simulateLazy() -> Real[_,_]? {
    return super.simulateLazy()! + eval(C);
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return super.logpdf(X - value(C));
  }

  override function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return super.logpdfLazy(box(X - C));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return super.update(X - value(C));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return super.updateLazy(box(X - C));
  }
}

function LinearMatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return wrap_linear_matrix_normal_inverse_wishart_matrix_gaussian(A, M,
      chol(Σ), chol(Ψ), k, C, chol(Φ));
}
function wrap_linear_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return make_linear_matrix_normal_inverse_wishart_matrix_gaussian(wrap(A),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(C), wrap(Φ));
}
function make_linear_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return construct<LinearMatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(A, M, Σ, Ψ, k, C, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2,Arg3>(M:OpAdd<OpMul<Arg1,Random<Real[_,_]>>,
    Arg2>, Σ:Arg3, Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  M.l.r.prune();
  if M.l.r.hasMatrixNormalInverseWishart() && M.l.r.isGrandChildOf(Ψ) {
    let (M1, Σ1, Ψ1, k) <- M.l.r.getMatrixNormalInverseWishart();
    let p <- wrap_linear_matrix_normal_inverse_wishart_matrix_gaussian(M.l.l,
        M1, Σ1, Ψ1, k, M.r, chol(Σ));
    M.l.r.graft(p, 1);
    Ψ.graftReplace(p, 2);
    M.l.r.join(Ψ);
    return p;
  } else {
    Ψ.prune();
    if Ψ.hasInverseWishart() {
      let (Ψ1, k) <- Ψ.getInverseWishart();
      let p <- wrap_matrix_normal_inverse_wishart(M, chol(Σ), Ψ1, k);
      Ψ.graft(p);
      return p;
    } else {
      return wrap_matrix_gaussian(M, chol(Σ), chol(Ψ));
    }
  }
}
