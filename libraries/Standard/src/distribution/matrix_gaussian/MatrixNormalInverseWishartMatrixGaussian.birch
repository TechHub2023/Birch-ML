/**
 * Matrix normal-inverse-Wishart-Gaussian distribution.
 */
final class MatrixNormalInverseWishartMatrixGaussian(
    M:MatrixNormalInverseWishart) < Distribution<Real[_,_]> {
  /**
   * Mean.
   */
  M:MatrixNormalInverseWishart <- M;

  function rows() -> Integer {
    return M.rows();
  }
  
  function columns() -> Integer {
    return M.columns();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(
        M.N.value(), M.Λ.value(), M.V.Ψ.value(), M.V.k.value());
  }

  function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart_matrix_gaussian(
        M.N.eval(), M.Λ.eval(), M.V.Ψ.eval(), M.V.k.eval());
  }
  
  function logpdf(X:Real[_,_]) -> Real {
    return logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        X, M.N.value(), M.Λ.value(), M.V.Ψ.value(), M.V.k.value());
  }

  function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return logpdf_lazy_matrix_normal_inverse_wishart_matrix_gaussian(
        X, M.N, M.Λ, M.V.Ψ, M.V.k);
  }

  function update(X:Real[_,_]) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- box(update_matrix_normal_inverse_wishart_matrix_gaussian(
        X, M.N.value(), M.Λ.value(), M.V.Ψ.value(), M.V.k.value()));
  }

  function updateLazy(X:Expression<Real[_,_]>) {
    (M.N, M.Λ, M.V.Ψ, M.V.k) <- update_lazy_matrix_normal_inverse_wishart_matrix_gaussian(
        X, M.N, M.Λ, M.V.Ψ, M.V.k);
  }

  function link() {
    M.setChild(this);
  }
  
  function unlink() {
    M.releaseChild(this);
  }
}

function MatrixNormalInverseWishartMatrixGaussian(M:MatrixNormalInverseWishart) -> MatrixNormalInverseWishartMatrixGaussian {
  m:MatrixNormalInverseWishartMatrixGaussian(M);
  m.link();
  return m;
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Middle>(M:Random<Real[_,_]>, U:Middle, V:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let p <- InverseWishart?(V.p);
  if p? {
    let q <- M.graftMatrixNormalInverseWishart(p!);
    if q? {
      return MatrixNormalInverseWishartMatrixGaussian(q!);
    } else {
      return MatrixNormalInverseWishart(M, U, p!);
    }
  } else {
    return construct<MatrixGaussian>(box(M), box(U), V);
  }
}

/*
 * Simulate a Gaussian distribution with matrix-normal-inverse-Wishart prior.
 *
 * - N: Precision times mean matrix.
 * - Λ: Precision.
 * - Ψ: Variance shape.
 * - k: Degrees of freedom.
 */
function simulate_matrix_normal_inverse_wishart_matrix_gaussian(N:Real[_,_],
    Λ:Real[_,_], Ψ:Real[_,_], k:Real) -> Real[_,_] {
  let n <- rows(N);
  let p <- columns(N);
  let M <- solve(Λ, N);
  let Σ <- identity(n) + inv(Λ);
  return simulate_matrix_student_t(k - p + 1.0, M, Σ, Ψ);
}

/*
 * Observe a Gaussian variate with matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_matrix_gaussian(X:Real[_,_],
    N:Real[_,_], Λ:Real[_,_], Ψ:Real[_,_], k:Real) -> Real {
  let n <- rows(N);
  let p <- columns(N);
  let M <- solve(Λ, N);
  let Σ <- identity(n) + inv(Λ);
  return logpdf_matrix_student_t(X, k - p + 1.0, M, Σ, Ψ);
}

/*
 * Observe a Gaussian variate with matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_matrix_normal_inverse_wishart_matrix_gaussian(X:Expression<Real[_,_]>,
    N:Expression<Real[_,_]>, Λ:Expression<Real[_,_]>, Ψ:Expression<Real[_,_]>, k:Expression<Real>) -> Expression<Real> {
  let n <- rows(N);
  let p <- columns(N);
  let M <- solve(Λ, N);
  let Σ <- identity(n) + inv(Λ);
  return logpdf_lazy_matrix_student_t(X, box(k - p + 1.0), box(M), box(Σ), Ψ);
}

/*
 * Update the parameters of a Gaussian variate with
 * matrix-normal-inverse-Wishart prior.
 *
 * - X: The variate.
 * - N: Prior precision times mean matrix.
 * - Λ: Prior precision.
 * - V: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the posterior hyperparameters `N'`, `Λ'`, `V'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian(X:Real[_,_],
    N:Real[_,_], Λ:Real[_,_], V:Real[_,_], k:Real) -> (Real[_,_], Real[_,_], Real[_,_], Real) {
  let D <- rows(X);
  let Λ' <- rank_update(Λ, identity(rows(N)));
  let N' <- N + X;
  let M <- solve(Λ, N);
  let M' <- solve(Λ', N');
  let V' <- V + transpose(X)*X + transpose(M)*N - transpose(M')*N';
  let k' <- k + D;
  return (N', Λ', V', k');
}
