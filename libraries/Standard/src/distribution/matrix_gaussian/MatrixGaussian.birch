/**
 * Matrix Gaussian distribution.
 *
 * !!! note
 *     See Gaussian for associated factory functions for the creation of
 *     MatrixGaussian objects.
 */
class MatrixGaussian(M:Expression<Real[_,_]>, U:Expression<Real[_,_]>,
    V:Expression<Real[_,_]>) < Distribution<Real[_,_]> {
  /**
   * Mean.
   */
  M:Expression<Real[_,_]> <- M;
  
  /**
   * Among-row covariance.
   */
  U:Expression<Real[_,_]> <- U;

  /**
   * Among-column covariance.
   */
  V:Expression<Real[_,_]> <- V;

  function rows() -> Integer {
    return M.rows();
  }

  function columns() -> Integer {
    return M.columns();
  }

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real[_,_] {
    return simulate_matrix_gaussian(M.value(), U.value(), V.value());
  }

  function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_gaussian(M.peak(), U.peak(), V.peak());
  }
  
  function logpdf(X:Real[_,_]) -> Real {
    return logpdf_matrix_gaussian(X, M.value(), U.value(), V.value());
  }

  function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {
    return logpdf_lazy_matrix_gaussian(X, M, U, V);
  }

  function graftMatrixGaussian() -> MatrixGaussian? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "MatrixGaussian");
    buffer.set("M", M);
    buffer.set("U", U);
    buffer.set("V", V);
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Left,Middle,Right>(M:Left, U:Middle, V:Right) -> Distribution<Real[_,_]> {
  return construct<MatrixGaussian>(box(M), box(U), box(V));
}

/*
 * Simulate a matrix Gaussian distribution.
 *
 * - M: Mean.
 * - U: Among-row covariance.
 * - V: Among-column covariance.
 */
function simulate_matrix_gaussian(M:Real[_,_], U:Real[_,_], V:Real[_,_]) -> Real[_,_] {
  assert rows(M) == rows(U);
  assert rows(M) == columns(U);
  assert columns(M) == rows(V);
  assert columns(M) == columns(V);
  
  let N <- rows(M);
  let P <- columns(M);
  Z:Real[N,P];
  for n in 1..N {
    for p in 1..P {
      Z[n,p] <- simulate_gaussian(0.0, 1.0);
    }
  }
  return M + cholesky(U)*Z*transpose(cholesky(V));
}

/*
 * Simulate a matrix Gaussian distribution with independent rows.
 *
 * - M: Mean.
 * - V: Among-column variances.
 */
function simulate_matrix_gaussian(M:Real[_,_], V:Real[_,_]) -> Real[_,_] {
  assert columns(M) == rows(V);
  assert columns(M) == columns(V);
  
  let N <- rows(M);
  let P <- columns(M);
  Z:Real[N,P];
  for n in 1..N {
    for p in 1..P {
      Z[n,p] <- simulate_gaussian(0.0, 1.0);
    }
  }
  return M + Z*transpose(cholesky(V));
}

/*
 * Observe a matrix Gaussian distribution.
 *
 * - X: The variate.
 * - M: Mean.
 * - U: Among-row covariance.
 * - V: Among-column covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_gaussian(X:Real[_,_], M:Real[_,_], U:Real[_,_], V:Real[_,_]) ->
    Real {
  let n <- rows(M);
  let p <- columns(M);
  return -0.5*(trace(solve(V, transpose(X - M))*solve(U, X - M)) +
      n*p*log(2.0*π) + n*ldet(V) + p*ldet(U));
}

/*
 * Observe a matrix Gaussian distribution with independent rows.
 *
 * - X: The variate.
 * - M: Mean.
 * - V: Among-column covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_gaussian(X:Real[_,_], M:Real[_,_], V:Real[_,_]) -> Real {
  let n <- rows(M);
  let p <- columns(M);
  return -0.5*(trace(solve(V, transpose(X - M))*(X - M)) + n*p*log(2.0*π) +
      n*ldet(V));
}

/*
 * Observe a matrix Gaussian distribution with independent elements
 * of identical variance.
 *
 * - X: The variate.
 * - M: Mean.
 * - σ2: Variance.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_gaussian(X:Real[_,_], M:Real[_,_], σ2:Real) ->
    Real {
  let n <- rows(M);
  let p <- columns(M);
  return -0.5*(trace(outer(transpose(X - M))/σ2) + n*p*log(2.0*π*σ2));
}

/*
 * Observe a matrix Gaussian distribution.
 *
 * - X: The variate.
 * - M: Mean.
 * - U: Among-row covariance.
 * - V: Among-column covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_matrix_gaussian(X:Expression<Real[_,_]>, M:Expression<Real[_,_]>, U:Expression<Real[_,_]>, V:Expression<Real[_,_]>) ->
    Expression<Real> {
  let n <- rows(M);
  let p <- columns(M);
  return box(-0.5*(trace(solve(V, transpose(X - M))*solve(U, X - M)) + n*p*log(2.0*π) + n*ldet(V) + p*ldet(U)));
}

/*
 * Observe a matrix Gaussian distribution with independent rows.
 *
 * - X: The variate.
 * - M: Mean.
 * - V: Among-column covariance.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_matrix_gaussian(X:Expression<Real[_,_]>, M:Expression<Real[_,_]>, V:Expression<Real[_,_]>) -> Expression<Real> {
  let n <- rows(M);
  let p <- columns(M);
  return box(-0.5*(trace(solve(V, transpose(X - M))*(X - M)) + n*p*log(2.0*π) + n*ldet(V)));
}

/*
 * Observe a matrix Gaussian distribution with independent elements
 * of identical variance.
 *
 * - X: The variate.
 * - M: Mean.
 * - σ2: Variance.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_matrix_gaussian(X:Expression<Real[_,_]>, M:Expression<Real[_,_]>, σ2:Expression<Real>) ->
    Expression<Real> {
  let n <- rows(M);
  let p <- columns(M);
  return box(-0.5*(trace(transpose(X - M)*(X - M)/σ2) + n*p*log(2.0*π*σ2)));
}
