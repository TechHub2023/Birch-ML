/**
 * Matrix normal-inverse-Wishart distribution.
 */
final class MatrixNormalInverseWishartDistribution<Arg1,Arg2,Arg3,Arg4>(
    N:Arg1, Λ:Arg2, Ψ:Arg3, k:Arg4) < Distribution<Real[_,_]> {
  /**
   * Among-row precision times mean.
   */
  N:Arg1 <- N;

  /**
   * Among-row precision.
   */
  Λ:Arg2 <- Λ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg3 <- Ψ;
  
  /**
   * Among-column covariance degrees of freedom.
   */
  k:Arg4 <- k;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_,_] {
    return simulate_matrix_normal_inverse_wishart(value(N), value(Λ),
        value(Ψ), value(k));
  }

  override function simulateLazy() -> Real[_,_]? {
    return simulate_matrix_normal_inverse_wishart(peek(N), peek(Λ), peek(Ψ),
        peek(k));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {   
    return logpdf_matrix_normal_inverse_wishart(X, value(N), value(Λ),
        value(Ψ), value(k));
  }

  override function logpdfLazy(X:Expression<Real[_,_]>) -> Expression<Real>? {   
    return box(logpdf_matrix_normal_inverse_wishart(X, N, Λ, Ψ, k));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart(X, value(N), value(Λ),
        value(Ψ), value(k));
  }

  override function updateLazy(X:Expression<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart(X, N, Λ, Ψ, k);
  }


  override function isMatrixNormalInverseWishart() -> Boolean {
    return true;
  }

  override function getMatrixNormalInverseWishart() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>)? {
    return box(N, Λ, Ψ, k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MatrixNormalInverseWishart");
    buffer.set("N", value(N));
    buffer.set("Λ", value(Λ));
    buffer.set("Ψ", value(Ψ));
    buffer.set("k", value(k));
  }
}

function MatrixNormalInverseWishart<Arg1,Arg2,Arg3,Arg4>(N:Arg1, Λ:Arg2,
    Ψ:Arg3, k:Arg4) -> {
  return construct<MatrixNormalInverseWishartDistribution<Arg1,Arg2,Arg3,
      Arg4>>(N, Λ, Ψ, k);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Arg1, U:Arg2, V:Random<Real[_,_]>) ->
    Distribution<Real[_,_]> {
  V.prune();
  if V.hasInverseWishart() {
    let (Ψ, k) <- V.getInverseWishart();
    let Λ <- cholinv(U);
    let p <- MatrixNormalInverseWishart(Λ*M, Λ, Ψ, k);
    V.graft(p);
    return p;
  } else {
    return construct<MatrixGaussianDistribution<Arg1,Arg2,Random<Real[_,_]>>>(
        M, U, V);
  }
}

/*
 * Simulate a matrix normal-inverse-Wishart distribution.
 *
 * - N: Precision times mean matrix.
 * - Λ: Precision.
 * - Ψ: Variance shape.
 * - k: Degrees of freedom.
 */
function simulate_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(N:Arg1,
    Λ:Arg2, Ψ:Arg3, k:Arg4) -> {
  let Σ <- cholinv(Λ);
  let M <- Σ*N;
  return simulate_matrix_t(k, M, Σ, Ψ);
}

/*
 * Observe a matrix normal-inverse-Wishart variate.
 *
 * - X: The variate.
 * - N: Precision times mean matrix.
 * - Λ: Precision.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    X:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) -> {
  let Σ <- cholinv(Λ);
  let M <- Σ*N;
  return logpdf_matrix_t(X, k, M, Σ, Ψ);
}

/*
 * Update the parameters of a matrix normal-inverse-Wishart variate.
 *
 * - X: The variate.
 * - N: Precision times mean.
 * - Λ: Precision.
 * - V: Prior variance shape.
 * - k: Prior degrees of freedom.
 *
 * Returns: the posterior hyperparameters `V'` and `k'`.
 */
function update_matrix_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    X:Arg1, N:Arg2, Λ:Arg3, Ψ:Arg4, k:Arg5) -> {
  let n <- rows(X);
  let M <- cholsolve(Λ, N);
  let Ψ' <- Ψ + inner(X - M, Λ*(X - M));
  let k' <- k + n;
  return InverseWishart(Ψ', k');
}
