/**
 * Beta-binomial distribution.
 */
final class BetaBinomial(n:Expression<Integer>, ρ:Beta) < BoundedDiscrete {
  /**
   * Number of trials.
   */
  n:Expression<Integer> <- n;

  /**
   * Success probability.
   */
  ρ:Beta <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_beta_binomial(n.value(), ρ.α.value(), ρ.β.value());
  }
  
  function simulateLazy() -> Integer? {
    return simulate_beta_binomial(n.eval(), ρ.α.eval(), ρ.β.eval());
  }
  
  function logpdf(x:Integer) -> Real {
    return logpdf_beta_binomial(x, n.value(), ρ.α.value(), ρ.β.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_beta_binomial(x, n, ρ.α, ρ.β);
  }

  function update(x:Integer) {
    (ρ.α, ρ.β) <- box(update_beta_binomial(x, n.value(), ρ.α.value(), ρ.β.value()));
  }

  function updateLazy(x:Expression<Integer>) {
    (ρ.α, ρ.β) <- update_lazy_beta_binomial(x, n, ρ.α, ρ.β);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_beta_binomial(x, n.value(), ρ.α.value(), ρ.β.value());
  }
  
  function lower() -> Integer? {
    return 0;
  }
  
  function upper() -> Integer? {
    return n.value();
  }

  function link() {
    ρ.setChild(this);
  }
  
  function unlink() {
    ρ.releaseChild(this);
  }
}

function BetaBinomial<Left>(n:Left, ρ:Beta) -> {
  m:BetaBinomial(box(n), ρ);
  m.link();
  return m;
}

/*
 * Simulate a beta-binomial distribution.
 *
 * - n: Number of trials.
 * - α: Shape.
 * - β: Shape.
 */
function simulate_beta_binomial(n:Integer, α:Real, β:Real) -> Integer {
  assert 0 <= n;
  assert 0.0 < α;
  assert 0.0 < β;
  
  return simulate_binomial(n, simulate_beta(α, β));
}

/*
 * Observe a beta-binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_beta_binomial(x:Integer, n:Integer, α:Real, β:Real) -> Real {
  assert 0 <= n;
  assert 0.0 < α;
  assert 0.0 < β;

  if (0 <= x && x <= n) {
    return lbeta(x + α, n - x + β) - lbeta(α, β) + lchoose(n, x);
  } else {
    return -inf;
  }
}

/*
 * Observe a beta-binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Shape.
 * - β: Shape.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_beta_binomial(x:Expression<Integer>, n:Expression<Integer>, α:Expression<Real>, β:Expression<Real>) -> Expression<Real> {
  return box(lbeta(x + α, n - x + β) - lbeta(α, β) + lchoose(n, x));
}

/*
 * Update the parameters of a Beta distribution with a Binomial likelihood.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_binomial(x:Integer, n:Integer, α:Real, β:Real) ->
    (Real, Real) {
  assert 0 <= x && x <= n;
  assert 0 <= n;
  assert 0.0 < α;
  assert 0.0 < β;
  return (α + x, β + n - x);
}

/*
 * Update the parameters of a Beta distribution with a Binomial likelihood.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Prior first shape.
 * - β: Prior second shape.
 *
 * Returns: the posterior hyperparameters `α'` and `β'`.
 */
function update_lazy_beta_binomial(x:Expression<Integer>,
    n:Expression<Integer>, α:Expression<Real>, β:Expression<Real>) ->
    (Expression<Real>, Expression<Real>) {
  return (box(α + x), box(β + n - x));
}

/*
 * CDF of a beta-binomial variate.
 *
 * - x: The variate.
 * - n: Number of trials.
 * - α: Shape.
 * - β: Shape.
 *
 * Return: the cumulative probability.
 */
function cdf_beta_binomial(x:Integer, n:Integer, α:Real, β:Real) -> Real {
  P:Real <- 0.0;
  for i in 0..min(n, x) {
    P <- P + exp(logpdf_beta_binomial(i, n, α, β));
  }
  return P;
}
