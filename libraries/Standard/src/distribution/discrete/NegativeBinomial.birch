/**
 * Negative binomial distribution.
 */
final class NegativeBinomial(k:Expression<Integer>, ρ:Expression<Real>) <
    Discrete {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Expression<Integer> <- k;

  /**
   * Success probability.
   */
  ρ:Expression<Real> <- ρ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Integer {
    return simulate_negative_binomial(k.value(), ρ.value());
  }

  function simulateLazy() -> Integer? {
    return simulate_negative_binomial(k.eval(), ρ.eval());
  }
  
  function logpdf(x:Integer) -> Real {
    return logpdf_negative_binomial(x, k.value(), ρ.value());
  }

  function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return logpdf_lazy_negative_binomial(x, k, ρ);
  }

  function cdf(x:Integer) -> Real? {
    return cdf_negative_binomial(x, k.value(), ρ.value());
  }

  function quantile(P:Real) -> Integer? {
    return quantile_negative_binomial(P, k.value(), ρ.value());
  }

  function lower() -> Integer? {
    return 0;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "NegativeBinomial");
    buffer.set("k", k);
    buffer.set("ρ", ρ);
  }
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Left,Right>(k:Left, ρ:Right) -> {
  return construct<NegativeBinomial>(box(k), box(ρ));
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Left>(k:Left, ρ:Random<Real>) -> Distribution<Integer> {
  ρ1:Beta?;
  if (ρ1 <- ρ.graftBeta())? {
    return BetaNegativeBinomial(box(k), ρ1!);
  } else {
    return construct<NegativeBinomial>(box(k), ρ);
  }
}

/*
 * Simulate a negative binomial distribution.
 *
 * - k: Number of successes before the experiment is stopped.
 * - ρ: Probability of success.
 *
 * Returns the number of failures.
 */
function simulate_negative_binomial(k:Integer, ρ:Real) -> Integer {
  assert 0 < k;
  assert 0.0 <= ρ && ρ <= 1.0;
  cpp{{
  return std::negative_binomial_distribution<birch::type::Integer>(k, ρ)(rng);
  }}
}

/*
 * Observe a negative binomial variate.
 *
 * - x: The variate (number of failures).
 * - k: Number of successes before the experiment is stopped.
 * - ρ: Probability of success.
 *
 * Returns: the log probability mass.
 */
function logpdf_negative_binomial(x:Integer, k:Integer, ρ:Real) -> Real {
  assert 0 < k;
  assert 0.0 <= ρ && ρ <= 1.0;

  if (x >= 0) {
    return k*log(ρ) + x*log1p(-ρ) + lchoose(x + k - 1, x);
  } else {
    return -inf;
  }
}

/*
 * Observe a negative binomial variate.
 *
 * - x: The variate (number of failures).
 * - k: Number of successes before the experiment is stopped.
 * - ρ: Probability of success.
 *
 * Returns: the log probability mass.
 */
function logpdf_lazy_negative_binomial(x:Expression<Integer>, k:Expression<Integer>, ρ:Expression<Real>) -> Expression<Real> {
  return box(k*log(ρ) + x*log1p(-ρ) + lchoose(x + k - 1, x));
}

/*
 * CDF of a negative binomial variate.
 *
 * - x: The variate (number of failures).
 * - k: Number of successes before the experiment is stopped.
 * - ρ: Probability of success.
 *
 * Return: the cumulative probability.
 */
function cdf_negative_binomial(x:Integer, k:Integer, ρ:Real) -> Real {
  assert 0 < k;
  assert 0.0 <= ρ && ρ <= 1.0;

  if x < 0 {
    return 0.0;
  } else {
    return ibeta(k, x + 1.0,  ρ);
  }
}

/*
 * Quantile of a negative binomial distribution.
 *
 * - P: The cumulative probability.
 * - k: Number of successes before the experiment is stopped.
 * - ρ: Probability of success.
 *
 * Return: the quantile.
 */
function quantile_negative_binomial(P:Real, k:Integer, ρ:Real) -> Integer {
  assert 0 < k;
  assert 0.0 <= ρ && ρ <= 1.0;
  cpp{{
  return boost::math::quantile(boost::math::negative_binomial_distribution<>(k, ρ), P);
  }}
}
