/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Among-row concentration times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row conentration.
   */
  Λ:Arg3 <- Λ;
  
  /**
   * Accumulator for among-column spread.
   */
  Γ:Arg4 <- Γ;

  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Additional variance scale.
   */
  φ2:Arg7 <- φ2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function supportsJoin() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    if !this.side? {
      return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
          value(a), value(N), value(Λ), value(Γ), value(k), value(c),
          value(φ2));
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          this.side!.joinMatrixNormalInverseWishartMultivariateGaussian()!;
      let p <- update_matrix_normal_inverse_wishart_matrix_gaussian(
          value(Y), value(A), value(N), value(Λ), value(Γ), value(k), value(Φ));
      return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
          value(this.a), value(p.N), value(p.Λ), value(p.Γ), value(p.k),
          value(this.c), value(this.φ2));
    }
  }

  override function simulateLazy() -> Real[_]? {
    if !this.side? {
      return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
          eval(a), eval(N), eval(Λ), eval(Γ), eval(k), eval(c), eval(φ2));
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          this.side!.joinMatrixNormalInverseWishartMultivariateGaussian()!;
      let p <- update_matrix_normal_inverse_wishart_matrix_gaussian(
          eval(Y), eval(A), eval(N), eval(Λ), eval(Γ), eval(k), eval(Φ));
      return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
          eval(this.a), eval(p.N), eval(p.Λ), eval(p.Γ), eval(p.k),
          eval(this.c), eval(this.φ2));
    }
  }

  override function logpdf(x:Real[_]) -> Real! {
    if !this.side? {
      return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(x,
          value(a), value(N), value(Λ), value(Γ), value(k), value(c),
          value(φ2));
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          this.side!.joinMatrixNormalInverseWishartMultivariateGaussian()!;
      let p <- update_matrix_normal_inverse_wishart_matrix_gaussian(
          value(Y), value(A), value(N), value(Λ), value(Γ), value(k), value(Φ));
      return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(
          x, value(this.a), value(p.N), value(p.Λ), value(p.Γ), value(p.k),
          value(this.c), value(this.φ2));
    }
  }

  override function logpdfLazy(x:Real[_]) -> Real!? {
    if !this.side? {
      return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(x,
          eval(a), eval(N), eval(Λ), eval(Γ), eval(k), eval(c), eval(φ2));
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          this.side!.joinMatrixNormalInverseWishartMultivariateGaussian()!;
      let p <- update_matrix_normal_inverse_wishart_matrix_gaussian(
          eval(Y), eval(A), eval(N), eval(Λ), eval(Γ), eval(k), eval(Φ));
      return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(
          x, eval(this.a), eval(p.N), eval(p.Λ), eval(p.Γ), eval(p.k),
          eval(this.c), eval(this.φ2));
    }
  }

  override function update(x:Real[_]) -> Delay? {
    if !this.side? {
      return update_matrix_normal_inverse_wishart_multivariate_gaussian(
          x, value(a), value(N), value(Λ), value(Γ), value(k), value(c),
          value(φ2));
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          joinMatrixNormalInverseWishartMultivariateGaussian()!;
      return update_matrix_normal_inverse_wishart_matrix_gaussian(
          value(Y), value(A), value(N), value(Λ), value(Γ), value(k),
          value(Φ));
    }
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    if !this.side? {
      return update_matrix_normal_inverse_wishart_multivariate_gaussian(
          x, a, N, Λ, Γ, k, c, φ2);
    } else {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          joinMatrixNormalInverseWishartMultivariateGaussian()!;
      return update_matrix_normal_inverse_wishart_matrix_gaussian(
          Y, A, N, Λ, Γ, k, Φ);
    }
  }

  override function updateJoin(x':Expression<Real[_]>) -> Delay? {
    let p <- wrap_matrix_normal_inverse_wishart(N, Λ, Γ, k);
    p.side <- this;
    return p;
  }

  override function hoist() -> Expression<Real>? {
    let (Y, A, N, Λ, Γ, k, Φ) <-
        joinMatrixNormalInverseWishartMultivariateGaussian()!;
    return box(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        Y, A, N, Λ, Γ, k, Φ));
  }

  override function constant() {
    super.constant();
    global.constant(a);
    global.constant(N);
    global.constant(Λ);
    global.constant(Γ);
    global.constant(k);
    global.constant(c);
    global.constant(φ2);

    if this.side? {
      let (Y, A, N, Λ, Γ, k, Φ) <-
          this.takeSide()!.joinMatrixNormalInverseWishartMultivariateGaussian()!;
      let p <- update_matrix_normal_inverse_wishart_matrix_gaussian(
          value(Y), value(A), value(N), value(Λ), value(Γ), value(k),
          value(Φ));
      this.N <- box(p.N);
      this.Λ <- box(p.Λ);
      this.Γ <- box(p.Γ);
      this.k <- box(p.k);
    }
  }

  override function getMatrixNormalInverseWishartMultivariateGaussian(
      x:Expression<Real[_]>) -> (Expression<Real[_]>, Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real[_,_]>,
      Expression<Real>, Expression<Real>)? {
    return box(x - c, a, N, Λ, Γ, k, φ2);
  }

  override function joinMatrixNormalInverseWishartMultivariateGaussian() ->
      (Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>,
      Expression<Real[_,_]>)? {
    Y:PackExpression<Expression<Real[_]>,Real>;
    A:PackExpression<Expression<Real[_]>,Real>;
    φ2:StackExpression<Expression<Real>,Real>;
    p:Distribution<Real[_]> <- this;
    while true {
      let x' <- wrap_dist(p);
      let (y', a', N', Λ', Γ', k', φ2') <-
          p.getMatrixNormalInverseWishartMultivariateGaussian(x')!;
      Y.push(y');
      A.push(a');
      φ2.push(φ2');
      if p.side? && p.side!.subordinate {
        p <- Distribution<Real[_]>?(p.side)!;
      } else {
        return (box(transpose(Y)), box(transpose(A)), N', Λ', Γ', k',
            box(diagonal(φ2)));
      }
    }
  }
}

function MatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> Distribution<Real[_]> {
  let L <- wrap(chol(Σ));
  let O <- wrap(trisolve(L, M));
  let N <- triinnersolve(L, O);
  let Λ <- cholinv(L);
  let Γ <- Ψ + inner(O);
  return wrap_matrix_normal_inverse_wishart_multivariate_gaussian(a, N, Λ, Γ,
      k, c, φ2);
}
function wrap_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return make_matrix_normal_inverse_wishart_multivariate_gaussian(wrap(a),
      wrap(N), wrap(Λ), wrap(Γ), wrap(k), wrap(c), wrap(φ2));
}
function make_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return construct<MatrixNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(a, N, Λ, Γ, k, c, φ2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:Add<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:Mul<Arg3,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  let m <- μ.l.l;
  let A <- μ.l.r;
  let c <- μ.r;
  let ω2 <- Σ.l;
  let Ω <- Σ.r;
  if Ω.isInverseWishart() && m.isMatrixNormalInverseWishart() &&
      Ω.getDistribution().next == m.getDistribution() {
    let p_m <- m.graft();
    let (N, Λ1, Γ, k) <- p_m.getMatrixNormalInverseWishart()!;
    let p <- wrap_matrix_normal_inverse_wishart_multivariate_gaussian(A, N,
        Λ1, Γ, k, c, ω2);
    p.setSide(p_m.takeSide());  // carry forward
    p_m.next <- p;
    return p;
  } else if Ω.isInverseWishart() {
    let p_Ω <- Ω.graft();
    let (Ψ, k) <- p_Ω.getInverseWishart()!;
    let ν <- μ/ω2;
    let λ <- 1.0/ω2;
    let Γ <- Ψ + outer(μ/sqrt(ω2));
    let p <- wrap_multivariate_normal_inverse_wishart(ν, λ, Γ, k);
    p_Ω.next <- p;
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Inner<Random<Real[_,_]>,Arg1>,
    Σ:Mul<Arg2,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Add<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ, 1.0*Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Inner<Random<Real[_,_]>,Arg>,
    Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, 1.0*Σ);
}

/*
 * Simulate a matrix-normal-inverse-Wishart-multivariate-Gaussian
 * distribution.
 *
 * @param a Scale.
 * @param N Among-row concentration times mean.
 * @param Λ Among-row concentration.
 * @param Γ Accumulator for among-column spread.
 * @param k Degrees of freedom.
 * @param c Offset.
 * @param φ2 Variance scale.
 *
 * @return the variate.
 */
function simulate_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4,
    k:Arg5, c:Arg6, φ2:Arg7) -> {
  let L <- wrap(chol(Λ));
  let O <- wrap(trisolve(L, N));
  let M <- triinnersolve(L, O);
  let Ψ <- Γ - inner(O);
  let Σ <- (φ2 + dot(trisolve(L, a)))*Ψ;
  return simulate_multivariate_t(k, inner(M, a) + c, Σ);
}

/*
 * Observe a multivariate $t$-distribution variate with location and scale.
 *
 * @param x The variate.
 * @param a Scale.
 * @param N Among-row concentration times mean.
 * @param Λ Among-row concentration.
 * @param Γ Accumulator for among-column spread.
 * @param k Degrees of freedom.
 * @param c Offset.
 * @param φ2 Variance scale.
 *
 * @return the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, N:Arg3, Λ:Arg4,
    Γ:Arg5, k:Arg6, c:Arg7, φ2:Arg8) -> {
  let L <- wrap(chol(Λ));
  let O <- wrap(trisolve(L, N));
  let M <- triinnersolve(L, O);
  let Ψ <- Γ - inner(O);
  let Σ <- (φ2 + dot(trisolve(L, a)))*Ψ;
  return logpdf_multivariate_t(x, k, inner(M, a) + c, Σ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * @param x The variate.
 * @param a Scale.
 * @param N Prior among-row concentration times mean.
 * @param Λ Prior among-row concentration.
 * @param Γ Prior accumulator for among-column spread.
 * @param k Prior degrees of freedom.
 * @param c Offset.
 * @param φ2 Additional variance scale.
 *
 * @return the posterior hyperparameters `N'`, `Λ'`, `Γ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, N:Arg3, Λ:Arg4,
    Γ:Arg5, k:Arg6, c:Arg7, φ2:Arg8) -> {
  let Λ' <- Λ + outer(a/sqrt(φ2));
  let N' <- N + outer(a/φ2, x - c);
  let Γ' <- Γ + outer((x - c)/sqrt(φ2));
  let k' <- k + 1;
  return wrap_matrix_normal_inverse_wishart(N', Λ', Γ', k');
}
