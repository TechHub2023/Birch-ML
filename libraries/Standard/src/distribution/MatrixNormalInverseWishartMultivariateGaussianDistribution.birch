/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) < MultivariateTDistribution<Arg5,Expression<Real[_]>,
    Expression<Real[_,_]>>(k, box(inner(M, a) + c), box(sqrt(φ2 +
    dot(triinner(Σ, a)))*Ψ)) {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Mean.
   */
  M:Arg2 <- M;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Additional variance scale.
   */
  φ2:Arg7 <- φ2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function update(x:Real[_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, value(a), value(M), value(Σ), value(Ψ), value(super.k), value(c),
        value(φ2));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, a, M, Σ, Ψ, super.k, c, φ2);
  }

  override function constant() {
    super.constant();
    global.constant(a);
    global.constant(M);
    global.constant(Σ);
    global.constant(Ψ);
    global.constant(c);
    global.constant(φ2);
  }
}

function MatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> Distribution<Real[_]> {
  return wrap_matrix_normal_inverse_wishart_multivariate_gaussian(a, M,
      chol(Σ), chol(Ψ), k, c, φ2);
}
function wrap_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return make_matrix_normal_inverse_wishart_multivariate_gaussian(wrap(a),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(c), wrap(φ2));
}
function make_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return construct<MatrixNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(a, M, Σ, Ψ, k, c, φ2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:OpMul<Arg3,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  let m <- μ.l.l;
  let A <- μ.l.r;
  let c <- μ.r;
  let ω2 <- Σ.l;
  let Ω <- Σ.r;
  if (Ω.hasNext() && Ω.getNext().isMatrixNormalInverseWishart() &&
      Ω.getNext(2) == m) || (Ω.hasSide() && Ω.getSide() == m) {
    m.prune();
    let (M, Σ1, Ψ, k) <- Ω.getNext().getMatrixNormalInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart_multivariate_gaussian(A, M,
        Σ1, Ψ, k, c, ω2);
    m.setNext(p);
    Ω.setNext(nil);
    m.setSide(Ω);
    Ω.setSide(m);
    return p;
  } else if Ω.hasNext() && Ω.getNext().isInverseWishart() {
    Ω.prune();
    let (Ψ, k) <- Ω.getNext().getInverseWishart();
    let p <- wrap_multivariate_normal_inverse_wishart(μ, ω2, Ψ, k);
    Ω.setNext(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Inner<Random<Real[_,_]>,Arg1>,
    Σ:OpMul<Arg2,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

function MultivariateGaussian<Arg1,Arg2>(μ:OpAdd<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ, 1.0*Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Inner<Random<Real[_,_]>,Arg>,
    Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, 1.0*Σ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - a: Scale.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - φ2: Additional variance scale.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, M:Arg3, Σ:Arg4,
    Ψ:Arg5, k:Arg6, c:Arg7, φ2:Arg8) -> {
  let Σ' <- wrap(chol(cholinv(chol(cholinv(Σ) + outer(a)/φ2))));
  let M' <- wrap(triouter(Σ')*(cholsolve(Σ, M) + outer(a, x - c)/φ2));
  let Ψ' <- chol(triouter(Ψ) + outer(x - c)/φ2 + inner(trisolve(Σ, M)) -
      inner(trisolve(Σ', M')));
  let k' <- k + 1;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
