/**
 * Multivariate Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) < Distribution<Real[_]> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Mean.
   */
  M:Arg2 <- M;

  /**
   * Covariance.
   */
  Σ:Arg3 <- Σ;
  
  /**
   * Among-column covariance scale.
   */
  Ψ:Arg4 <- Ψ;

  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Additional variance scale.
   */
  φ2:Arg7 <- φ2;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function supportsJoin() -> Boolean {
    return true;
  }

  override function simulate() -> Real[_] {
    return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
        value(a), value(M), value(Σ), value(Ψ), value(k), value(c),
        value(φ2));
  }

  override function simulateLazy() -> Real[_]? {
    return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
        eval(a), eval(M), eval(Σ), eval(Ψ), eval(k), eval(c), eval(φ2));
  }

  override function simulateJoin() -> Real[_]? {
    if !this.hasSide() {
      return simulateLazy();
    } else {
      let (Y, A, M, Σ, Ψ, k, φ2) <-
          this.getSide().joinMatrixNormalInverseWishartMultivariateGaussian();
      let p <- update_join_matrix_normal_inverse_wishart_multivariate_gaussian(
          eval(Y), eval(A), eval(M), eval(Σ), eval(Ψ), eval(k), eval(φ2));
      return simulate_matrix_normal_inverse_wishart_multivariate_gaussian(
          eval(this.a), eval(p.M), eval(p.Σ), eval(p.Ψ), eval(p.k),
          eval(this.c), eval(this.φ2));
    }
  }

  override function logpdf(x:Real[_]) -> Real! {
    return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(x,
        value(a), value(M), value(Σ), value(Ψ), value(k), value(c),
        value(φ2));
  }

  override function logpdfLazy(x:Real[_]) -> Real!? {
    return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(x,
        eval(a), eval(M), eval(Σ), eval(Ψ), eval(k), eval(c), eval(φ2));
  }

  override function logpdfJoin(x:Real[_]) -> Real!? {
    if !this.hasSide() {
      return logpdfLazy(x);
    } else {
      let (Y, A, M, Σ, Ψ, k, φ2) <-
          this.getSide().joinMatrixNormalInverseWishartMultivariateGaussian();
      let p <- update_join_matrix_normal_inverse_wishart_multivariate_gaussian(
          eval(Y), eval(A), eval(M), eval(Σ), eval(Ψ), eval(k), eval(φ2));
      return logpdf_matrix_normal_inverse_wishart_multivariate_gaussian(
          x, eval(this.a), eval(p.M), eval(p.Σ), eval(p.Ψ), eval(p.k),
          eval(this.c), eval(this.φ2));
    }
  }

  override function update(x:Real[_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, value(a), value(M), value(Σ), value(Ψ), value(k), value(c),
        value(φ2));
  }

  override function updateLazy(x:Expression<Real[_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_multivariate_gaussian(
        x, a, M, Σ, Ψ, k, c, φ2);
  }

  override function updateJoin(x':Expression<Real[_]>) -> Delay? {
    let p <- wrap_matrix_normal_inverse_wishart(M, Σ, Ψ, k);
    p.setSide(this);
    return p;
  }

  override function hoist() -> Expression<Real>? {
    let (Y, A, M, Σ, Ψ, k, φ2) <-
        joinMatrixNormalInverseWishartMultivariateGaussian();
    return box(logpdf_join_matrix_normal_inverse_wishart_multivariate_gaussian(
        Y, A, M, Σ, Ψ, k, φ2));
  }

  override function constant() {
    super.constant();
    global.constant(a);
    global.constant(M);
    global.constant(Σ);
    global.constant(Ψ);
    global.constant(k);
    global.constant(c);
    global.constant(φ2);
  }

  override function getMatrixNormalInverseWishartMultivariateGaussian(
      x:Expression<Real[_]>) -> (Expression<Real[_]>, Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real[_,_]>,
      Expression<Real>, Expression<Real>) {
    return box(x - c, a, M, Σ, Ψ, k, φ2);
  }

  override function joinMatrixNormalInverseWishartMultivariateGaussian() ->
      (Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>, Expression<Real>,
      Expression<Real[_]>) {
    Y:PackExpression<Expression<Real[_]>,Real>;
    A:PackExpression<Expression<Real[_]>,Real>;
    φ2:StackExpression<Expression<Real>,Real>;
    p:Delay <- this;
    while true {
      let x' <- Expression<Real[_]>?(p.getNext())!;
      let (y', a', M', Σ', Ψ', k', φ2') <-
          p.getMatrixNormalInverseWishartMultivariateGaussian(x');
      Y.push(y');
      A.push(a');
      φ2.push(φ2');
      if p.hasSide() && p.getSide().isSubordinate() {
        p <- p.getSide();
      } else {
        return (Y, A, M', Σ', Ψ', k', φ2);
      }
    }
  }
}

function MatrixNormalInverseWishartMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> Distribution<Real[_]> {
  return wrap_matrix_normal_inverse_wishart_multivariate_gaussian(a, M,
      chol(Σ), chol(Ψ), k, c, φ2);
}
function wrap_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return make_matrix_normal_inverse_wishart_multivariate_gaussian(wrap(a),
      wrap(M), wrap(Σ), wrap(Ψ), wrap(k), wrap(c), wrap(φ2));
}
function make_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, c:Arg6,
    φ2:Arg7) -> {
  return construct<MatrixNormalInverseWishartMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>>(a, M, Σ, Ψ, k, c, φ2);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:OpAdd<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:OpMul<Arg3,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  let m <- μ.l.l;
  let A <- μ.l.r;
  let c <- μ.r;
  let ω2 <- Σ.l;
  let Ω <- Σ.r;
  if (Ω.hasNext() && Ω.getNext().isMatrixNormalInverseWishart() &&
      Ω.getNext(2) == m) || (Ω.hasSide() && Ω.getSide() == m) {
    m.prune();
    let (M, Σ1, Ψ, k) <- Ω.getNext().getMatrixNormalInverseWishart();
    let p <- wrap_matrix_normal_inverse_wishart_multivariate_gaussian(A, M,
        Σ1, Ψ, k, c, ω2);
    p.setSide(Ω.getNext().takeSide());  // carry forward
    m.setNext(p);
    Ω.setNext(nil);
    m.setSide(Ω);
    Ω.setSide(m);
    return p;
  } else if Ω.hasNext() && Ω.getNext().isInverseWishart() {
    Ω.prune();
    let (Ψ, k) <- Ω.getNext().getInverseWishart();
    let p <- wrap_multivariate_normal_inverse_wishart(μ, ω2, Ψ, k);
    Ω.setNext(p);
    return p;
  } else {
    return wrap_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Inner<Random<Real[_,_]>,Arg1>,
    Σ:OpMul<Arg2,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:OpAdd<Inner<Random<Real[_,_]>,
    Arg1>,Arg2>, Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ, 1.0*Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Inner<Random<Real[_,_]>,Arg>,
    Σ:Random<Real[_,_]>) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, 1.0*Σ);
}

/*
 * Simulate a matrix-normal-inverse-Wishart-multivariate-Gaussian
 * distribution.
 *
 * - a: Scale.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Spread.
 * - k: Degrees of freedom.
 * - c : Offset.
 * - φ2: Variance scale.
 *
 * Returns: the variate.
 */
function simulate_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4,
    k:Arg5, c:Arg6, φ2:Arg7) -> {
  // let m <- rows(M);
  // let n <- columns(M);
  // cpp{{
  // auto Y = numbirch::standard_wishart(k, n);
  // auto Z = numbirch::standard_gaussian(m, n);
  // auto z = numbirch::standard_gaussian(n);
  // }}
  // let Ω <- trisolve(Y, transpose(Ψ));
  // return inner(M + trimul(Σ, Z)*Ω, a) + c + sqrt(φ2)*inner(Ω, z);

  // still faster...
  return simulate_multivariate_t(k, inner(M, a) + c, sqrt(φ2 +
      dot(triinner(Σ, a)))*Ψ);
}

/*
 * Observe a multivariate $t$-distribution variate with location and scale.
 *
 * - x: The variate.
 * - a: Scale.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Spread.
 * - k: Degrees of freedom.
 * - c : Offset.
 * - φ2: Variance scale.
 *
 * Returns: the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, M:Arg3, Σ:Arg4,
    Ψ:Arg5, k:Arg6, c:Arg7, φ2:Arg8) -> {
  // let Λ <- chol(cholinv(Σ) + outer(a, a/φ2));
  // let z <- outer(a, triinner(Λ, x - inner(M, a) - c));
  // let n <- length(x);
  // let a <- wrap(0.5*k + 0.5*n);
  // let b <- 0.5*k;
  // return lgamma(a) - 0.5*n*log(π) - lgamma(b) - 0.5/lcholdet(Λ) -
  //     a*log1p(dot(z));

  return logpdf_multivariate_t(x, k, inner(M, a) + c, sqrt(φ2 +
      dot(triinner(Σ, a)))*Ψ);
}

/*
 * Observe Gaussian variates with a normal inverse-gamma prior with linear
 * transformation.
 *
 * - Y: Matrix of variates, minus offsets.
 * - A: Matrix of scales.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - φ2: Vector of additional variance scales.
 *
 * Returns: the log probability density.
 */
function logpdf_join_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5,
    k:Arg6, φ2:Arg7) -> {
  let n <- columns(Y);
  let p <- rows(Y);
  let r <- rows(A);
  let a <- wrap(0.5*k + 0.5*(p + n - 1));
  let b <- 0.5*k + 0.5*(p - 1);  // only used once, no need to wrap
  let Z <- wrap(Y - inner(M, A));

  if n > r {
    /* use Woodbury's matrix identity and Sylvester's determinent theorem so
     * that Cholesky factorizations are of r*r rather than n*n matrices */
    let Λ <- wrap(diagonal(1.0/φ2));
    let D <- Λ - outer(Λ, A)*cholinv(chol(cholinv(Σ) + A*outer(Λ, A)))*A*Λ;
    let d <- sum(log(φ2)) + lcholdet(chol(diagonal(1.0, r) +
        outer(triinner(Σ, A)*Λ, triinner(Σ, A))));
    let e <- lcholdet(chol(triouter(Ψ) + Z*outer(D, Z)));
    return box(lgamma(a, p) - 0.5*p*n*log(π) - lgamma(b, p) - 0.5*p*d -
        (0.5*n + a)*lcholdet(Ψ) - a*e);
  } else {
    /* use the marginal */
    let S <- wrap(chol(inner(triinner(Σ, A)) + diagonal(φ2)));
    let D <- cholinv(S);
    let d <- lcholdet(S);
    let e <- ldet(diagonal(1.0, n) + outer(D, Z)*cholsolve(Ψ, Z));
    return box(lgamma(a, p) - 0.5*p*n*log(π) - lgamma(b, p) - 0.5*p*d -
        0.5*n*lcholdet(Ψ) - a*e);
  }
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * - x: The variate.
 * - a: Scale.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - c : Offset.
 * - φ2: Additional variance scale.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_multivariate_gaussian<
    Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, M:Arg3, Σ:Arg4,
    Ψ:Arg5, k:Arg6, c:Arg7, φ2:Arg8) -> {
  let Σ' <- wrap(chol(cholinv(chol(cholinv(Σ) + outer(a)/φ2))));
  let M' <- wrap(triouter(Σ')*(cholsolve(Σ, M) + outer(a, x - c)/φ2));
  let Ψ' <- chol(triouter(Ψ) + outer(x - c)/φ2 + inner(trisolve(Σ, M)) -
      inner(trisolve(Σ', M')));
  let k' <- k + 1;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * - Y: Matrix of variates, minus offsets.
 * - A: Matrix of scales.
 * - M: Mean.
 * - Σ: Covariance.
 * - Ψ: Prior variance shape.
 * - k: Prior degrees of freedom.
 * - φ2: Vector of additional variance scales.
 *
 * Returns: the posterior hyperparameters `M'`, `Σ'`, `Ψ'` and `k'`.
 */
function update_join_matrix_normal_inverse_wishart_multivariate_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, M:Arg3, Σ:Arg4, Ψ:Arg5,
    k:Arg6, φ2:Arg7) -> {
  let n <- columns(Y);
  let Φ <- wrap(diagonal(sqrt(φ2)));
  let Σ' <- wrap(chol(cholinv(chol(cholinv(Σ) + A*cholinv(Φ)*transpose(A)))));
  let M' <- wrap(triouter(Σ')*(cholsolve(Σ, M) + A*cholsolve(Φ, transpose(Y))));
  let Ψ' <- chol(triouter(Ψ) + inner(trisolve(Φ, transpose(Y))) +
      inner(trisolve(Σ, M)) - inner(trisolve(Σ', M')));
  let k' <- k + n;
  return wrap_matrix_normal_inverse_wishart(M', Σ', Ψ', k');
}
