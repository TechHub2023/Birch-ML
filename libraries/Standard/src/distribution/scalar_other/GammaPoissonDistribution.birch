hpp{{
#include <boost/math/distributions.hpp>
}}

/**
 * Gamma-Poisson distribution.
 */
final class GammaPoissonDistribution<Arg1,Arg2>(k:Arg1, θ:Arg2) <
    DiscreteDistribution {
  /**
   * Shape.
   */
  k:Arg1 <- k;

  /**
   * Scale.
   */
  θ:Arg2 <- θ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer! {
    return simulate_gamma_poisson(value(k), value(θ));
  }

  override function simulateLazy() -> Integer!? {
    return simulate_gamma_poisson(eval(k), eval(θ));
  }
  
  override function logpdf(x:Integer!) -> Real! {
    return logpdf_gamma_poisson(x, value(k), value(θ));
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_gamma_poisson(x, k, θ));
  }

  override function update(x:Integer!) -> Delay? {
    return update_gamma_poisson(x, value(k), value(θ));
  }

  override function updateLazy(x:Expression<Integer>) -> Delay? {
    return update_gamma_poisson(x, k, θ);
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_gamma_poisson(x, value(k), value(θ));
  }

  override function quantile(P:Real!) -> Integer!? {
    return quantile_gamma_poisson(P, value(k), value(θ));
  }

  override function lower() -> Integer!? {
    return 0;
  }
}

function GammaPoisson<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return wrap_gamma_poisson(k, θ);
}
function wrap_gamma_poisson<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return make_gamma_poisson(wrap(k), wrap(θ));
}
function make_gamma_poisson<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return construct<GammaPoissonDistribution<Arg1,Arg2>>(k, θ);
}

/**
 * Create Poisson distribution.
 */
function Poisson(λ:Random<Real>) -> Distribution<Integer> {
  λ.prune();
  if λ.hasGamma() {
    let (k, θ) <- λ.getGamma();
    let p <- GammaPoisson(k, θ);
    λ.graft(p);
    return p;
  } else {
    return Poisson(wrap(λ));
  }
}

/*
 * Simulate a gamma-Poisson distribution.
 *
 * - k: Shape.
 * - θ: Scale.
 */
function simulate_gamma_poisson<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  /* C++ std::negative_binomial_distribution only accepts integer k, so
   * simulate the gamma then the Poisson instead of treating this as a
   * negative binomial distribution */
  return simulate_poisson(simulate_gamma(k, θ));
}

/*
 * Observe a gamma-Poisson variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Returns: the log probability mass.
 */
function logpdf_gamma_poisson<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  let ρ <- 1.0/(θ + 1.0);
  return k*log(ρ) + x*log1p(-ρ) + lchoose(x + k - 1, x);
}

/*
 * Update the parameters of a Gamma distribution with a Poisson likelihood.
 *
 * - x: The variate.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_gamma_poisson<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return Gamma(k + x, θ/(θ + 1.0));
}

/*
 * CDF of a gamma-Poisson variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the cumulative probability.
 */
function cdf_gamma_poisson<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return ibeta(k, x + 1, 1.0/(θ + 1.0));
}

/*
 * Quantile of a gamma-Poisson distribution.
 *
 * - P: The cumulative probability.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the quantile.
 */
function quantile_gamma_poisson<Arg1,Arg2,Arg3>(P:Arg1, k:Arg2, θ:Arg3) -> {
  let ρ <- 1.0/(θ + 1.0);
  cpp{{
  return boost::math::quantile(boost::math::negative_binomial_distribution<
      Real>(wait(k), wait(ρ)), wait(P));
  }}
}
