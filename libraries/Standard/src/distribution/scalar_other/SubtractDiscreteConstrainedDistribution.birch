/*
 * Distribution over the first of a pair of random variables given their
 * difference. This is produced by SubtractDiscreteDelta.update() once the
 * difference is realized. In turn, SubtractDiscreteConstrained.update()
 * produces a Delta distribution over the second of the pair once the first is
 * realized.
 */
final class SubtractDiscreteConstrainedDistribution(p:Real[_], l:Integer,
    y:Integer) < BoundedDiscreteDistribution {
  /**
   * Probabilities of values of the first of the pair, starting from `l`.
   */
  p:Real[_] <- p;

  /**
   * Lower bound on the value of the first of the pair.
   */
  l:Integer <- l;

  /**
   * Difference of the pair (first minus second).
   */
  y:Integer <- y;
  
  override function simulate() -> Integer {
    return simulate_categorical(p) + l - 1;
  }
  
  override function logpdf(x:Integer) -> Real {
    return logpdf_categorical(x - l + 1, p);
  }
  
  override function update(x:Integer) -> Delay? {
    return Delta(x - y);
  }
  
  override function lower() -> Integer? {
    return l;
  }
  
  override function upper() -> Integer? {
    return l + length(p) - 1;
  }
}
