cpp{{
#include <boost/math/distributions.hpp>
}}

/*
 * Simulate $\chi^2$ distribution.
 *
 * - ν: Degrees of freedom.
 */
function simulate_chi_squared(ν:Real) -> Real {
  assert 0.0 < ν;
  cpp{{
  return std::chi_squared_distribution<birch::type::Real>(ν)(rng);
  }}
}

/*
 * Observe a $\chi^2$ variate.
 *
 * - x: The variate.
 * - ν: Degrees of freedom.
 *
 * Return: the log probability density.
 */
function logpdf_chi_squared(x:Real, ν:Real) -> Real {
  assert 0.0 < ν;
  if x > 0.0 || (x >= 0.0 && ν > 1.0) {
    let k <- 0.5*ν;
    return (k - 1.0)*log(x) - 0.5*x - lgamma(k) - k*log(2.0);
  } else {
    return -inf;
  }
}

/*
 * Observe a $\chi^2$ variate.
 *
 * - x: The variate.
 * - ν: Degrees of freedom.
 *
 * Return: the log probability density.
 */
function logpdf_lazy_chi_squared(x:Expression<Real>, ν:Expression<Real>) -> Expression<Real> {
  let k <- 0.5*ν;
  return box((k - 1.0)*log(x) - 0.5*x - lgamma(k) - k*log(2.0));
}

/*
 * CDF of $\chi^2$ variate.
 *
 * - x: The variate.
 * - ν: Degrees of freedom.
 *
 * Return: the cumulative probability.
 */
function cdf_chi_squared(x:Real, ν:Real) -> Real {
  assert 0.0 < ν;
  return lower_inc_gamma(0.5*ν, 0.5*x) / gamma(0.5*ν);
}

/*
 * CDF of $\chi^2$ distribution.
 *
 * - P: The cumulative probability.
 * - ν: Degrees of freedom.
 *
 * Return: the quantile.
 */
function quantile_chi_squared(P:Real, ν:Real) -> Real {
  assert 0.0 < ν;
  cpp{{
  return boost::math::quantile(boost::math::chi_squared_distribution<>(ν), P);
  }}
}
