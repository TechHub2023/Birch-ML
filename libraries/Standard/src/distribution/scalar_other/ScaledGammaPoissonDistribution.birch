/**
 * Scaled gamma-Poisson distribution.
 */
final class ScaledGammaPoissonDistribution<Arg1,Arg2,Arg3>(a:Arg1, k:Arg2,
    θ:Arg3) < DiscreteDistribution {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Shape.
   */
  k:Arg2 <- k;

  /**
   * Scale.
   */
  θ:Arg3 <- θ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Integer! {
    return simulate_gamma_poisson(value(k), value(a)*value(θ));
  }

  override function simulateLazy() -> Integer!? {
    return simulate_gamma_poisson(peek(k), peek(a)*peek(θ));
  }
  
  override function logpdf(x:Integer!) -> Real! {
    return logpdf_gamma_poisson(x, value(k), value(a)*value(θ));
  }

  override function logpdfLazy(x:Expression<Integer>) -> Expression<Real>? {
    return box(logpdf_gamma_poisson(x, k, a*θ));
  }

  override function update(x:Integer!) -> Delay? {
    return update_scaled_gamma_poisson(x, value(a), value(k), value(θ));
  }

  override function updateLazy(x:Expression<Integer>) -> Delay? {
    return update_scaled_gamma_poisson(x, a, k, θ);
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_gamma_poisson(x, value(k), value(a)*value(θ));
  }

  override function quantile(P:Real!) -> Integer!? {
    return quantile_gamma_poisson(P, value(k), value(a)*value(θ));
  }

  override function lower() -> Integer!? {
    return 0;
  }
}

function ScaledGammaPoisson<Arg1,Arg2,Arg3>(a:Arg1, k:Arg2, θ:Arg3) -> {
  return construct<ScaledGammaPoissonDistribution<Arg1,Arg2,Arg3>>(a, k, θ);
}

/**
 * Create Poisson distribution.
 */
function Poisson<Arg>(λ:Multiply<Arg,Random<Real>>) ->
    Distribution<Integer> {
  λ.r.prune();
  if λ.r.hasGamma() {
    let (k, θ) <- λ.r.getGamma();
    let p <- ScaledGammaPoisson(λ.l, k, θ);
    λ.r.graft(p);
    return p;
  } else {
    return construct<PoissonDistribution<Multiply<Arg,Random<Real>>>>(λ);
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson<Arg>(λ:Multiply<Random<Real>,Arg>) ->
    Distribution<Integer> {
  λ.l.prune();
  if λ.l.hasGamma() {
    let (k, θ) <- λ.l.getGamma();
    let p <- ScaledGammaPoisson(λ.r, k, θ);
    λ.l.graft(p);
    return p;
  } else {
    return construct<PoissonDistribution<Multiply<Random<Real>,Arg>>>(λ);
  }
}

/**
 * Create Poisson distribution.
 */
function Poisson(λ:Multiply<Random<Real>,Random<Real>>) ->
    Distribution<Integer> {
  λ.l.prune();
  if λ.l.hasGamma() {
    let (k, θ) <- λ.l.getGamma();
    let p <- ScaledGammaPoisson(λ.r, k, θ);
    λ.l.graft(p);
    return p;
  } else {
    λ.r.prune();
    if λ.r.hasGamma() {
      let (k, θ) <- λ.r.getGamma();
      let p <- ScaledGammaPoisson(λ.l, k, θ);
      λ.r.graft(p);
      return p;
    } else {
      return construct<PoissonDistribution<Multiply<Random<Real>,Random<Real>>>>(λ);
    }
  }
}

/*
 * Update the parameters of a scaled Gamma distribution with a Poisson
 * likelihood.
 *
 * - x: The variate.
 * - a: Scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_scaled_gamma_poisson<Arg1,Arg2,Arg3,Arg4>(x:Arg1, a:Arg2,
    k:Arg3, θ:Arg4) -> {
  return Gamma(k + x, θ/(a*θ + 1.0));
}
