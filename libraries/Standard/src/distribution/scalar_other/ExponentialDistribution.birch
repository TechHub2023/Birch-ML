hpp{{
#include <boost/math/distributions/exponential.hpp>
}}

/**
 * Exponential distribution.
 */
final class ExponentialDistribution<Arg1>(λ:Arg1) < Distribution<Real> {
  /**
   * Rate.
   */
  λ:Arg1 <- λ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    return simulate_exponential(value(λ));
  }

  override function simulateLazy() -> Real!? {
    return simulate_exponential(peek(λ));
  }

  override function logpdf(x:Real!) -> Real! {
    return logpdf_exponential(x, value(λ));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_exponential(x, λ));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_exponential(x, value(λ));
  }

  override function quantile(P:Real!) -> Real!? {
    return quantile_exponential(P, value(λ));
  }

  override function lower() -> Real!? {
    return 0.0;
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Exponential");
    buffer.set("λ", value(λ));
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Arg>(λ:Arg) -> {
  return wrap_exponential(wrap(λ));
}
function wrap_exponential<Arg>(λ:Arg) -> {
  return construct<ExponentialDistribution<Arg>>(λ);
}

hpp{{
using numbirch::simulate_exponential;
}}

/*
 * Observe an exponential variate.
 *
 * - x: The variate.
 * - λ: Rate.
 *
 * Returns: the log probability density.
 */
function logpdf_exponential<Arg1,Arg2>(x:Arg1, λ:Arg2) -> {
  return if_then_else(0.0 <= x, log(λ) - λ*x, -inf);
}

/*
 * CDF of an exponential variate.
 *
 * - x: The variate.
 * - λ: Rate.
 *
 * Return: the cumulative probability.
 */
function cdf_exponential<Arg1,Arg2>(x:Arg1, λ:Arg2) -> {
  return if_then_else(0.0 < x, -expm1(-λ*x), 0.0);
}

/*
 * Quantile of an exponential distribution.
 *
 * - P: The cumulative probability.
 * - λ: Rate.
 *
 * Return: the quantile.
 */
function quantile_exponential<Arg1,Arg2>(P:Arg1, λ:Arg2) -> {
  cpp{{
  return boost::math::quantile(boost::math::exponential_distribution<Real>(
      wait(λ)), wait(P));
  }}
}
