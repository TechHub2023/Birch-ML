/**
 * Gamma distribution.
 */
final class Gamma(k:Expression<Real>, θ:Expression<Real>) <
    Distribution<Real> {
  /**
   * Shape.
   */
  k:Expression<Real> <- k;
  
  /**
   * Scale.
   */
  θ:Expression<Real> <- θ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_gamma(k.value(), θ.value());
  }

  function simulateLazy() -> Real? {
    return simulate_gamma(k.eval(), θ.eval());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_gamma(x, k.value(), θ.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_gamma(x, k, θ);
  }

  function cdf(x:Real) -> Real? {
    return cdf_gamma(x, k.value(), θ.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_gamma(P, k.value(), θ.value());
  }

  function lower() -> Real? {
    return 0.0;
  }

  function graftGamma() -> Gamma? {
    prune();
    return this;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Gamma");
    buffer.set("k", k);
    buffer.set("θ", θ);
  }
}

/**
 * Create gamma distribution.
 */
function Gamma<Left,Right>(k:Left, θ:Right) -> {
  return construct<Gamma>(box(k), box(θ));
}

/*
 * Simulate a gamma distribution.
 *
 * - k: Shape.
 * - θ: Scale.
 */
function simulate_gamma(k:Real, θ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < θ;
  cpp{{
  return std::gamma_distribution<birch::type::Real>(k, θ)(rng);
  }}
}

/*
 * Observe a gamma variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_gamma(x:Real, k:Real, θ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < θ;
  return if_then_else(x < 0.0, -inf, (k - 1.0)*log(x) - x/θ - lgamma(k) -
      k*log(θ));
}

/*
 * Observe a gamma variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_gamma(x:Expression<Real>, k:Expression<Real>, θ:Expression<Real>) -> Expression<Real> {
  return box(if_then_else(x < 0.0, -inf, (k - 1.0)*log(x) - x/θ - lgamma(k) - k*log(θ)));
}

/*
 * CDF of a gamma variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the cumulative probability.
 */
function cdf_gamma(x:Real, k:Real, θ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < θ;

  if x <= 0.0 {
    return 0.0;
  } else {
    return lower_inc_gamma(k, x/θ);
  }
}

/*
 * Quantile of a gamma distribution.
 *
 * - P: The cumulative probability.
 * - k: Shape.
 * - θ: Scale.
 *
 * Return: the quantile.
 */
function quantile_gamma(P:Real, k:Real, θ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < θ;
  cpp{{
  return boost::math::quantile(boost::math::gamma_distribution<>(k, θ), P);
  }}
}
