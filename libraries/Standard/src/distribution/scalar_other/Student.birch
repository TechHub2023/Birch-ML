cpp{{
#include <boost/math/distributions.hpp>
}}

/**
 * Student's $t$-distribution.
 */
final class Student<Arg1,Arg2,Arg3>(ν:Arg1, μ:Arg2, σ2:Arg3) <
    Distribution<Real> {
  /**
   * Degrees of freedom.
   */
  ν:Arg1 <- ν;

  /**
   * Location parameter.
   */
  μ:Arg2 <- μ;

  /**
   * Square scale parameter.
   */
  σ2:Arg3 <- σ2;
  
  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_student_t(value(ν), value(μ), value(σ2));
  }

  override function simulateLazy() -> Real? {
    return simulate_student_t(peak(ν), peak(μ), peak(σ2));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_student_t(x, value(ν), value(μ), value(σ2));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_student_t(x, ν, μ, σ2));
  }

  override function cdf(x:Real) -> Real? {
    return cdf_student_t(x, value(ν), value(μ), value(σ2));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_student_t(P, value(ν), value(μ), value(σ2));
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Student");
    buffer.set("ν", value(ν));
    buffer.set("μ", value(μ));
    buffer.set("σ2", value(σ2));
  }
}

/**
 * Create Student's $t$-distribution.
 */
function Student<Arg1,Arg2,Arg3>(ν:Arg1, μ:Arg2, σ2:Arg3) -> {
  return construct<Student<Arg1,Arg2,Arg3>>(ν, μ, σ2);
}

/**
 * Create Student's $t$-distribution.
 */
function Student<Arg>(ν:Arg) -> {
  return Student(ν, 0.0, 1.0);
}

/*
 * Simulate a Student's $t$-distribution.
 *
 * - k: Degrees of freedom.
 */
function simulate_student_t(k:Real) -> Real {
  assert 0.0 < k;
  cpp{{
  return std::student_t_distribution<birch::type::Real>(k)(rng);
  }}
}

/*
 * Simulate a Student's $t$-distribution with location and scale.
 *
 * - k: Degrees of freedom.
 * - μ: Location.
 * - v: Scale.
 */
function simulate_student_t(k:Real, μ:Real, v:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < v;
  let y <- simulate_gaussian(0.0, v/k);
  let z <- simulate_chi_squared(k);
  return μ + y/sqrt(z/k);
}

/*
 * Observe a Student's $t$ variate.
 *
 * - x: The variate.
 * - k: Degrees of freedom.
 *
 * Returns: the log probability density.
 */
function logpdf_student_t<Arg1,Arg2>(x:Arg1, k:Arg2) -> {
  let a <- 0.5*(k + 1.0);
  let b <- 0.5*k;
  return lgamma(a) - lgamma(b) - 0.5*log(π*k) - a*log1p(x*x/k);
}

/*
 * Observe a Student's $t$ variate with location and scale.
 *
 * - x: The variate.
 * - k: Degrees of freedom.
 * - μ: Location.
 * - v: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_student_t<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2, μ:Arg3,
    v:Arg4) -> {
  let a <- 0.5*(k + 1.0);
  let b <- 0.5*k;
  let z <- x - μ;
  return lgamma(a) - lgamma(b) - 0.5*log(π*v) - a*log1p(z*z/v);
}

/*
 * CDF of a Student's $t$ variate.
 *
 * - x: The variate.
 * - k: Degrees of freedom.
 *
 * Return: the cumulative probability.
 */
function cdf_student_t(x:Real, ν:Real) -> Real {
  assert 0.0 < ν;
  let t <- 0.5*x/sqrt(x*x + ν) + 0.5;
  let prob <- ibeta(0.5*ν, 0.5*ν, t);
  return prob;
}

/*
 * CDF of a Student's $t$ variate with location and scale.
 *
 * - x: The variate.
 * - k: Degrees of freedom.
 * - μ: Location.
 * - σ2: Squared scale.
 *
 * Return: the cumulative probability.
 */
function cdf_student_t(x:Real, k:Real, μ:Real, σ2:Real) -> Real {
  assert 0.0 < σ2;
  return cdf_student_t((x - μ)/sqrt(σ2/k), k);
}

/*
 * Quantile of a Student's $t$ distribution.
 *
 * - P: The cumulative probability.
 * - ν: Degrees of freedom.
 *
 * Return: the quantile.
 */
function quantile_student_t(P:Real, ν:Real) -> Real {
  assert 0.0 < ν;
  cpp{{
  return boost::math::quantile(boost::math::students_t_distribution<>(ν), P);
  }}
}

/*
 * Quantile of a Student's $t$ distribution with location and scale.
 *
 * - P: The cumulative probability.
 * - ν: Degrees of freedom.
 * - μ: Location.
 * - σ2: Squared scale.
 *
 * Return: the quantile.
 */
function quantile_student_t(P:Real, ν:Real, μ:Real, σ2:Real) -> Real {
  assert 0.0 < σ2;
  return quantile_student_t(P, ν)*sqrt(σ2) + μ;
}
