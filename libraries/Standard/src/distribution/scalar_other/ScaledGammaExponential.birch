/**
 * Scaled gamma-exponential distribution.
 */
final class ScaledGammaExponential<Arg1,Arg2,Arg3>(a:Arg1, k:Arg2, θ:Arg3) <
    Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Prior scale of rate.
   */
  k:Arg2 <- k;

  /**
   * Prior shape of rate.
   */
  θ:Arg3 <- θ;

  override function supportsLazy() -> Boolean {
    return true;
  }

  override function simulate() -> Real {
    return simulate_lomax(1.0/(value(a)*value(θ)), value(k));
  }

  override function simulateLazy() -> Real? {
    return simulate_lomax(1.0/(peak(a)*peak(θ)), peak(k));
  }

  override function logpdf(x:Real) -> Real {
    return logpdf_lomax(x, 1.0/(value(a)*value(θ)), value(k));
  }

  override function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return box(logpdf_lomax(x, 1.0/(a*θ), k));
  }

  override function update(x:Real) -> Delay? {
    return update_scaled_gamma_exponential(x, value(a), value(k), value(θ));
  }

  override function updateLazy(x:Expression<Real>) -> Delay? {
    return update_scaled_gamma_exponential(x, a, k, θ);
  }
  
  override function cdf(x:Real) -> Real? {
    return cdf_lomax(x, 1.0/(value(a)*value(θ)), value(k));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_lomax(P, 1.0/(value(a)*value(θ)), value(k));
  }

  override function lower() -> Real? {
    return 0.0;
  }
}

function ScaledGammaExponential<Arg1,Arg2,Arg3>(a:Arg1, k:Arg2, θ:Arg3) -> {
  return construct<ScaledGammaExponential<Arg1,Arg2,Arg3>>(a, k, θ);
}

/**
 * Create Exponential distribution.
 */
function Exponential<Arg>(λ:Multiply<Arg,Random<Real>>) ->
    Distribution<Real> {
  λ.r.prune();
  if λ.r.hasGamma() {
    let (k, θ) <- λ.r.getGamma();
    let p <- ScaledGammaExponential(λ.l, k, θ);
    λ.r.graft(p);
    return p;
  } else {
    return construct<Exponential<Multiply<Arg,Random<Real>>>>(λ);
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Arg>(λ:Multiply<Random<Real>,Arg>) ->
    Distribution<Real> {
  λ.l.prune();
  if λ.l.hasGamma() {
    let (k, θ) <- λ.l.getGamma();
    let p <- ScaledGammaExponential(λ.r, k, θ);
    λ.l.graft(p);
    return p;
  } else {
    return construct<Exponential<Multiply<Random<Real>,Arg>>>(λ);
  }
}

/*
 * Update the parameters of a scaled Gamma distribution with an exponential
 * likelihood.
 *
 * - x: The variate.
 * - a: Constant scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_scaled_gamma_exponential<Arg1,Arg2,Arg3,Arg4>(x:Arg1,
    a:Arg2, k:Arg3, θ:Arg4) -> {
  return Gamma(k + 1.0, θ/(1.0 + x*a*θ));
}
