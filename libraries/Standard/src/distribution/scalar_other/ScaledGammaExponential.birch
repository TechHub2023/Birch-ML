/**
 * Scaled gamma-exponential distribution.
 */
final class ScaledGammaExponential(a:Expression<Real>, λ:Gamma) <
    Distribution<Real> {
  /**
   * Scale.
   */
  a:Expression<Real> <- a;

  /**
   * Rate.
   */
  λ:Gamma <- λ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_lomax(1.0/(a.value()*λ.θ.value()), λ.k.value());
  }

  function simulateLazy() -> Real? {
    return simulate_lomax(1.0/(a.eval()*λ.θ.eval()), λ.k.eval());
  }

  function logpdf(x:Real) -> Real {
    return logpdf_lomax(x, 1.0/(a.value()*λ.θ.value()), λ.k.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_lomax(x, box(1.0/(a*λ.θ)), λ.k);
  }

  function update(x:Real) {
    (λ.k, λ.θ) <- box(update_scaled_gamma_exponential(x, a.value(),
        λ.k.value(), λ.θ.value()));
  }

  function updateLazy(x:Expression<Real>) {
    (λ.k, λ.θ) <- update_lazy_scaled_gamma_exponential(x, a, λ.k, λ.θ);
  }
  
  function cdf(x:Real) -> Real? {
    return cdf_lomax(x, 1.0/(a.value()*λ.θ.value()), λ.k.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_lomax(P, 1.0/(a.value()*λ.θ.value()), λ.k.value());
  }

  function lower() -> Real? {
    return 0.0;
  }

  function link() {
    λ.setChild(this);
  }
  
  function unlink() {
    λ.releaseChild(this);
  }
}

function ScaledGammaExponential<Left>(a:Left, λ:Gamma) -> {
  m:ScaledGammaExponential(box(a), λ);
  m.link();
  return m;
}

/**
 * Create Exponential distribution.
 */
function Exponential<Left>(λ:Multiply<Left,Random<Real>>) ->
    Distribution<Real> {
  m:Gamma?;
  if (m <- λ.r!.graftGamma())? {
    return ScaledGammaExponential(λ.l!, m!);
  } else {
    return construct<Exponential>(box(λ));
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Right>(λ:Multiply<Random<Real>,Right>) ->
    Distribution<Real> {
  m:Gamma?;
  if (m <- λ.l!.graftGamma())? {
    return ScaledGammaExponential(λ.r!, m!);
  } else {
    return construct<Exponential>(box(λ));
  }
}

/*
 * Update the parameters of a scaled Gamma distribution with an exponential
 * likelihood.
 *
 * - x: The variate.
 * - a: Constant scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_scaled_gamma_exponential(x:Real, a:Real, k:Real, θ:Real) -> (Real, Real) {
  return (k + 1.0, θ/(1.0 + x*a*θ));
}

/*
 * Update the parameters of a scaled Gamma distribution with an exponential
 * likelihood.
 *
 * - x: The variate.
 * - a: Constant scale.
 * - k: Prior shape.
 * - θ: Prior scale.
 *
 * Returns: the posterior hyperparameters `k'` and `θ'`.
 */
function update_lazy_scaled_gamma_exponential(x:Expression<Real>,
    a:Expression<Real>, k:Expression<Real>, θ:Expression<Real>) ->
    (Expression<Real>, Expression<Real>) {
  return (box(k + 1.0), box(θ/(1.0 + x*a*θ)));
}
