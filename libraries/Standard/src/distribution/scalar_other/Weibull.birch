/**
 * Weibull distribution.
 */
final class Weibull(k:Expression<Real>, λ:Expression<Real>) <
    Distribution<Real> {
  /**
   * Shape.
   */
  k:Expression<Real> <- k;

  /**
   * Scale.
   */
  λ:Expression<Real> <- λ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_weibull(k.value(), λ.value());
  }

  function simulateLazy() -> Real? {
    return simulate_weibull(k.peak(), λ.peak());
  }
  
  function logpdf(x:Real) -> Real {
    return logpdf_weibull(x, k.value(), λ.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_weibull(x, k, λ);
  }

  function cdf(x:Real) -> Real? {
    return cdf_weibull(x, k.value(), λ.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_weibull(P, k.value(), λ.value());
  }

  function lower() -> Real? {
    return 0.0;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Weibull");
    buffer.set("k", k);
    buffer.set("λ", λ);
  }
}

/**
 * Create Weibull distribution.
 */
function Weibull<Left,Right>(k:Left, λ:Right) -> {
  return construct<Weibull>(box(k), box(λ));
}

/*
 * Simulate an Weibull distribution.
 *
 * - k: Shape.
 * - λ: Scale.
 */
function simulate_weibull(k:Real, λ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < λ;
  cpp{{
  return std::weibull_distribution<birch::type::Real>(k, λ)(rng);
  }}
}

/*
 * Observe a Weibull variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - λ: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_weibull(x:Real, k:Real, λ:Real) -> Real {
  assert 0.0 < λ;
  return if_then_else(x < 0.0, -inf, log(k) + (k - 1.0)*log(x) -
      k*log(λ) - pow(x/λ, k));
}

/*
 * Observe a Weibull variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - λ: Scale.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_weibull(x:Expression<Real>, k:Expression<Real>, λ:Expression<Real>) -> Expression<Real> {
  return box(if_then_else(x < 0.0, -inf, log(k) + (k - 1.0)*log(x) - k*log(λ) -
      pow(x/λ, k)));
}

/*
 * CDF of a Weibull variate.
 *
 * - x: The variate.
 * - k: Shape.
 * - λ: Scale.
 *
 * Return: the cumulative probability.
 */
function cdf_weibull(x:Real, k:Real, λ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < λ;
  if (x >= 0) {
    return -expm1(-pow(x/λ, k));
  } else {
    return 0;
  }
}

/*
 * Quantile of a Weibull distribution.
 *
 * - P: The cumulative probability.
 * - k: Shape.
 * - λ: Scale.
 *
 * Return: the quantile.
 */
function quantile_weibull(P:Real, k:Real, λ:Real) -> Real {
  assert 0.0 < k;
  assert 0.0 < λ;
  cpp{{
  return boost::math::quantile(boost::math::weibull_distribution<>(k, λ), P);
  }}
}
