/**
 * Exponential distribution.
 */
final class Exponential(λ:Expression<Real>) < Distribution<Real> {
  /**
   * Rate.
   */
  λ:Expression<Real> <- λ;

  function supportsLazy() -> Boolean {
    return true;
  }

  function simulate() -> Real {
    return simulate_exponential(λ.value());
  }

  function simulateLazy() -> Real? {
    return simulate_exponential(λ.eval());
  }

  function logpdf(x:Real) -> Real {
    return logpdf_exponential(x, λ.value());
  }

  function logpdfLazy(x:Expression<Real>) -> Expression<Real>? {
    return logpdf_lazy_exponential(x, λ);
  }

  function cdf(x:Real) -> Real? {
    return cdf_exponential(x, λ.value());
  }

  function quantile(P:Real) -> Real? {
    return quantile_exponential(P, λ.value());
  }

  function lower() -> Real? {
    return 0.0;
  }

  function write(buffer:Buffer) {
    prune();
    buffer.set("class", "Exponential");
    buffer.set("λ", λ);
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Middle>(λ:Middle) -> {
  return construct<Exponential>(box(λ));
}

/**
 * Create Exponential distribution.
 */
function Exponential(λ:Random<Real>) -> Distribution<Real> {
  m:Gamma?;
  if (m <- λ.graftGamma())? {
    return GammaExponential(m!);
  } else {
    return construct<Exponential>(λ);
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Left>(λ:Multiply<Left,Random<Real>>) ->
    Distribution<Real> {
  m:Gamma?;
  if (m <- λ.r!.graftGamma())? {
    return ScaledGammaExponential(λ.l!, m!);
  } else {
    return construct<Exponential>(box(λ));
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Right>(λ:Multiply<Random<Real>,Right>) ->
    Distribution<Real> {
  m:Gamma?;
  if (m <- λ.l!.graftGamma())? {
    return ScaledGammaExponential(λ.r!, m!);
  } else {
    return construct<Exponential>(box(λ));
  }
}

/*
 * Simulate an exponential distribution.
 *
 * - λ: Rate.
 */
function simulate_exponential(λ:Real) -> Real {
  assert 0.0 < λ;
  cpp{{
  return std::exponential_distribution<birch::type::Real>(λ)(rng);
  }}
}

/*
 * Observe an exponential variate.
 *
 * - x: The variate.
 * - λ: Rate.
 *
 * Returns: the log probability density.
 */
function logpdf_exponential(x:Real, λ:Real) -> Real {
  assert 0.0 < λ;
  return if_then_else(x < 0.0, -inf, log(λ) - λ*x);
}

/*
 * Observe an exponential variate.
 *
 * - x: The variate.
 * - λ: Rate.
 *
 * Returns: the log probability density.
 */
function logpdf_lazy_exponential(x:Expression<Real>, λ:Expression<Real>) -> Expression<Real> {
  return box(if_then_else(x < 0.0, -inf, log(λ) - λ*x));
}

/*
 * CDF of an exponential variate.
 *
 * - x: The variate.
 * - λ: Rate.
 *
 * Return: the cumulative probability.
 */
function cdf_exponential(x:Real, λ:Real) -> Real {
  assert 0.0 < λ;

  if x <= 0.0 {
    return 0.0;
  } else {
    return -expm1(-λ*x);
  }
}

/*
 * Quantile of an exponential distribution.
 *
 * - P: The cumulative probability.
 * - λ: Rate.
 *
 * Return: the quantile.
 */
function quantile_exponential(P:Real, λ:Real) -> Real {
  assert 0.0 < λ;
  cpp{{
  return boost::math::quantile(boost::math::exponential_distribution<>(λ), P);
  }}
}
