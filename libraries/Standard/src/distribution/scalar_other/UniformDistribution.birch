cpp{{
#include <boost/math/distributions/uniform.hpp>
}}

/**
 * Uniform distribution.
 */
final class UniformDistribution<Arg1,Arg2>(l:Arg1, u:Arg2) < Distribution<Real> {
  /**
   * Lower bound.
   */
  l:Arg1 <- l;
  
  /**
   * Upper bound.
   */
  u:Arg2 <- u;

  override function supportsLazy() -> Boolean {
    return false;
  }

  override function simulate() -> Real {
    return simulate_uniform(value(l), value(u));
  }
  
  override function logpdf(x:Real) -> Real {
    return logpdf_uniform(x, value(l), value(u));
  }

  override function cdf(x:Real) -> Real? {
    return cdf_uniform(x, value(l), value(u));
  }

  override function quantile(P:Real) -> Real? {
    return quantile_uniform(P, value(l), value(u));
  }

  override function lower() -> Real? {
    return value(l);
  }
  
  override function upper() -> Real? {
    return value(u);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Uniform");
    buffer.set("l", value(l));
    buffer.set("u", value(u));
  }
}

/**
 * Create a uniform distribution.
 */
function Uniform<Arg1,Arg2>(l:Arg1, u:Arg2) -> {
  return construct<UniformDistribution<Arg1,Arg2>>(l, u);
}

/*
 * Simulate a uniform distribution.
 *
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 */
function simulate_uniform(l:Real, u:Real) -> Real {
  assert l <= u;
  cpp{{
  return std::uniform_real_distribution<Real>(l, u)(rng);
  }}
}

/*
 * Observe a uniform variate.
 *
 * - x: The variate.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Returns: the log probability density.
 */
function logpdf_uniform(x:Real, l:Real, u:Real) -> Real {
  assert l <= u;
  if x >= l && x <= u {
    return -log(u - l);
  } else {
    return -inf;
  }
}

/*
 * CDF of a uniform variate.
 *
 * - x: The variate.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Return: the cumulative probability.
 */
function cdf_uniform(x:Real, l:Real, u:Real) -> Real {
  assert l <= u;
  if x <= l {
    return 0.0;
  } else if x > u {
    return 1.0;
  } else {
    return (x - l)/(u - l);
  }
}

/*
 * Quantile of a uniform distribution.
 *
 * - P: The cumulative probability.
 * - l: Lower bound of interval.
 * - u: Upper bound of interval.
 *
 * Return: the quantile.
 */
function quantile_uniform(P:Real, l:Real, u:Real) -> Real {
  assert l <= u;
  return l + P*(u - l);
}
