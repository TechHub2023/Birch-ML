/*
 * Birch uses the Eigen library <https://eigen.tuxfamily.org> for linear
 * algebra support. Eigen is tightly integrated with support from libbirch,
 * in order to preserve the lazy evaluation of Eigen that is a critical
 * feature of its performance. This file contains only declarations,
 * implementations are in libbirch/EigenOperators.hpp and
 * libbirch/EigenFunctions.hpp.
 */

operator (x:Real*y:Real[_]) -> Real[_] {
  cpp{{
  return x*y.toEigen();
  }}
}

operator (x:Real[_]*y:Real) -> Real[_] {
  cpp{{
  return x.toEigen()*y;
  }}
}

operator (x:Real*Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return x*Y.toEigen();
  }}
}

operator (X:Real[_,_]*y:Real) -> Real[_,_] {
  cpp{{
  return X.toEigen()*y;
  }}
}

operator (x:Real[_]/y:Real) -> Real[_] {
  cpp{{
  return x.toEigen()/y;
  }}
}

operator (X:Real[_,_]/y:Real) -> Real[_,_] {
  cpp{{
  return X.toEigen()/y;
  }}
}

operator (x:Real[_] == y:Real[_]) -> Boolean {
  cpp{{
  return x.toEigen() == y.toEigen();
  }}
}

operator (x:Real[_] != y:Real[_]) -> Boolean {
  cpp{{
  return x.toEigen() != y.toEigen();
  }}
}

operator (X:Real[_,_] == Y:Real[_,_]) -> Boolean {
  cpp{{
  return X.toEigen() == Y.toEigen();
  }}
}

operator (X:Real[_,_] != Y:Real[_,_]) -> Boolean {
  cpp{{
  return X.toEigen() != Y.toEigen();
  }}
}

operator (-x:Real[_]) -> Real[_] {
  cpp{{
  return -x.toEigen();
  }}
}

operator (+x:Real[_]) -> Real[_] {
  return x;
}

operator (-X:Real[_,_]) -> Real[_,_] {
  cpp{{
  return -X.toEigen();
  }}
}

operator (+X:Real[_,_]) -> Real[_,_] {
  return X;
}

operator (x:Real[_] + y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen() + y.toEigen();
  }}
}

operator (x:Real[_] - y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen() - y.toEigen();
  }}
}

operator (X:Real[_,_] + Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen() + Y.toEigen();
  }}
}

operator (X:Real[_,_] - Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen() - Y.toEigen();
  }}
}

operator (X:Real[_,_]*y:Real[_]) -> Real[_] {
  cpp{{
  return X.toEigen()*y.toEigen();
  }}
}

operator (X:Real[_]*y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen()*y.toEigen();
  }}
}

operator (X:Real[_,_]*Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen()*Y.toEigen();
  }}
}

operator (x:Integer*y:Integer[_]) -> Integer[_] {
  cpp{{
  return x*y.toEigen();
  }}
}

operator (x:Integer[_]*y:Integer) -> Integer[_] {
  cpp{{
  return x.toEigen()*y;
  }}
}

operator (x:Integer*Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return x*Y.toEigen();
  }}
}

operator (X:Integer[_,_]*y:Integer) -> Integer[_,_] {
  cpp{{
  return X.toEigen()*y;
  }}
}

operator (x:Integer[_]/y:Integer) -> Integer[_] {
  cpp{{
  return x.toEigen()/y;
  }}
}

operator (X:Integer[_,_]/y:Integer) -> Integer[_,_] {
  cpp{{
  return X.toEigen()/y;
  }}
}

operator (x:Integer[_] == y:Integer[_]) -> Boolean {
  cpp{{
  return x.toEigen() == y.toEigen();
  }}
}

operator (x:Integer[_] != y:Integer[_]) -> Boolean {
  cpp{{
  return x.toEigen() != y.toEigen();
  }}
}

operator (X:Integer[_,_] == Y:Integer[_,_]) -> Boolean {
  cpp{{
  return X.toEigen() == Y.toEigen();
  }}
}

operator (X:Integer[_,_] != Y:Integer[_,_]) -> Boolean {
  cpp{{
  return X.toEigen() != Y.toEigen();
  }}
}

operator (X:LLT == Y:LLT) -> Boolean {
  cpp{{
  return X.reconstructedMatrix() == Y.reconstructedMatrix();
  }}
}

operator (X:LLT != Y:LLT) -> Boolean {
  cpp{{
  return X.reconstructedMatrix() != Y.reconstructedMatrix();
  }}
}

operator (-x:Integer[_]) -> Integer[_] {
  cpp{{
  return -x.toEigen();
  }}
}

operator (+x:Integer[_]) -> Integer[_] {
  return x;
}

operator (-X:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return -X.toEigen();
  }}
}

operator (+X:Integer[_,_]) -> Integer[_,_] {
  return X;
}

operator (x:Integer[_] + y:Integer[_]) -> Integer[_] {
  cpp{{
  return x.toEigen() + y.toEigen();
  }}
}

operator (x:Integer[_] - y:Integer[_]) -> Integer[_] {
  cpp{{
  return x.toEigen() - y.toEigen();
  }}
}

operator (X:Integer[_,_] + Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen() + Y.toEigen();
  }}
}

operator (X:Integer[_,_] - Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen() - Y.toEigen();
  }}
}

operator (X:Integer[_,_]*y:Integer[_]) -> Integer[_] {
  cpp{{
  return X.toEigen()*y.toEigen();
  }}
}

operator (X:Integer[_]*y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen()*y.toEigen();
  }}
}

operator (X:Integer[_,_]*Y:Integer[_,_]) -> Integer[_,_] {
  cpp{{
  return X.toEigen()*Y.toEigen();
  }}
}

/**
 * Dot product of vector with itself.
 */
function dot(x:Real[_]) -> Real {
  cpp{{
  return x.toEigen().squaredNorm();
  }}
}

/**
 * Dot product of vector with another.
 */
function dot(x:Real[_], y:Real[_]) -> Real {
  cpp{{
  return x.toEigen().dot(y.toEigen());
  }}
}

/**
 * Dot product of vector with columns of a matrix. The expression `dot(x, Y)`
 * is equivalent to `transpose(Y)*x`.
 */
function dot(x:Real[_], Y:Real[_,_]) -> Real[_] {
  cpp{{
  return Y.toEigen().transpose()*x.toEigen();
  }}
}

/**
 * Outer product of a vector with itself.
 */
function outer(x:Real[_]) -> Real[_,_] {
  cpp{{
  auto y = x.toEigen();
  return y*y.transpose();
  }}
}

/**
 * Outer product of a vector with another.
 */
function outer(x:Real[_], y:Real[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen()*y.toEigen().transpose();
  }}
}

/**
 * Outer product of a matrix with itself.
 */
function outer(X:Real[_,_]) -> Real[_,_] {
  cpp{{
  auto Y = X.toEigen();
  return Y*Y.transpose();
  }}
}

/**
 * Outer product of a matrix with another.
 */
function outer(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen()*Y.toEigen().transpose();
  }}
}

/**
 * Norm of a vector.
 */
function norm(x:Real[_]) -> Real {
  cpp{{
  return x.toEigen().norm();
  }}
}

/**
 * Element-wise square root of a vector.
 */
function sqrt(x:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().array().sqrt().matrix();
  }}
}

/**
 * Transpose of a matrix.
 */
function transpose(X:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().transpose();
  }}
}

/**
 * Transpose of a symmetric positive definite matrix.
 */
function transpose(S:LLT) -> LLT {
  return S;
}

/**
 * Transpose of a column vector into a row vector.
 */
function transpose(x:Real[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().transpose();
  }}
}

/**
 * Diagonal matrix from vector.
 */
function diagonal(x:Real[_]) -> Real[_,_] {
  cpp{{
  return x.toEigen().asDiagonal();
  }}
}

/**
 * Diagonal of a matrix, as a vector.
 */
function diagonal(X:Real[_,_]) -> Real[_] {
  cpp{{
  return X.toEigen().diagonal();
  }}
}

/**
 * Trace of a matrix.
 */
function trace(X:Real[_,_]) -> Real {
  cpp{{
  return X.toEigen().trace();
  }}
}

/**
 * Trace of a symmetric positive-definite matrix.
 */
function trace(S:LLT) -> Real {
  cpp{{
  return S.reconstructedMatrix().trace();
  }}
}

/**
 * Determinant of a matrix.
 */
function det(X:Real[_,_]) -> Real {
  cpp{{
  return X.toEigen().determinant();
  }}
}

/**
 * Log-determinant of a matrix.
 */
function ldet(X:Real[_,_]) -> Real {
  cpp{{
  return X.toEigen().householderQr().logAbsDeterminant();
  }}
}

/**
 * Determinant of a symmetric positive-definite matrix.
 */
function det(S:LLT) -> Real {
  cpp{{
  auto d = S.matrixL().determinant();
  return d*d;
  }}
}

/**
 * Log-determinant of a symmetric positive-definite matrix.
 */
function ldet(S:LLT) -> Real {
  cpp{{
  return 2.0*S.matrixL().nestedExpression().diagonal().array().log().sum();
  }}
}

/**
 * Inverse of a matrix.
 */
function inv(X:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().inverse();
  }}
}

/**
 * Inverse of a symmetric positive definite matrix.
 */
function inv(S:LLT) -> LLT {
  cpp{{
  return S.solve(libbirch::EigenMatrix<birch::type::Real>::Identity(
      S.rows(), S.cols())).llt();
  }}
}

/**
 * Solve a system of equations.
 */
function solve(X:Real[_,_], y:Real[_]) -> Real[_] {
  cpp{{
  return X.toEigen().householderQr().solve(y.toEigen()).eval();
  }}
}

/**
 * Solve a system of equations with a symmetric positive definite matrix.
 */
function solve(S:LLT, y:Real[_]) -> Real[_] {
  cpp{{
  return S.solve(y.toEigen()).eval();
  }}
}

/**
 * Solve a system of equations.
 */
function solve(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().householderQr().solve(Y.toEigen()).eval();
  }}
}

/**
 * Solve a system of equations with a symmetric positive definite matrix.
 */
function solve(S:LLT, Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return S.solve(Y.toEigen()).eval();
  }}
}

/**
 * Cholesky factor of a symmetric positive definite matrix, $S = LL^{\top}$.
 *
 * Returns: the lower-triangular factor $L$.
 */
function cholesky(S:LLT) -> Real[_,_] {
  cpp{{
  return S.matrixL();
  }}
}

/**
 * Hadamard (element-wise) vector product.
 */
function hadamard(x:Real[_], y:Real[_]) -> Real[_] {
  cpp{{
  return x.toEigen().cwiseProduct(y.toEigen());
  }}
}

/**
 * Hadamard (element-wise) matrix product.
 */
function hadamard(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().cwiseProduct(Y.toEigen());
  }}
}
