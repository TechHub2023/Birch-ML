/**
 * Equality comparison.
 */
operator<Type> (x:Type[_] == y:Type[_]) -> Boolean;

/**
 * Non-equality comparison.
 */
operator<Type> (x:Type[_] != y:Type[_]) -> Boolean;

/**
 * Equality comparison.
 */
operator<Type> (X:Type[_,_] == Y:Type[_,_]) -> Boolean;

/**
 * Non-equality comparison.
 */
operator<Type> (X:Type[_,_] != Y:Type[_,_]) -> Boolean;

/**
 * Identity operation.
 */
operator<Type> (+x:Type[_]) -> Type[_] {
  return x;
}

/**
 * Identity operation.
 */
operator<Type> (+X:Type[_,_]) -> Type[_,_] {
  return X;
}

/**
 * Lower-triangular Cholesky factor of a symmetric positive definite matrix,
 * $S = LL^{\top}$.
 */
function chol(S:Real[_,_]) -> Real[_,_] {
  cpp{{
  return S.toEigen().llt().matrixL();
  }}
}

/**
 * Lower triangle of a matrix.
 */
function tril(X:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().triangularView<Eigen::Lower>();
  }}
}

/**
 * Upper triangle of a matrix.
 */
function triu(X:Real[_,_]) -> Real[_,_] {
  cpp{{
  return X.toEigen().triangularView<Eigen::Upper>();
  }}
}

/**
 * Hadamard (element-wise) vector product.
 */
function hadamard<Type>(x:Type[_], y:Type[_]) -> Type[_] {
  cpp{{
  return x.toEigen().cwiseProduct(y.toEigen());
  }}
}

/**
 * Hadamard (element-wise) matrix product.
 */
function hadamard<Type>(X:Type[_,_], Y:Type[_,_]) -> Type[_,_] {
  cpp{{
  return X.toEigen().cwiseProduct(Y.toEigen());
  }}
}
