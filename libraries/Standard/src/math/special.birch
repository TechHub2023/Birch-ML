cpp{{
#include <boost/math/special_functions.hpp>
}}

/**
 * The gamma function.
 */
function gamma(x:Real64) -> Real64 {
  cpp {{
  return ::tgamma(x);
  }}
}

/**
 * The gamma function.
 */
function gamma(x:Real32) -> Real32 {
  cpp {{
  return ::tgammaf(x);
  }}
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Real64) -> Real64 {
  cpp {{
  return ::lgamma(x);
  }}
}

/**
 * Logarithm of the gamma function.
 */
function lgamma(x:Real32) -> Real32 {
  cpp {{
  return ::lgammaf(x);
  }}
}

/**
 * The multivariate gamma function.
 */
function gamma(x:Real64, p:Integer) -> Real64 {
  assert p > 0;
  let y <- 0.25*(p*(p - 1))*log(π);
  for i in 1..p {
    y <- y*gamma(x + 0.5*(1 - i));
  }
  return y;
}


function expm1(x:Real64) -> Real64 {
  cpp {{
    return ::expm1(x);
    }}
}

function expm1(x:Real32) -> Real32 {
  cpp {{
    return ::expm1f(x);
    }}
}


/**
 * The multivariate gamma function.
 */
function gamma(x:Real32, p:Integer) -> Real32 {
  assert p > 0;
  let y <- Real32(0.25)*Real32(p*(p - 1))*log(Real32(π));
  for i in 1..p {
    y <- y*gamma(x + Real32(0.5)*Real32(1 - i));
  }
  return y;
}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma(x:Real64, p:Integer) -> Real64 {
  assert p > 0;
  let y <- 0.25*(p*(p - 1))*log(π);
  for i in 1..p {
    y <- y + lgamma(x + 0.5*(1 - i));
  }
  return y;
}

/**
 * Logarithm of the multivariate gamma function.
 */
function lgamma(x:Real32, p:Integer) -> Real32 {
  assert p > 0;
  let y <- Real32(0.25)*Real32(p*(p - 1))*log(Real32(π));
  for i in 1..p {
    y <- y + lgamma(x + Real32(0.5)*Real32(1 - i));
  }
  return y;
}

/**
 * The beta function.
 */
function beta(x:Real64, y:Real64) -> Real64 {
  return (gamma(x) * gamma(y)) / (gamma(x + y));
}

/**
 * The beta function.
 */
function beta(x:Real32, y:Real32) -> Real32 {
  return (gamma(x) * gamma(y)) / (gamma(x + y));
}



/**
 * The incomplete beta function.
 */
function ibeta(a:Real, b:Real, x:Real) -> Real {
  if (x < Real(0.0) || x > Real(1.0)) {
    return inf;
  }
  // whenever x < (a + 1) / (a + b + 2) -- CF converges
  if (x > ((a + Real(1.0))/(a + b + Real(2.0)))) {
    return Real(1.0) - ibeta(b, a, Real(1.0) - x);
  }

  // stop represents the value when Lentz's algorithm has converged
  let STOP <- Real(1.0e-8);

  // TINY is to represent a very small floating point number
  let TINY <- Real(1.0e-30);

  let lbeta_ab <- lgamma(a) + lgamma(b) - lgamma(a + b);
  let front <- exp(log(x)*a + log(Real(1.0) - x)*b - lbeta_ab) / a;

  // setup for Lentz's algorithm
  let f <- Real(1.0);
  let c <- Real(1.0);
  let d <- Real(0.0);
  let numerator <- Real(0.0);

  for i in 0..200 {
    let m <- i/2;

    if (i == 0) {
      numerator <- Real(1.0);
    } else if (mod(i, 2) == 0) {
      numerator <- (m * (b - m)*x) / ((a + Real(2.0)*m - 1.0) * (a + Real(2.0)*m));
    } else {
      numerator <- -((a + m) * (a + b + m) * x)/((a + Real(2.0)*m)*(a + Real(2.0)*m + Real(1.0)));
    }

    d <- Real(1.0) + numerator * d;
    if abs(d) < TINY {
      d <- TINY;
    }
    d <- Real(1.0) / d;

    c <- Real(1.0) + numerator / c;

    if abs(c) < TINY {
      c <- TINY;
    }

    let cd <- c*d;

    // NOTE: Does *= work?
    f <- f * cd;

    if abs(Real(1.0) - cd) < STOP {
      return front * (f - Real(1.0));
    }
  }

  return inf; // did not converge
}

/**
 * Logarithm of the beta function.
 */
function lbeta(x:Real64, y:Real64) -> Real64 {
  return lgamma(x) + lgamma(y) - lgamma(x + y);
}

/**
 * Logarithm of the beta function.
 */
function lbeta(x:Real32, y:Real32) -> Real32 {
  return lgamma(x) + lgamma(y) - lgamma(x + y);
}

/**
 * The digamma function (derivative of `lgamma`).
 */
function digamma(x:Real64) -> Real64 {
  cpp {{
  return boost::math::digamma(x);
  }}
}

/**
 * The digamma function (derivative of `lgamma`).
 */
function digamma(x:Real32) -> Real32 {
  cpp {{
  return boost::math::digamma(x);
  }}
}

/**
 * The binomial coefficient.
 */
function choose(x:Integer, y:Integer) -> Real64 {
  assert 0 <= x;
  assert 0 <= y;
  assert x >= y;

  if (y == 0) {
    return 1.0;
  } else {
    // see Boost binomial_coefficient function for this implementation
    return 1.0/(Real(y)*beta(Real(y), Real(x - y + 1)));
  }
}

/**
 * The binomial coefficient.
 */
function choose(x:Real64, y:Real64) -> Real64 {
  assert 0.0 <= x;
  assert 0.0 <= y;
  assert x >= y;

  if (y == 0.0) {
    return 1.0;
  } else {
    // see Boost binomial_coefficient function for this implementation
    return 1.0/(y*beta(y, x - y + 1.0));
  }
}

/**
 * The binomial coefficient.
 */
function choose(x:Real32, y:Real32) -> Real32 {
  assert Real32(0.0) <= x;
  assert Real32(0.0) <= y;
  assert x >= y;

  if (y == Real32(0.0)) {
    return Real32(1.0);
  } else {
    // see Boost binomial_coefficient function for this implementation
    return Real32(1.0)/(y*beta(y, x - y + Real32(1.0)));
  }
}

/**
 * Logarithm of the binomial coefficient.
 */
function lchoose(x:Integer, y:Integer) -> Real64 {
  assert 0 <= x;
  assert 0 <= y;
  assert x >= y;

  if (y == 0) {
    return 0.0;
  } else {
    // see Boost binomial_coefficient function for this implementation
    return -log(Real(y)) - lbeta(Real(y), Real(x - y + 1));
  }
}

/**
 * Logarithm of the binomial coefficient.
 */
function lchoose(x:Real64, y:Real64) -> Real64 {
  assert 0.0 <= x;
  assert 0.0 <= y;
  assert x >= y;

  if (y == 0.0) {
    return 0.0;
  } else {
    // see Boost binomial_coefficient function for this implementation
    return -log(y) - lbeta(y, x - y + 1.0);
  }
}

/**
 * Logarithm of the binomial coefficient.
 */
function lchoose(x:Real32, y:Real32) -> Real32 {
  assert Real32(0.0) <= x;
  assert Real32(0.0) <= y;
  assert x >= y;

  if (y == Real32(0.0)) {
    return log(Real32(1.0));
  } else {
    // see Boost binomial_coefficient function for this implementation
    return -log(y) - lbeta(y, x - y + Real32(1.0));
  }
}
/**
 * If-then-else: if `cond` is true then return `x`, else return `y`.
 */
function if_then_else<Type>(cond:Boolean, x:Type, y:Type) -> Type {
  if cond {
    return x;
  } else {
    return y;
  }
}
function lower_inc_gamma(a:Real, x:Real) -> Real {

  // this implementation is taken from https://github.com/scipy/scipy/blob/3af8448114dd4a2755d513edb5a2272a338dc483/scipy/special/cephes/igam.c

  assert x >= Real(0.0);
  assert a >= Real(0.0);

  absxma_a:Real;

  if (a == Real(0.0)) {
    return Real(1.0);
    if (x > Real(0.0)) {
      return Real(1.0);
    } else {
      return nan;
    }
  } else if (x == Real(0.0)) {
    return Real(0.0);
  } else if (isinf(a)) {
    if (isinf(x)) {
      return nan;
    }
    return Real(0.0);
  } else if (isinf(x)) {
    return Real(1.0);
  }

  absxma_a <- abs(x - a) / a;
  if ((a > SMALL) && (a < LARGE) && (absxma_a < SMALLRATIO)) {
    return asymptotic_series(a, x, 1);
  } else if ((a > LARGE) && (absxma_a < LARGERATIO / sqrt(a))) {
    return asymptotic_series(a, x, 1);
  }

  if ((x > Real(1.0)) && (x > a)) {
    // stderr.print("Breaks upper_inc_gamma\n");
    return (Real(1.0) - upper_inc_gamma(a, x));
  }

  return igam_series(a, x);
}


function upper_inc_gamma(a:Real, x:Real) -> Real {

  assert x >= Real(0.0);
  assert a >= Real(0.0);

  absxma_a:Real;

  if (a == Real(0.0)) {
    if (x > Real(0.0)) {
      return Real(0.0);
    } else {
      return nan;
    }

  } else if (x == Real(0.0)) {
    return Real(1.0);
  } else if (isinf(a)) {
    if (isinf(x)) {
      return nan;
    }
    return Real(1.0);
  } else if (isinf(x)) {
    return Real(0.0);
  }
    /* Asymptotic regime where a ~ x; Maddock et. al., "Incomplete Gamma Functions", https://www.boost.org/doc/libs/1_61_0/libs/math/doc/html/math_toolkit/sf_gamma/igamma.html */

  absxma_a <- abs(x - a) / a;

  if ((a > SMALL) && (a < LARGE) && (absxma_a < SMALLRATIO)) {
    // the last parameter is a boolean term whether it's LINVGAM or UPPINVGAM
    return asymptotic_series(a, x, 0);
  } else if ((a > LARGE) && (absxma_a < LARGERATIO / sqrt(a))) {
    return asymptotic_series(a, x, 0);
  }

  if (x > 1.1) {
    if (x < a) {
      return 1.0 - igam_series(a, x);
    } else {
      return igamc_continued_fraction(a, x);
    }

  } else if (x <= 0.5) {
    if (-0.4 / log(x) < a) {
      return 1.0 - igam_series(a, x);
    } else {
      return igamc_series(a, x);
    }
  } else {
    if (x * 1.1 < a) {
      return 1.0 - igam_series(a, x);
    } else {
      return igamc_series(a, x);
    }
  }
}


function igam_fac(a:Real, x:Real) -> Real {
  if (abs(a - x) > Real(0.4) * abs(a)) {
    let ax <- a * log(x) - x - lgamma(a);
    if (ax < -MAXLOG) {
      return Real(0.0);
    }
    return exp(ax);
  }

  let fac <- a + LANCZOS_G - Real(0.5);
  let res <- sqrt(fac / exp(Real(1.0))) / lanczos_sum_expg_scaled(a);

  if ((a < Real(200.0)) && (x < Real(200.0))) {
    res <- res * exp(a - x) * pow(x / fac, a);
  } else {
    let num <- x - a - LANCZOS_G + Real(0.5);
    // changed log1pmx to this
    res <- res * exp(a * (log1p(num / fac) - x) + x * (Real(0.5) - LANCZOS_G) / fac);
  }
  return res;
}


function igamc_continued_fraction(a:Real, x:Real) -> Real {

  let ax <- igam_fac(a, x);
  if (ax == Real(0.0)) {
    return Real(0.0);
  }

  /* continued fraction */
  let y <- Real(1.0) - a;
  let z <- x + y + Real(1.0);
  let c <- Real(0.0);
  let pkm2 <- Real(1.0);
  let qkm2 <- x;
  let pkm1 <- x + Real(1.0);
  let qkm1 <- z * x;
  let ans <- pkm1 / qkm1;

  let flag <- true;
  let i <- 0;
  let t <- Real(0.0);
  let r <- Real(0.0);
  while(i <= 2000 && flag) {
    c <- c + Real(1.0);
    y <- y + Real(1.0);
    z <- z + Real(2.0);
    let yc <- y * c;
    let pk <- pkm1 * z - pkm2 * yc;
    let qk <- qkm1 * z - qkm2 * yc;
    if (qk != Real(0.0)) {
      r <- pk / qk;
      t <- abs((ans - r) / r);
      ans <- r;
    } else {
      t <- Real(1.0);
    }

    pkm2 <- pkm1;
    pkm1 <- pk;
    qkm2 <- qkm1;
    qkm1 <- qk;
    if (abs(pk) > big) {
      pkm2 <- pkm2 * biginv;
      pkm1 <- pkm1 * biginv;
      qkm2 <- qkm2 * biginv;
      qkm1 <- qkm1 * biginv;
    }
    if (t <= MACHEP) {
      flag <- false;
    }
    ++i;
  }

  return (ans * ax);
}


function igam_series(a:Real, x:Real) -> Real {

  let ax <- igam_fac(a, x);
  if (ax == Real(0.0)) {
    return Real(0.0);
  }

  /* power series */
  let r <- a;
  let c <- Real(1.0);
  let ans <- Real(1.0);
  let flag <- true;
  let i <- 0;
  while (i <= 2000 && flag) {
    r <-  r + Real(1.0);
    c <- c * (x / r);
    ans <- ans + c;
    if (c <= MACHEP * ans) {
      flag <- false;
    }
    ++i;
  }
  return (ans * ax / a);
}

function igamc_series(a:Real, x:Real) -> Real {
  let fac <- Real(1.0);
  let sum <- Real(0.0);
  term:Real;
  logx:Real;

  let n <- 1;
  let flag <- true;
  while (n <= 2000 && flag) {
    fac <- fac * (-x / n);
    term <- fac / (a + n);
    sum <- sum + term;
    if (abs(term) <= MACHEP * abs(sum)) {
      flag <- false;
    }
    ++n;
  }

  logx <- log(x);
  term <- -expm1(a * logx - lgamma(a + Real(1.0)));
  return term - exp(a * logx - lgamma(a)) * sum;
}


function asymptotic_series(a:Real, x:Real, func:Integer) -> Real {
    let K <- 25; // from igam.h
    let N <- 25;
    let sgn <- 0;
    let maxpow <- 0;
    let λ <- x / a;
    let σ <- (x - a) / a;
    η:Real;
    res:Real;
    ck:Real;
    ckterm:Real;
    term:Real;
    absterm:Real;
    let absoldterm <- inf;
    etapow:Real[N];
    etapow[1] <- 1;
    let tot <- Real(0.0);
    let afac <- Real(1.0);

  if (func == 1) {
    sgn <- -1;
  } else {
    sgn <- 1;
  }

  if (λ > Real(1.0)) {
    η <- sqrt(Real(-2.0) * (log1p(σ) - σ));
  } else if (λ < 1) {
    η <- -sqrt(Real(-2.0) * (log1p(σ) - σ));
  } else {
    η <- Real(0.0);
  }
  res <- Real(0.5) * erfc(sgn * η * sqrt(a / Real(2.0)));
  let flag1 <- true;
  let k <- 1;
  while (k <= K && flag1) {
    ck <- asymptotic_series_d[k,1];
    let flag2 <- true;
    let n <- 2;
    while (n <= N && flag2) {
      if (n > maxpow) {
        etapow[n] <- η * etapow[n-1];
        maxpow <- maxpow + 1;
      }
      ckterm <- asymptotic_series_d[k, n] * etapow[n];
      ck <- ck + ckterm;
      if (abs(ckterm) < MACHEP * abs(ck)) {
        flag2 <- false;
      }
      ++n;
    }
    term <- ck * afac;
    absterm <- abs(term);
    if (absterm > absoldterm) {
      flag1 <- false;
    }
    tot <- tot + term;
    if (absterm < (MACHEP * abs(tot))) {
      flag1 <- false;
    }
    absoldterm <- absterm;
    afac <- afac / a;
    ++k;
  }
  res <- res + sgn * exp(Real(-0.5) * a * η * η) * tot / sqrt(Real(2.0) * π * a);

  return res;
}


function lanczos_sum_expg_scaled(x:Real) -> Real {
  return ratevl(x, lanczos_sum_expg_scaled_num, length(lanczos_sum_expg_scaled_num) - 1, lanczos_sum_expg_scaled_denom, length(lanczos_sum_expg_scaled_denom) - 1);
}



function ratevl(x:Real, num:Real[_], M:Integer, denom:Real[_], N:Integer) -> Real {
  dir:Integer;

  y:Real;
  let absx <- abs(x);
  let pind <- 1;
  let pval <- Real(0.0);

  if (absx > Real(1.0)) {

    /* Evaluate as a polynomial in 1/x. */
    dir <- -1;
    // point at the last element
    pind <- M + 1;
    y <- Real(1.0) / x;
  } else {

    // point at the first element
    dir <- 1;
    pind <- 1;
    y <- x;
  }

   /* Evaluate the numerator */
   // breaks in the loop below

  // get the value of the first/last element depending on the abs(x)
  let num_ans <- num[pind];
  pind <- pind + dir;
  for i in 2..(M+1) {
    num_ans <- (num_ans * y) + num[pind];
    pind <- pind + dir;
  }

  /* Evaluate the denominator */
  if (absx > Real(1.0)) {
    pind <- N + 1;
  } else {
    pind <- 1;
  }

  let denom_ans <- denom[pind];
  pind <- pind + dir;
  for i in 2..(N+1) {
    denom_ans <- denom_ans * y + denom[pind];
    pind <- pind + dir;
  }

  if (absx > Real(1.0)) {
    let i <- N - M;
    return pow(x, Real(i)) * num_ans / denom_ans;
  } else {
    return num_ans / denom_ans;
  }
}
