/**
 * Convert a scalar to its canonical type.
 */
function canonical(x:Real) -> Real {
  return x;
}

/**
 * Convert a scalar to its canonical type.
 */
function canonical(x:Integer) -> Integer {
  return x;
}

/**
 * Convert a scalar to its canonical type.
 */
function canonical(x:Boolean) -> Boolean {
  return x;
}

/**
 * Convert a vector to its canonical type.
 */
function canonical(x:Real[_]) -> Real[_] {
  return x;
}

/**
 * Convert a vector to its canonical type.
 */
function canonical(x:Integer[_]) -> Integer[_] {
  return x;
}
/**
 * Convert a vector to its canonical type.
 */
function canonical(x:Boolean[_]) -> Boolean[_] {
  return x;
}

/**
 * Convert a matrix to its canonical type.
 */
function canonical(X:Real[_,_]) -> Real[_,_] {
  return X;
}

/**
 * Convert a matrix to its canonical type.
 */
function canonical(X:Integer[_,_]) -> Integer[_,_] {
  return X;
}

/**
 * Convert a matrix to its canonical type.
 */
function canonical(X:Boolean[_,_]) -> Boolean[_,_] {
  return X;
}

/**
 * Convert a matrix to its canonical type.
 */
function canonical(X:LLT) -> Real[_,_] {
  cpp{{
  return X.reconstructedMatrix();
  }}
}
