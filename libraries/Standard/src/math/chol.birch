/**
 * Lower-triangular Cholesky factor of a matrix multiplied by a vector.
 * Computes $Ly$, where $X = LL^\top$.
 */
function cholmul(X:Real[_,_], y:Real[_]) -> Real[_] {
  assert columns(X) == length(y);

  z:Real[rows(X)];
  cpp{{
  numbirch::cholmul(z.rows(), X.data(), X.stride(), y.data(), y.stride(),
      z.data(), z.stride());
  }}
  return z;
}

/**
 * Lower-triangular Cholesky factor of a matrix multiplied by a matrix.
 * Computes $LY$, where $X = LL^\top$.
 */
function cholmul(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert rows(X) == columns(X);
  assert columns(X) == rows(Y);

  Z:Real[rows(X), columns(Y)];
  cpp{{
  numbirch::cholmul(Z.rows(), Z.columns(), X.data(), X.stride(), Y.data(),
      Y.stride(), Z.data(), Z.stride());
  }}
  return Z;
}

/**
 * Outer product of matrix and lower-triangular Cholesky factor of another
 * matrix. Computes $XL^\top$, where $Y = LL^\top$.
 */
function cholouter(X:Real[_,_], Y:Real[_,_]) -> Real[_,_] {
  assert columns(X) == columns(Y);
  assert rows(Y) == columns(Y);

  Z:Real[rows(X), rows(Y)];
  cpp{{
  numbirch::cholouter(Z.rows(), Z.columns(), X.data(), X.stride(), Y.data(),
      Y.stride(), Z.data(), Z.stride());
  }}
  return Z;
}
