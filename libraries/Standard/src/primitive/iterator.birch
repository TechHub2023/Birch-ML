/**
 * Reduction.
 *
 * - iter: Iterator.
 * - init: Initial value.
 * - op: Operator.
 */
function reduce<Type>(iter:Iterator<Type>, init:Type,
    op:\(Type, Type) -> Type) -> Type {
  let result <- init;
  while iter.hasNext() {
    result <- op(result, iter.next());
  }
  return result;
}

/**
 * Sum reduction.
 */
function sum<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Real, y:Real) -> Real {
        return x + y;
      });
}

/**
 * Product reduction.
 */
function product<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Real, y:Real) -> Real {
        return x*y;
      });
}

/**
 * Maximum reduction.
 */
function max<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Real, y:Real) -> Real {
        return max(x, y);
      });
}

/**
 * Minimum reduction.
 */
function min<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Type, y:Type) -> Type {
        return min(x, y);
      });
}
