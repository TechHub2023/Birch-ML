operator<Type> (x:Type[_] == y:Type[_]) -> Boolean;
operator<Type> (x:Type[_] != y:Type[_]) -> Boolean;

operator<Type> (+x:Type[_]) -> Type[_] {
  return x;
}

/**
 * Create a vector filled by a lambda function.
 *
 * - 位: Lambda function.
 * - length: Length of the vector.
 *
 * Returns: The new vector.
 *
 * The lambda function is called once for each element in the new vector,
 * receiving, as its argument, the index of that element, and returning the
 * value at that element.
 */
function vector_lambda<Lambda>(位:Lambda, length:Integer) -> {
  cpp{{
  /* wrap 位 in another lambda function to translate 0-based indices into
   * 1-based indices */
  return numbirch::Array([&](Integer i) { return 位(i + 1); },
      numbirch::make_shape(length));
  }}
}

/**
 * Create vector filled with a given value.
 */
function vector<Type>(x:Type, length:Integer) -> Type[_] {
  cpp{{
  return numbirch::Array(numbirch::make_shape(length), x);
  }}
}

function rows<Type>(x:Type[_]) -> Integer {
  cpp{{
  return x.rows();
  }}
}

function columns<Type>(x:Type[_]) -> Integer {
  return 1;
}

function length<Type>(x:Type[_]) -> Integer {
  return rows(x);
}

function size<Type>(x:Type[_]) -> Integer {
  return rows(x)*columns(x);
}

function value<Type>(x:Type[_]) -> Type[_] {
  return x;
}

function peek<Type>(x:Type[_]) -> Type[_] {
  return x;
}

function eval<Type>(x:Type[_]) -> Type[_] {
  return x;
}

function reval<Type>(x:Type[_]) -> Type[_] {
  return x;
}

function grad<Type,Gradient>(x:Type[_], d:Gradient) {
  //
}

function grad<Type,Gradient>(x:Type[_], d:Gradient, i:Integer) {
  //
}

function label<Type>(x:Type[_], gen:Integer) {
  //
}

function constant<Type>(x:Type[_], gen:Integer) {
  //
}

function constant<Type>(x:Type[_]) {
  //
}
