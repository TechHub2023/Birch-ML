/**
 * Unary map.
 *
 * - x: Operand.
 * - f: Operator.
 *
 * Applies `f` to each element of `X`.
 */
function for_each<Type,Lambda>(x:Type[_], f:Lambda) {
  for i in 1..length(x) {
    f(x[i]);
  }
}

/**
 * Unary map.
 *
 * - X: Operand.
 * - f: Operator.
 *
 * Applies `f` to each element of `X`.
 */
function for_each<Type,Lambda>(X:Type[_,_], f:Lambda) {
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      f(X[i,j]);
    }
  }
}

/**
 * Binary map.
 *
 * - x: First operand.
 * - y: Second operand.
 * - f: Operator.
 */
function for_each<Input1,Input2,Lambda>(x:Input1[_], y:Input2[_], f:Lambda) {
  assert length(x) == length(y);
  for i in 1..length(x) {
    f(x[i], y[i]);
  }
}

/**
 * Binary map.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - f: Operator.
 */
function for_each<Input1,Input2,Lambda>(X:Input1[_,_], Y:Input2[_,_],
    f:Lambda) {
  assert rows(X) == rows(Y);
  assert columns(X) == columns(Y);
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      f(X[i,j], Y[i,j]);
    }
  }
}

/**
 * Ternary map.
 *
 * - x: First operand.
 * - y: Second operand.
 * - z: Third operand.
 * - f: Operator.
 */
function for_each<Input1,Input2,Input3,Lambda>(x:Input1[_], y:Input2[_],
    z:Input3[_], f:Lambda) {
  assert length(x) == length(y);
  assert length(y) == length(z);
  for i in 1..length(x) {
    f(x[i], y[i], z[i]);
  }
}

/**
 * Ternary map.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - Z: Third operand.
 * - f: Operator.
 */
function for_each<Input1,Input2,Input3,Lambda>(X:Input1[_,_], Y:Input2[_,_],
    Z:Input3[_,_], f:Lambda) {
  assert rows(X) == rows(Y);
  assert rows(Y) == rows(Z);
  assert columns(X) == columns(Y);
  assert columns(Y) == columns(Z);
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      f(X[i,j], Y[i,j], Z[i,j]);
    }
  }
}

/**
 * Unary transformation.
 *
 * - x: Operand.
 * - f: Operator.
 */
function transform<Input,Lambda>(x:Input[_], f:Lambda) -> {
  return vector_lambda(\(i:Integer) -> { return f(x[i]); }, length(x));
}

/**
 * Unary transformation.
 *
 * - X: Operand.
 * - f: Operator.
 */
function transform<Input,Lambda>(X:Input[_,_], f:Lambda) -> {
  return matrix_lambda(\(i:Integer, j:Integer) -> {  return f(X[i,j]); },
      rows(X), columns(X));
}

/**
 * Binary transformation.
 *
 * - x: First operand.
 * - y: Second operand.
 * - f: Operator.
 */
function transform<Input1,Input2,Lambda>(x:Input1[_], y:Input2[_],
    f:Lambda) -> {
  assert length(x) == length(y);
  return vector_lambda(\(i:Integer) -> { return f(x[i], y[i]); }, length(x));
}

/**
 * Binary transformation.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - f: Operator.
 */
function transform<Input1,Input2,Lambda>(X:Input1[_,_], Y:Input2[_,_],
    f:Lambda) -> {
  assert rows(X) == rows(Y);
  assert columns(X) == columns(Y);
  return matrix_lambda(\(i:Integer, j:Integer) -> { return f(X[i,j], Y[i,j]); },
      rows(X), columns(X));
}

/**
 * Ternary transformation.
 *
 * - x: First operand.
 * - y: Second operand.
 * - z: Third operand.
 * - f: Operator.
 */
function transform<Input1,Input2,Input3,Lambda>(x:Input1[_], y:Input2[_],
    z:Input3[_], f:Lambda) -> {
  assert length(x) == length(y);
  assert length(x) == length(z);
  return vector_lambda(\(i:Integer) -> { return f(x[i], y[i], z[i]); },
      length(x));
}

/**
 * Ternary transformation.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - Z: Third operand.
 * - f: Operator.
 */
function transform<Input1,Input2,Input3,Lambda>(X:Input1[_,_],
    Y:Input2[_,_], Z:Input3[_,_], f:Lambda) -> {
  assert rows(X) == rows(Y);
  assert rows(X) == rows(Z);
  assert columns(X) == columns(Y);
  assert columns(Y) == columns(Z);
  return matrix_lambda(\(i:Integer, j:Integer) -> {
        return f(X[i,j], Y[i,j], Z[i,j]);
      }, rows(X), columns(X));
}

/**
 * Reduction.
 *
 * - x: Vector.
 * - init: Initial value.
 * - op: Operator.
 */
function reduce<Type,Output,Lambda>(x:Type[_], init:Output, op:Lambda) ->
    Output {
  cpp{{
  #ifdef __cpp_lib_parallel_algorithm
  return std::reduce(x.begin(), x.end(), init, op);
  #else
  return std::accumulate(x.begin(), x.end(), init, [&](auto x, auto y) {
        return op(x, y);
      });
  #endif
  }}
}

/**
 * Reduction.
 *
 * - X: Matrix.
 * - init: Initial value.
 * - op: Operator.
 */
function reduce<Type,Output,Lambda>(X:Type[_,_], init:Output, op:Lambda) ->
    Output {
  result:Type;
  cpp{{
  #ifdef __cpp_lib_parallel_algorithm
  return std::reduce(X.begin(), X.end(), init, op);
  #else
  return std::accumulate(X.begin(), X.end(), init, [&](auto x, auto y) {
        return op(x, y);
      });
  #endif
  }}
}

/**
 * Unary transformation and reduction.
 *
 * - x: First operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input,Output,Lambda1,Lambda2>(x:Input[_],
    init:Output, op1:Lambda1, op2:Lambda2) -> Output {
  let r <- init;
  for n in 1..length(x) {
    r <- op1(r, op2(x[n]));
  }
  return r;
}

/**
 * Unary transformation and reduction.
 *
 * - X: First operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input,Output,Lambda1,Lambda2>(X:Input[_,_],
    init:Output, op1:Lambda1, op2:Lambda2) -> Output {
  let r <- init;
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      r <- op1(r, op2(X[i,j]));
    }
  }
  return r;
}

/**
 * Binary transformation and reduction.
 *
 * - x: First operand.
 * - y: Second operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input1,Input2,Output,Lambda1,Lambda2>(x:Input1[_],
    y:Input2[_], init:Output, op1:Lambda1, op2:Lambda2) -> Output {
  assert length(x) == length(y);
  let r <- init;
  for n in 1..length(x) {
    r <- op1(r, op2(x[n], y[n]));
  }
  return r;
}

/**
 * Binary transformation and reduction.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input1,Input2,Output,Lambda1,Lambda2>(X:Input1[_,_],
    Y:Input2[_,_], init:Output, op1:Lambda1, op2:Lambda2) -> Output {
  assert rows(X) == rows(Y);
  assert columns(X) == columns(Y);
  let r <- init;
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      r <- op1(r, op2(X[i,j], Y[i,j]));
    }
  }
  return r;
}

/**
 * Ternary transformation and reduction.
 *
 * - x: First operand.
 * - y: Second operand.
 * - z: Third operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input1,Input2,Input3,Output,Lambda1,Lambda2>(
    x:Input1[_], y:Input2[_], z:Input3[_], init:Output, op1:Lambda1,
    op2:Lambda2) -> Output {
  assert length(x) == length(y);
  assert length(x) == length(z);
  let r <- init;
  for n in 1..length(x) {
    r <- op1(r, op2(x[n], y[n], z[n]));
  }
  return r;
}

/**
 * Ternary transformation and reduction.
 *
 * - X: First operand.
 * - Y: Second operand.
 * - Z: Third operand.
 * - init: Initial value.
 * - op1: Reduction operator.
 * - op2: Transformation operator.
 */
function transform_reduce<Input1,Input2,Input3,Output,Lambda1,Lambda2>(
    X:Input1[_,_], Y:Input2[_,_], Z:Input3[_,_], init:Output, op1:Lambda1,
    op2:Lambda2) -> Output {
  assert rows(X) == rows(Y);
  assert columns(X) == columns(Y);
  assert rows(X) == rows(Z);
  assert columns(X) == columns(Z);
  let r <- init;
  for i in 1..rows(X) {
    for j in 1..columns(X) {
      r <- op1(r, op2(X[i,j], Y[i,j], Z[i,j]));
    }
  }
  return r;
}

/**
 * Inclusive scan.
 *
 * - x: Vector.
 * - op: Operator.
 */
function inclusive_scan<Type,Lambda>(x:Type[_], init:Type, op:Lambda) ->
    Type[_] {
  y:Type[length(x)];
  if length(x) > 0 {
    cpp{{
    #ifdef __cpp_lib_parallel_algorithm
    std::inclusive_scan(x.begin(), x.end(), y.begin(), init, op);
    #else
    }}
    y[1] <- op(init, x[1]);
    for i in 2..length(x) {
      y[i] <- op(y[i - 1], x[i - 1]);
    }
    cpp{{
    #endif
    }}
  }
  return y;
}

/**
 * Inclusive scan sum.
 */
function inclusive_scan<Type>(x:Type[_]) -> Type[_] {
  return inclusive_scan(x, 0.0, \(x:Type, y:Type) -> Type { return x + y; });
}

/**
 * Exclusive scan.
 *
 * - x: Vector.
 * - init: Initial value.
 * - op: Operator.
 */
function exclusive_scan<Type,Lambda>(x:Type[_], init:Type, op:Lambda) ->
    Type[_] {
  y:Type[length(x)];
  if length(x) > 0 {
    cpp{{
    #ifdef __cpp_lib_parallel_algorithm
    std::exclusive_scan(x.begin(), x.end(), y.begin(), init, op);
    #else
    }}
    y[1] <- init;
    for i in 2..length(x) {
      y[i] <- op(y[i - 1], x[i - 1]);
    }
    cpp{{
    #endif
    }}
  }
  return y;
}

/**
 * Exclusive scan sum.
 */
function exclusive_scan<Type>(x:Type[_]) -> Type[_] {
  return exclusive_scan(x, 0.0, \(x:Type, y:Type) -> Type { return x + y; });
}

/**
 * Adjacent difference.
 *
 * - x: Vector.
 * - op: Operator.
 */
function adjacent_difference<Type,Lambda>(x:Type[_], op:Lambda) -> Type[_] {
  y:Type[length(x)];
  cpp{{
  std::adjacent_difference(x.begin(), x.end(), y.begin(),
      [&](auto x, auto y) { return op(x, y); });
  }}
  return y;
}

/**
 * Is a vector sorted (in ascending order)?
 */
function is_sorted<Type>(x:Type[_]) -> Boolean {
  cpp{{
  return std::is_sorted(x.begin(), x.end());
  }}
}

/**
 * Sort a vector.
 *
 * - x: Vector.
 *
 * Returns: A vector giving the elements of `x` in ascending order.
 */
function sort<Type>(x:Type[_]) -> Type[_] {
  let y <- x;
  cpp{{
  std::sort(y.begin(), y.end());
  }}
  return y;
}

/**
 * Sort a vector.
 *
 * - x: Vector.
 *
 * Returns: A vector giving the indices of elements in `x` in ascending
 * order.
 */
function sort_index<Type>(x:Type[_]) -> Integer[_] {
  let a <- iota(1, length(x));
  cpp{{
  std::sort(a.begin(), a.end(), [=](Integer i, Integer j) {
      return x(i - 1) < x(j - 1);
    });
  }}
  return a;
}

/**
 * Gather.
 *
 * - a: Indices.
 * - x: Source vector.
 *
 * Returns: a vector `y` where `y[n] == x[a[n]]`.
 */
function gather<Type>(a:Integer[_], x:Type[_]) -> Type[_] {
  return vector_lambda(\(i:Integer) -> Type { return x[a[i]]; }, length(a));
}

/**
 * Scatter.
 *
 * - a: Indices.
 * - x: Source vector.
 *
 * Returns: a vector `y` where `y[a[n]] == x[n]`.
 *
 * If the same index appears more than once in `a`, the result is undefined.
 */
function scatter<Type>(a:Integer[_], x:Type[_]) -> Type[_] {
  let N <- length(a);
  y:Type[N];
  for n in 1..N {
    y[a[n]] <- x[n];
  }
  return y;
}

/**
 * Create vector filled with a sequentially incrementing values.
 *
 * - x: Initial value.
 * - length: Length.
 */
function iota<Type>(x:Type, length:Integer) -> Real[_] {
  return vector_lambda(\(i:Integer) -> Type { return x + (i - 1); }, length);
}

/**
 * Maximum reduction.
 */
function max<Type>(x:Type[_]) -> Type {
  assert length(x) > 0;
  if length(x) == 1 {
    return x[1];
  } else {
    return reduce(x[2..length(x)], x[1], \(x:Type, y:Type) -> {
          return max(x, y);
        });
  }
}

/**
 * Minimum reduction.
 */
function min<Type>(x:Type[_]) -> Type {
  assert length(x) > 0;
  if length(x) == 1 {
    return x[1];
  } else {
    return reduce(x[2..length(x)], x[1], \(x:Type, y:Type) -> Type {
        return min(x, y);
      });
  }
}
