/**
 * Convert vector to matrix with single row.
 */
function row<Type>(x:Type[_]) -> Type[_,_] {
  return matrix_lambda(\(i:Integer, j:Integer) -> { return x[j]; }, 1,
      length(x));
}

/**
 * Obtain the `i`th row of a matrix.
 */
function row<Type>(X:Type[_,_], i:Integer) -> Type[_] {
  return X[i,1..columns(X)];
}

/**
 * Convert vector to matrix with single column.
 */
function column<Type>(x:Type[_]) -> Type[_,_] {
  return matrix_lambda(\(i:Integer, j:Integer) -> { return x[i]; }, 1,
      length(x));
}

/**
 * Obtain the `j`th column of a matrix.
 */
function column<Type>(X:Type[_,_], j:Integer) -> Type[_] {
  return X[1..rows(X),j];
}

/**
 * Create a matrix filled by a lambda function.
 *
 * @param 位 Lambda function.
 * @param rows Number of rows.
 * @param columns Number of columns.
 *
 * @return The new matrix.
 *
 * The lambda function is called once for each element in the new matrix,
 * receiving, as its argument, the row and column indices of that
 * element, and returning the value at that element.
 */
function matrix_lambda<Lambda>(位:Lambda, rows:Integer, columns:Integer) -> {
  cpp{{
  using T = decltype(wait(位(1,1)));
  return numbirch::Array<T,2>(numbirch::make_shape(rows, columns),
      [&](const int64_t s) {
        int j = (s - 1)/rows + 1;
        int i = (s - 1)%rows + 1;
        return 位(i, j);
      });
  }}
}

/**
 * Create matrix filled with a given scalar value.
 *
 * @param x The value.
 * @param rows Number of rows.
 * @param columns Number of columns.
 */
function matrix<Type>(x:Type, rows:Integer, columns:Integer) -> {
  cpp{{
  return numbirch::Array(numbirch::make_shape(rows, columns), x);
  }}
}
