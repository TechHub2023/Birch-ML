operator<Type> (X:Type[_,_] == Y:Type[_,_]) -> Boolean;
operator<Type> (X:Type[_,_] != Y:Type[_,_]) -> Boolean;

operator<Type> (+X:Type[_,_]) -> Type[_,_] {
  return X;
}

/**
 * Convert vector to matrix with single row.
 */
function row<Type>(x:Type[_]) -> Type[_,_] {
  return matrix_lambda(\(i:Integer, j:Integer) -> { return x[j]; }, 1,
      length(x));
}

/**
 * Obtain the `i`th row of a matrix.
 */
function row<Type>(X:Type[_,_], i:Integer) -> Type[_] {
  return X[i,1..columns(X)];
}

/**
 * Convert vector to matrix with single column.
 */
function column<Type>(x:Type[_]) -> Type[_,_] {
  return matrix_lambda(\(i:Integer, j:Integer) -> { return x[i]; }, 1,
      length(x));
}

/**
 * Obtain the `j`th column of a matrix.
 */
function column<Type>(X:Type[_,_], j:Integer) -> Type[_] {
  return X[1..rows(X),j];
}

/**
 * Vectorize a matrix by stacking its columns. This is the inverse operation
 * of `mat()`.
 *
 * - X: The matrix.
 */
function vec<Type>(X:Type[_,_]) -> Type[_] {
  let R <- rows(X);
  let C <- columns(X);
  return vector_lambda(\(i:Integer) -> Type {
        return X[mod(i - 1, R) + 1, (i - 1)/R + 1];
      }, R*C);
}

/**
 * Matrixize a vector by unstacking it into columns. This is the inverse
 * operation of `vec()`.
 *
 * - x: The vector.
 * - columns: The number of columns. Must be a factor of the length of `x`.
 */
function mat<Type>(x:Type[_], columns:Integer) -> Type[_,_] {
  assert mod(length(x), columns) == 0;
  let R <- length(x)/columns;
  let C <- columns;
  return matrix_lambda(\(i:Integer, j:Integer) -> Type {
        return x[(j - 1)*R + i];
      }, R, C);
}

/**
 * Create identity matrix.
 *
 * - length: Number of rows/columns.
 */
function identity(length:Integer) -> Real[_,_] {
  return diagonal(1.0, length);
}

/**
 * Create a matrix filled by a lambda function.
 *
 * - 位: Lambda function.
 * - rows: Number of rows.
 * - columns: Number of columns.
 *
 * Returns: The new matrix.
 *
 * The lambda function is called once for each element in the new matrix,
 * receiving, as its argument, the row and column indices of that
 * element, and returning the value at that element.
 */
function matrix_lambda<Lambda>(位:Lambda, rows:Integer, columns:Integer) -> {
  cpp{{
  /* wrap 位 in another lambda function to translate 0-based serial (row-wise)
   * indices into 1-based row/column indices */
  return libbirch::make_array_from_lambda(libbirch::make_shape(rows,
      columns), [&](int64_t i) { return 位(i/columns + 1, i%columns + 1); });
  }}
}

/**
 * Create matrix filled with a given scalar value.
 *
 * - x: The value.
 * - rows: Number of rows.
 * - columns: Number of columns.
 */
function matrix<Type>(x:Type, rows:Integer, columns:Integer) -> Type[_,_] {
  cpp{{
  return libbirch::make_array_from_value<Type>(libbirch::make_shape(rows,
      columns), x);
  }}
}

function rows<Type>(x:Type[_,_]) -> Integer {
  cpp{{
  return x.rows();
  }}
}

function columns<Type>(x:Type[_,_]) -> Integer {
  cpp{{
  return x.columns();
  }}
}

function length<Type>(x:Type[_,_]) -> Integer {
  return rows(x);
}

function size<Type>(x:Type[_,_]) -> Integer {
  return rows(x)*columns(x);
}

function value<Type>(x:Type[_,_]) -> Type[_,_] {
  return x;
}

function peek<Type>(x:Type[_,_]) -> Type[_,_] {
  return x;
}

function eval<Type>(x:Type[_,_]) -> Type[_,_] {
  return x;
}

function reval<Type>(x:Type[_,_]) -> Type[_,_] {
  return x;
}

function grad<Type,Gradient>(x:Type[_,_], d:Gradient) {
  //
}

function grad<Type,Gradient>(x:Type[_,_], d:Gradient, i:Integer, j:Integer) {
  //
}

function label<Type>(x:Type[_,_], gen:Integer) {
  //
}

function constant<Type>(x:Type[_,_], gen:Integer) {
  //
}

function constant<Type>(x:Type[_,_]) {
  //
}
