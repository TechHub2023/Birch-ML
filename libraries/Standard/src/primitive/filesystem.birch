cpp{{
#if defined(HAVE_FILESYSTEM)
#include <filesystem>
namespace fs = std::filesystem;
#elif defined(HAVE_EXPERIMENTAL_FILESYSTEM)
#include <experimental/filesystem>
namespace fs = std::experimental::filesystem;
#else
#include <boost/filesystem.hpp>
namespace fs = boost::filesystem;
#endif
}}

READ:Integer <- 1;
WRITE:Integer <- 2;
APPEND:Integer <- 3;

/**
 * Create a directory.
 *
 * @param path Path of the directory, or path of a file in the directory.
 */
function mkdir(path:String) {
  cpp{{
  fs::path p = path;
  if (!fs::is_directory(p)) {
    p = p.parent_path();
  }
  fs::create_directories(p);
  }}
}

/**
 * Open a file for reading.
 *
 * @param path Path of the file.
 *
 * @return File handle.
 *
 * If `path` includes non-existing directory, that directory is created (if
 * possible). The file is locked for reading (if possible).
 */
function fopen(path:String) -> File {
  return fopen(path, READ);
}

/**
 * Open a file.
 *
 * @param path Path of the file.
 * @param mode The mode, either `READ`, `WRITE`, or `APPEND`.
 *
 * @return File handle.
 *
 * If `path` includes non-existing directory, that directory is created (if
 * possible). The file is locked for reading or writing as appropriate (if
 * possible).
 */
function fopen(path:String, mode:Integer) -> File {
  assert mode == READ || mode == WRITE || mode == APPEND;
  s:String;
  if mode == READ {
    s <- "r";
  } else if mode == WRITE {
    s <- "w";
    cpp{{
    fs::path p = path;
    if (!p.parent_path().empty()) {
      fs::create_directories(p.parent_path());
    }
    }}
  } else if (mode == APPEND) {
    s <- "a";
  }
  cpp{{
  auto f = ::fopen(path.c_str(), s.c_str());
  if (!f) {
    error(String("could not open file ") + path + String("."));
  }
  lockf(fileno(f), F_LOCK, 0);
  return f;
  }}
}

/**
 * File extension of a path.
 */
function extension(path:String) -> String {
  ext:String;
  cpp{{
  fs::path f(path);
  ext = f.extension().string();
  }}
  return ext;
}
