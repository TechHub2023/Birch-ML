/**
 * Base class for objects supporting delayed sampling.
 *
 * ```mermaid
 * classDiagram
 *    Delay <|-- Expression
 *    Delay <|-- Distribution
 *    Expression <|-- Random
 *
 *    link Delay "../Delay/"
 *    link Expression "../Expression/"
 *    link Random "../Random/"
 * ```
 *
 * Classes derived from Delay support delayed sampling. Ostensibly this
 * includes all Distribution and Expression classes, although among Expression
 * classes only Random actually implements the interface.
 *
 * ### Design & Implementation
 *
 * The $M$-path for delayed sampling is kept as a singly-linked list of Delay
 * objects directed from root to leaf along the $M$-path. While all objects in
 * the path are ostensibly of abstract type Delay, they are alternately of
 * concrete type Random and Distribution (`R*` denotes a Random object, `D*` a
 * Distribution object):
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3))
 * ```
 *
 * The root is necessarily of type Random, but the leaf may be of either type
 * Distribution (as above) or, if a Random has been associated with that
 * Distribution, of type Random. In the latter case the final node is
 * doubly-linked:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3))
 *    R3((R3)) .-> D3
 * ```
 *
 * While, if the leaf node is of type Random, it has a backward link to its
 * associated Distribution, note that all other nodes of type Random only have
 * a forward link to the distribution associated with their child node on the
 * $M$-path.
 *
 * User code maintains external references to the Random objects, but
 * typically not the Distribution objects. Delayed sampling operations are
 * triggered by the use of these references.
 *
 * !!! tip
 *     One advantage of this arrangement is that variable elimination
 *     naturally occurs as a result of garbage collection. Once no references
 *     remain to a Random that is the root of an $M$-path it is collected,
 *     usually along with the next Distribution in the list. Not only has it
 *     then been *marginalized out* in establishing the $M$-path, but it has
 *     now been *eliminated* as the program has discarded it without it ever
 *     being sampled.
 *
 * Events on the list are triggered by user operations on the Random objects,
 * to which the user code maintains references.
 *
 * The *graft* operation occurs when the leaf node is a Random, and that
 * Random enters the construction of a new Distribution object in a form that
 * allows it to be marginalized out. The Distribution is appened to the list
 * and the existing backward link remove:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4))
 * ```
 *
 * If a Random is subsequently associated with the Distribution it is added as
 * before:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4)) --> R4((R4))
 *    R4((R4)) .-> D4
 * ```
 *
 * If a Random leaf node must be *realized* it simply simulates a value from
 * its associated distribution and removes its backward link:
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4)) --> R4
 * ```
 *
 *
 * ```mermaid
 * graph LR
 *    R1((R1)) --> D2((D2)) --> R2((R2)) --> D3((D3)) --> R3((R3)) --> D4((D4'))
 * ```
 */
abstract class Delay {
  /**
   * Child on the $M$-path.
   */
  child:Delay?;

  /**
   * Set the $M$-path child of this node.
   *
   * - child: The child node.
   */
  function graft(child:Delay) {
    assert !this.child?;
    this.child <- child;
  }

  /**
   * Prune the $M$-path from below this node.
   */
  function prune() -> Delay {
    assert !child?;
    return this;
  }
}
