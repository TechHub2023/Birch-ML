/**
 * Standard event handler.
 *
 * - delayed: Enable delayed sampling?
 *
 * ```mermaid
 * classDiagram
 *    Handler <|-- PlayHandler
 *    Handler <|-- MoveHandler
 *    link Handler "../Handler/"
 *    link PlayHandler "../PlayHandler/"
 *    link MoveHandler "../MoveHandler/"
 * ```
 */
class PlayHandler(delayed:Boolean) < Handler {
  /**
   * Is delayed sampling enabled?
   */
  delayed:Boolean <- delayed;

  final override function doHandle(event:Event) {
    /* double dispatch to one of the more specific doHandle() functions */
    event.accept(this);
  }

  final override function doHandle(record:Record, event:Event) {
    /* double dispatch to one of the more specific doHandle() functions */
    event.accept(record, this);
  }

  function doHandle<Value>(event:SimulateEvent<Value>) {
    event.x <- event.p.value();
  }

  function doHandle<Value>(event:ObserveEvent<Value>) {
    w <- w + event.p.observe(event.x);
  }

  function doHandle<Value>(event:AssumeEvent<Value>) {
    if event.x.hasValue() {
      w <- w + event.p.observe(event.x.value());
    } else if delayed {
      event.x.assume(event.p);
    } else {
      event.x <- event.p.value();
    }
  }

  function doHandle(event:FactorEvent) {
    w <- w + event.w.value();
  }

  function doHandle<Value>(record:SimulateRecord<Value>,
      event:SimulateEvent<Value>) {
    event.x <- record.x;
  }

  function doHandle<Value>(record:ObserveRecord<Value>,
      event:ObserveEvent<Value>) {
    /* observe events are replayed in the same way they are played, it's
     * only necessary to check that the observed values actually match */
    assert record.x == event.x;
    doHandle(event);
  }

  function doHandle<Value>(record:AssumeRecord<Value>,
      event:AssumeEvent<Value>) {
    if event.x.hasValue() {
      /* assume events with a value already assigned are replayed in the
       * same way they are played, it's only necessary to check that the
       * observed values actually match */
      assert record.x.hasValue() && record.x.value() == event.x.value();
      w <- w + event.p.observe(event.x.value());
    } else if delayed {
      if record.x.hasValue() {
        event.p.clamp(record.x.value());
      }
      event.x.assume(event.p);
    } else {
      assert record.x.hasValue();
      event.p.clamp(record.x.value());
      event.x <- event.p.value();
    }
  }

  function doHandle(record:FactorRecord, event:FactorEvent) {
    /* factor events are replayed in the same way they are played */
    w <- w + event.w.value();
  }
}

/**
 * Create a PlayHandler.
 */
function PlayHandler(delayed:Boolean) -> PlayHandler {
  return construct<PlayHandler>(delayed);
}
