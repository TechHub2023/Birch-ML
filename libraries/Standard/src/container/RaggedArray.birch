/**
 * Two-dimensional array where each row has a varying length. Internally, this
 * is stored in one contiguous array for constant-time random access.
 *
 * - Type: Element type. Must be default-constructible.
 */
final class RaggedArray<Type> {
  /**
   * Elements.
   */
  values:Type[_];

  /**
   * Offset into `values` for each row.
   */
  offsets:Integer[_];
  
  /**
   * Number of columns in each row.
   */
  sizes:Integer[_];
  
  /**
   * Is this empty? A RaggedArray is considered empty if it has no rows. A
   * RaggedArray with one or more rows is not considered empty, even if those
   * rows have no elements.
   */
  function empty() -> Boolean {
    return length(offsets) == 0;
  }

  /**
   * Clear all rows.
   */
  function clear() {
    values:Type[_];
    offsets:Integer[_];
    sizes:Integer[_];
    
    this.values <- values;
    this.offsets <- offsets;
    this.sizes <- sizes;
  }

  /**
   * Number of elements.
   */
  function count() -> Integer {
    return length(values);
  }

  /**
   * Number of rows.
   */
  function size() -> Integer {
    return length(offsets);
  }
  
  /**
   * Number of elements for a given row.
   *
   * - i: Row.
   */
  function size(i:Integer) -> Integer {
    return sizes[i];
  }
  
  /**
   * Get an element.
   *
   * - i: Row.
   * - j: Column.
   */
  function get(i:Integer, j:Integer) -> Type {
    return values[serial(i, j)];
  }

  /**
   * Get a row.
   *
   * - i: Row.
   */
  function get(i:Integer) -> Type[_] {
    return values[from(i)..to(i)];
  }

  /**
   * Set an element.
   *
   * - i: Row.
   * - j: Column.
   * - x: Value.
   */
  function set(i:Integer, j:Integer, x:Type) {
    values[serial(i, j)] <- x;
  }

  /**
   * Set a row.
   *
   * - i: Row.
   * - x: Values.
   *
   * The number of columns in the row must match the number of columns in
   * `x`.
   */
  function set(i:Integer, x:Type[_]) {
    values[from(i)..to(i)] <- x;
  } 

  /**
   * Remove the front row.
   */
  function popFront() {
    assert size() > 0;
    if size() == 1 {
      clear();
    } else {
      let ncols <- sizes[1];
      cpp{{
      this->offsets.erase(0);
      this->sizes.erase(0);
      }}
      if ncols > 0 {
        cpp{{
        this->values.erase(0, ncols);
        }}
        for k in 1..length(offsets) {
          offsets[k] <- offsets[k] - ncols;
        }
      }
    }
  }

  /**
   * Remove the front element from a specified row.
   *
   * - i: Row.
   */
  function popFront(i:Integer) {
    assert size(i) > 0;
    let j <- offsets[i];
    cpp{{
    this->values.erase(j - 1);
    }}
    for k in (i + 1)..length(offsets) {
      offsets[k] <- offsets[k] - 1;
    }
    sizes[i] <- sizes[i] - 1;
  }

  /**
   * Add a new row at the back.
   */
  function pushBack() {
    let nrows <- length(offsets);
    let nvalues <- length(values);
    cpp{{    
    this->offsets.insert(nrows, nvalues + 1);
    this->sizes.insert(nrows, 0);
    }}
  }

  /**
   * Add an element to the back of a specified row.
   *
   * - i: Row.
   * - x: Value.
   */
  function pushBack(i:Integer, x:Type) {
    let j <- offsets[i] + sizes[i];
    cpp{{
    this->values.insert(j - 1, x);
    }}
    for k in (i + 1)..size() {
      offsets[k] <- offsets[k] + 1;
    }
    sizes[i] <- sizes[i] + 1;
  }

  /**
   * Add a new default-constructed element to the back of the specified row,
   * and return the element.
   */
  function pushBack(i:Integer) -> Type {
    let x <- make<Type>();
    if x? {
      pushBack(i, x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Obtain an iterator over rows.
   *
   * Return: an iterator across entire rows from top to bottom.
   */
  function walk() -> Iterator<Type[_]> {
    return RaggedArrayRowIterator<Type>(this);
  }

  /**
   * Obtain an iterator over columns.
   *
   * - i: Row.
   *
   * Return: an iterator across the elements of the given row, from left to
   * right.
   */
  function walk(i:Integer) -> Iterator<Type> {
    return RaggedArrayElementIterator<Type>(this, i);
  }

  /**
   * First serial index of a row.
   *
   * - i: Row.
   */
  function from(i:Integer) -> Integer {
    assert 1 <= i && i <= size();
    assert offsets[i] != 0;  // not an empty row
    return offsets[i];
  }
  
  /**
   * Last serial index of a row.
   *
   * - i: Row.
   */
  function to(i:Integer) -> Integer {
    assert 1 <= i && i <= size();
    assert offsets[i] != 0;  // not an empty row
    return offsets[i] + sizes[i] - 1;
  }
  
  /**
   * Serial index of row and column.
   *
   * - i: Row.
   * - j: Column.
   */
  function serial(i:Integer, j:Integer) -> Integer {
    assert 1 <= i && i <= size();
    assert 1 <= j && j <= sizes[i];
    return from(i) + j - 1;
  }

 function read(buffer:Buffer) {
    let row <- buffer.walk();
    while row.hasNext() {
      pushBack();
      let col <- row.next().walk();
      while col.hasNext() {
        let x <- col.next().get<Type>();
        if x? {
          pushBack(size(), x!);
        }
      }
    }
  }

  function write(buffer:Buffer) {
    for i in 1..size() {
      buffer.push(get(i));
    }
  }
}
