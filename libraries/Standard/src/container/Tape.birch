/**
 * Stateful tape container. Maintains a current position along a tape that is
 * infinite in both directions. Provides constant-time operations at that
 * position, and linear-time operations elsewhere.
 *
 * - Type: Element type. Must be default-constructible.
 *
 * The data structure is arranged as two singly-linked lists about the current
 * position, one recursing backward through elements behind the current
 * position, the other recursing forward through elements at and ahead of the
 * current position:
 *
 * ```mermaid
 * graph LR
 *    this --"previous()"--> nm1[n-1] --> nm2[n-2] --> nm3[n-3] --> nm4(...)
 *    this --"current()"--> n[n] --> np1[n+1] --> np2[n+1] --> np3(...)
 * ```
 *
 * The member function `current()` is used to retrieve the current ($n$th)
 * element, which can be done in $O(1)$ time. The call `previous()` retrieves
 * the previous ($n-1$th) element, similarly in $O(1)$ time. The call
 * `current(k)` may be used to retrieve any other elements using an offset
 * relative to the current position. For positive $k$, retrieving the $n-k$th
 * element takes $O(k-1)$ time, and the $n+k$th element $O(k)$ time. Because
 * the tape is considered infinite, elements are default-constructed as
 * necessary.
 *
 * Changing the current position in the list (i.e. seeking) is achieved with
 * the `seek()`, `backward()`, `forward()`, `rewind()` and `fastForward()`
 * member functions. It is up to the user to seek as appropriate to ensure
 * efficient operations, according to the use-case.
 *
 * !!! tip
 *     As a recursive and singly-linked data structure, Tape has excellent
 *     performance properties under Birch's lazy deep copy mechanism.
 *
 * !!! attention
 *     Large recursive data structures can cause an execution stack overflow
 *     on destruction that usually manifests as a segmentation fault. Possible
 *     solutions include:
 *
 *     1. Use an array (`Type[_]`) or [Array](../Array) instead.
 *     2. Remove items one-by-one before the object goes out of scope.
 *     3. Increase the execution stack size with the shell command `ulimit`.
 */
final class Tape<Type> {
  /**
   * Elements at and ahead of the current position.
   */
  ahead:TapeNode<Type>?;

  /**
   * Number of elements at and ahead of the current position.
   */
  aheadCount:Integer <- 0;

  /**
   * Elements behind the current position.
   */
  behind:TapeNode<Type>?;

  /**
   * Number of elements behind the current position.
   */
  behindCount:Integer <- 0;

  /**
   * Number of elements (that are set).
   */
  function size() -> Integer {
    return aheadCount + behindCount;
  }

  /**
   * Is this empty (no elements are set)?
   */
  function empty() -> Boolean {
    return aheadCount == 0 && behindCount == 0;
  }

  /**
   * Clear all elements (unset all elements).
   */
  function clear() {
    ahead <- nil;
    behind <- nil;
    aheadCount <- 0;
    behindCount <- 0;
  }

  /**
   * Get the first element (that is set).
   */
  function front() -> Type {
    assert !empty();
    if behind? {
      return behind!.bottom().x;
    } else {
      return ahead!.x;
    }
  }

  /**
   * Get the last element (that is set).
   */
  function back() -> Type {
    assert !empty();
    if ahead? {
      return ahead!.bottom().x;
    } else {
      return behind!.x;
    }
  }

  /**
   * Move the current position forward one. This performs the following
   * sequence:
   *
   *   1. If the element at the current position is not initialized, it is
   *      default-constructed.
   *   2. The current position is moved forward one.
   *   3. If the element at the new position is not initialized, it remains
   *      uninitialized.
   */
  function forward() {
    if !ahead? {
      ahead <- TapeNode<Type>();
      aheadCount <- aheadCount + 1;
    }
    let node <- ahead!;
    ahead <- node.next;
    node.next <- behind;
    behind <- node;
    aheadCount <- aheadCount - 1;
    behindCount <- behindCount + 1;
  }

  /**
   * Move the current position backward one. This performs the following
   * sequence:
   *
   *   1. If the element at the current position is not initialized, it is
   *      default-constructed.
   *   2. The current position is moved backward one.
   *   3. If the element at the new position is not initialized, it remains
   *      uninitialized.
   */
  function backward() {
    if !behind? {
      behind <- TapeNode<Type>();
      behindCount <- behindCount + 1;
    }
    let node <- behind!;
    behind <- node.next;
    node.next <- ahead;
    ahead <- node;
    aheadCount <- aheadCount + 1;
    behindCount <- behindCount - 1;
  }

  /**
   * Rewind to one before the first element (that is set).
   */
  function rewind() {
    while behind? {
      backward();
    }
  }

  /**
   * Fast-forward to one after the last element (that is set).
   */
  function fastForward() {
    while ahead? {
      forward();
    }
  }

  /**
   * Seek to a new position, offset from the current position.
   *
   * - k: Offset from the current position. May be positive, negative or zero.
   *      In the case of zero, this is a null operation.
   *
   * Elements are default-constructed as necessary between the current
   * position and the requested position.
   */
  function seek(k:Integer) {
    if k > 0 {
      for i in 1..k {
        forward();
      }
    } else if k < 0 {
      for i in 1..abs(k) {
        backward();
      }
    }
  }

  /**
   * Get an element, offset from the current position.
   *
   * - k: Offset from the current position. May be positive, negative or zero.
   *      In the case of zero, this is equivalent to `current()` without
   *      arguments.
   *
   * Elements are default-constructed as necessary between the current
   * position and the requested position.
   */
  function current(k:Integer) -> Type {
    if k >= 0 {
      if !ahead? {
        ahead <- TapeNode<Type>();
        aheadCount <- aheadCount + 1;
      }
      return ahead!.down(k).x;
    } else {
      if !behind? {
        behind <- TapeNode<Type>();
        behindCount <- behindCount + 1;
      }
      return behind!.down(abs(k) - 1).x;
    }
  }

  /**
   * Get the element at the current position.
   */
  function current() -> Type {
    if !ahead? {
      ahead <- TapeNode<Type>();
      aheadCount <- aheadCount + 1;
    }
    return ahead!.x;
  }

  /**
   * Get the element one before the current position.
   */
  function previous() -> Type {
    if !behind? {
      behind <- TapeNode<Type>();
      behindCount <- behindCount + 1;
    }
    return behind!.x;
  }

  /**
   * Get the element one after the current position.
   */
  function next() -> Type {
    return current(+1);
  }

  /**
   * Insert an element before the first (that is set).
   *
   * - x: Value.
   */
  function pushFront(x:Type) {
    if behind? {
      behind!.bottom().next <- TapeNode<Type>(x);
    } else {
      behind <- TapeNode<Type>(x);
    }
    behindCount <- behindCount + 1;
  }

  /**
   * Insert a new default-constructed element before the first (that is set).
   */
  function pushFront() {
    if behind? {
      behind!.bottom().next <- TapeNode<Type>();
    } else {
      behind <- TapeNode<Type>();
    }
    behindCount <- behindCount + 1;
  }

  /**
   * Insert an element after the last (that is set).
   *
   * - x: Value.
   */
  function pushBack(x:Type) {
    if ahead? {
      ahead!.bottom().next <- TapeNode<Type>(x);
    } else {
      ahead <- TapeNode<Type>(x);
    }
    aheadCount <- aheadCount + 1;
  }

  /**
   * Insert a new default-constructed element after the last (that is set).
   */
  function pushBack() {
    if ahead? {
      ahead!.bottom().next <- TapeNode<Type>();
    } else {
      ahead <- TapeNode<Type>();
    }
    aheadCount <- aheadCount + 1;
  }

  /**
   * Remove the first element (that is set). If this is at the current
   * position, then all elements move backward one position, as if `erase()`
   * was called instead.
   */
  function popFront() {
    assert !empty();
    if behind? {
      if behind!.next? {
        behind!.popBottom();
      } else {
        behind <- nil;
      }
      behindCount <- behindCount - 1;
    } else {
      erase();
    }
  }

  /**
   * Remove the last element (that is set). If this is at the current
   * position, then all elements move forward one position, as if
   * `eraseBefore()` was called instead.
   */
  function popBack() {
    assert !empty();
    if ahead? {
      if ahead!.next? {
        ahead!.popBottom();
      } else {
        ahead <- nil;
      }
      aheadCount <- aheadCount - 1;
    } else {
      eraseBefore();
    }
  }

  /**
   * Insert an element at the current position. All elements ahead of it move
   * backward one position.
   *
   * - x: Value.
   */
  function insert(x:Type) {
    let node <- TapeNode<Type>(x);
    node.next <- ahead;
    ahead <- node;
    aheadCount <- aheadCount + 1;
  }

  /**
   * Insert a new default-constructed element at the current position. All
   * elements ahead of it move forward one position.
   */
  function insert() {
    let node <- TapeNode<Type>();
    node.next <- ahead;
    ahead <- node;
    aheadCount <- aheadCount + 1;
  }

  /**
   * Insert an element before the current position. All elements behind it
   * move backward one position.
   *
   * - x: Value.
   */
  function insertBefore(x:Type) {
    let node <- TapeNode<Type>(x);
    node.next <- behind;
    behind <- node;
    behindCount <- behindCount + 1;
  }

  /**
   * Insert a new default-constructed element before the current position.
   * All elements behind it move backward one position.
   */
  function insertBefore() {
    let node <- TapeNode<Type>();
    node.next <- behind;
    behind <- node;
    behindCount <- behindCount + 1;
  }

  /**
   * Remove an element at the current position. All elements ahead of it move
   * backward one position.
   */
  function erase() {
    ahead <- ahead!.next;
  }

  /**
   * Remove an element before the current position. All elements behind it
   * move forward one position.
   */
  function eraseBefore() {
    behind <- behind!.next;
  }
  
  /**
   * Rewind and obtain an iterator.
   *
   * Return: an iterator across elements (that are set) from front to back.
   */
  function walk() -> Iterator<Type> {
    rewind();
    return TapeIterator<Type>(ahead);
  }

  function read(buffer:Buffer) {
    clear();
    let iter <- buffer.walk();
    while iter.hasNext() {
      /* tricky, but works for both value and class types */
      let x <- make<Type>();
      let y <- iter.next().get(x);
      if y? {
        x <- Type?(y);  // cast needed for y:Object?
        pushBack(x!);
      }
    }
    rewind();
  }

  function write(buffer:Buffer) {
    let iter <- walk();
    while iter.hasNext() {
      buffer.push(iter.next());
    }
  }
}
