/**
 * Filter a model.
 *
 *     birch filter [options...]

 * - `--config`: Name of the configuration file, if any.
 *
 * - `--seed`: Random number seed. If used, overrides `seed` in the config
 *   file, which in turns overrides random entropy.
 *
 * - `--model`: Name of the model class. If used, overrides `model.class` in
 *   the config file.
 *
 * - `--filter`: Name of the filter class. If used, overrides
 *   `filter.class` in the config file, which in turn overrides the default
 *   of [ParticleFilter](../ParticleFilter).
 *
 * - `--kernel`: Name of the kernel class. If used, overrides
 *   `kernel.class` in the config file, which in turn overrides the default
 *   of [LangevinKernel](../LangevinKernel).
 *
 * - `--nsteps`: Number of steps to take. If used, this overrides `nsteps` in
 *   the config file, which in turn overrides `filter.nsteps` (deprecated) in
 *   the config file, which in turn overrides the number of steps derived from
 *   the input file, which in turn overrides the default of 0.
 *
 * - `--nforecasts`: Number of forecasts at each step. If used, this overrides
 *   `nforecasts` in the config file, which in turn overrides
 *   `filter.nforecasts` (deprecated) in the config file, which in turn
 *   overrides the number of forecasts derived from the input file, which in
 *   turn overrides the default of 0.
 *
 * - `--input`: Name of the input file, if any. If used, overrides `input` in
 *   the config file.
 *
 * - `--output`: Name of the output file, if any. If used, overrides `output`
 *   in the config file.
 *
 * - `--quiet true`: Don't display a progress bar.
 */
program filter(
    config:String?,
    seed:Integer?,
    model:String?,
    filter:String?,
    kernel:String?,
    nsteps:Integer?,
    nforecasts:Integer?,
    input:String?,
    output:String?,
    quiet:Boolean <- false) {
  /* config */
  configBuffer:Buffer;
  if config? {
    configBuffer <- slurp(config!);
  }

  /* random number generator */
  if !seed? {
    seed <-? configBuffer.get<Integer>("seed");
  }
  if seed? {
    global.seed(seed!);
  } else {
    global.seed();
  }

  /* model */
  modelBuffer:Buffer;
  modelBuffer <-? configBuffer.get("model");
  if model? {
    modelBuffer.set("class", model!);
  }
  let theModel <- make<Model>(modelBuffer);
  if !theModel? {
    error("could not create model; the model class should be given as " +
        "model.class in the config file, or `--model` on the command " +
        "line, and should derive from Model.");
  }

  /* filter */
  filterBuffer:Buffer;
  filterBuffer <-? configBuffer.get("filter");
  if filter? {
    filterBuffer.set("class", filter!);
  } else if !filterBuffer.get("class")? {
    filterBuffer.set("class", "ParticleFilter");
  }
  let theFilter <- make<ParticleFilter>(filterBuffer);
  if !theFilter? {
    error("could not create filter; the filter class should be given as " +
        "filter.class in the config file, or --filter on the command " +
        "line, and should derive from ParticleFilter.");
  }

  /* kernel */
  kernelBuffer:Buffer;
  kernelBuffer <-? configBuffer.get("kernel");
  if kernel? {
    kernelBuffer.set("class", kernel!);
  }
  let theKernel <- make<Kernel>(kernelBuffer);

  /* number of steps */
  if !nsteps? {
    nsteps <-? configBuffer.get<Integer>("nsteps");
    if !nsteps? {
      nsteps <-? filterBuffer.get<Integer>("nsteps");
      if nsteps? {
        warn("filter.nsteps in the config file is deprecated, replace " +
           "with nsteps in the config file, or --nsteps on the " +
           "command line.");
      }
    }
  }

  /* number of forecasts */
  if !nforecasts? {
    nforecasts <-? configBuffer.get<Integer>("nforecasts");
    if !nforecasts? {
      nforecasts <-? filterBuffer.get<Integer>("nforecasts");
      if nforecasts? {
        warn("filter.nforecasts in the config file is deprecated, replace " +
           "with nforecasts in the config file, or --nforecasts on the " +
           "command line.");
      }
    }
  }

  /* input */
  let inputPath <- configBuffer.get<String>("input");
  inputPath <-? input;
  inputReader:Reader?;
  if inputPath? && inputPath! != "" {
    inputReader <- make_reader(inputPath!);
  }

  /* output */
  let outputPath <- configBuffer.get<String>("output");
  outputPath <-? output;
  outputWriter:Writer?;
  if outputPath? && outputPath! != "" {
    outputWriter <- make_writer(outputPath!);
  }

  /* progress bar */
  bar:ProgressBar;
  if !quiet {
    bar.update(0.0);
  }

  /* filter */
  let t <- 0;
  while (nsteps? && t <= nsteps!) || (!nsteps? && inputReader!.hasNext()) {
    /* input */
    inputBuffer:Buffer;
    filterBuffer:Buffer <- inputBuffer;
    if inputReader? && inputReader!.hasNext() {
      inputBuffer <- inputReader!.next();
      filterBuffer <- inputBuffer;
      filterBuffer <-? inputBuffer.get("filter");
    }

    /* start or step filter */
    if t == 0 {
      theFilter!.filter(theModel!, filterBuffer);
    } else if theKernel? {
      theFilter!.filter(t, filterBuffer, theKernel!);
    } else {
      theFilter!.filter(t, filterBuffer);
    }

    /* forecast */
    let forecastSize <- inputBuffer.size("forecast");
    let forecastIterator <- inputBuffer.walk("forecast");
    let forecastBuffer <- make_buffer();
    if nforecasts? {
      forecastSize <- nforecasts!;
    }
    if forecastSize > 0 {
      bridge(theFilter!);
      let theFilter' <- copy(theFilter!);
      theFilter'.trigger <- 1.0;  // force resample
      theFilter'.resample(t);
      for t' in (t + 1)..(t + forecastSize) {
        if forecastIterator.hasNext() {
          theFilter'.filter(t', forecastIterator.next());
        } else {
          theFilter'.filter(t', make_buffer());
        }
        if outputWriter? {
          forecastBuffer.push(t, theFilter'.x);
        }
      }
    }

    /* output */
    if outputWriter? {
      let outputBuffer <- make_buffer();
      if t > 0 {
        outputBuffer.set("filter", t, theFilter!.x);
      }
      outputBuffer.set("lweight", theFilter!.w);
      outputBuffer.set("ess", theFilter!.ess);
      outputBuffer.set("lnormalize", theFilter!.lnormalize);
      outputBuffer.set("npropagations", theFilter!.npropagations);
      outputBuffer.set("raccepts", theFilter!.raccepts);
      outputBuffer.set("forecast", forecastBuffer);
      outputWriter!.push(outputBuffer);
    }
    if !quiet && nsteps? {
      bar.update((t + 1.0)/(nsteps! + 1.0));
    }    
    t <- t + 1;
  }

  /* finalize */
  if inputReader? {
    inputReader!.close();
  }
  if outputWriter? {
    outputWriter!.close();
  }
}
