/**
 * Particle Gibbs sampler.
 *
 * ```mermaid
 * classDiagram
 *    ParticleSampler <|-- ConditionalParticleSampler
 *    ConditionalParticleSampler <|-- ParticleGibbsSampler
 *    link ParticleSampler "../ParticleSampler/"
 *    link ConditionalParticleSampler "../ConditionalParticleSampler/"
 *    link ParticleGibbsSampler "../ParticleGibbsSampler/"
 * ```
 */
class ParticleGibbsSampler < ConditionalParticleSampler {
  /**
   * Should ancestor sampling be used?
   */
  ancestor:Boolean <- false;

  override function sample(filter:ConditionalParticleFilter, model:Model,
      input:Buffer) {
    if filter.r? {
      /* Gibbs update of parameters */
      r:Tape<Record> <- filter.r!;
      r':Tape<Record>;

      let x' <- clone(model);
      let handler <- PlayHandler(true);
      handler.output <- r';
      with (handler) {
        x'.read(input);
        x'.simulate();
      }
      let w' <- handler.w;

      handler <- PlayHandler(filter.delayed);
      handler.input <- filter.r!;
      with (handler) {
        for t in 1..filter.r!.size() {
          // no input needed here, already in the replay trace
          x'.simulate(t);
        }
      }
      w' <- w' + handler.w;

      x' <- clone(model);
      handler <- PlayHandler(filter.delayed);
      handler.input <- r';
      with (handler) {
        // no input needed here, already in the replay trace
        x'.simulate();
      }
      filter.r!.rewind();
    }
    super.sample(filter, model, input);
  }

  override function sample(filter:ConditionalParticleFilter, t:Integer,
      input:Buffer) {
    if filter.r? && ancestor {
      let w' <- filter.w;
      dynamic parallel for n in 1..filter.nparticles {
        let x' <- clone(filter.x[n]);
        let r' <- clone(filter.r!);
        let handler <- PlayHandler(filter.delayed);
        handler.input <- r';
        with (handler) {
          x'.m.read(t, input);
          x'.m.simulate(t);
          w'[n] <- w'[n] + handler.w;
        }
      }
      filter.b <- global.ancestor(w');
    }
    super.sample(filter, t, input);
  }

  override function read(buffer:Buffer) {
    super.read(buffer);
    ancestor <-? buffer.get<Boolean>("ancestor");
  }
}
