/**
 * Langevin Markov kernel, with Metropolis adjustment.
 *
 * ```mermaid
 * classDiagram
 *    Kernel <|-- LangevinKernel
 *    link Kernel "../Kernel/"
 *    link LangevinKernel "../LangevinKernel/"
 * ```
 */
class LangevinKernel < Kernel {
  override function move(y:Particle) -> Real {
    let naccepts <- 0;
    if nmoves > 0 {
      y.hoist();
      if y.π? {
        let π <- y.π!;

        /* initialize */
        π.grad(1.0);
        let p <- π.eval();
        let (x, g) <- π.args();
        let m <- length(x);
        let δ <- vector(scale, m);

        /* step */
        let μ <- x + hadamard(g, δ);  // mean of proposal from initial state
        let accept <- true;  // was most recent particle accepted?
        for n in 1..nmoves {
          /* proposed state */
          let z <- standard_gaussian(m);
          let p' <- π.move(μ + hadamard(sqrt(2.0*δ), z));
          π.grad(1.0);
          let (x', g') <- π.args();
          let μ' <- x' + hadamard(g', δ);

          /* proposal correction */
          let q <- (pow(x - μ', 2.0) - pow(x' - μ, 2.0))/δ;
          let r <- -0.25*sum(where(isfinite(q), q, 0.0));

          /* accept/reject */
          accept <- log(simulate_uniform(0.0, 1.0)) <= p' - p + r;
          if accept {
            naccepts <- naccepts + 1;
            p <- p';
            x <- x';
            g <- g';
            μ <- μ';
          }
        }
        if !accept {
          π.move(x);  // last proposal was rejected, restore correct arguments
        }

        /* clean up and apply lag for next time */
        y.π <- nil;
        y.constant(nlags);
      }
    }
    return cast<Real>(naccepts)/nmoves;
  }
}
