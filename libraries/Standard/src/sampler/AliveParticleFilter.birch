/**
 * Alive particle filter. When propagating and weighting particles, the
 * alive particle filter continues until it obtains $N$ particles with
 * non-zero weight, rather than $N$ particles in total, as with the standard
 * particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 * ```
 */
class AliveParticleFilter < ParticleFilter {
  override function simulate(t:Integer, input:Buffer) {
    let x0 <- copy(x);
    let w0 <- w;
    let p <- vector(0, nparticles);  // number of propagations per particle
    let a <- resample_systematic(w);  // initial resample

    /* apply bridge finding to all particles in case needed, but actual copy()
     * is performed as-needed below */
    parallel for n in 1..nparticles {
      bridge(x0[n]);
    }

    /* propagate */
    parallel for n in 1..nparticles {
      do {
        x[n] <- global.copy(x0[a[n]]);
        p[n] <- p[n] + 1;

        let m <- x[n].m;
        let h <- x[n].h;
        with h {
          h.w <- 0.0;
          x[n].m.read(t, input);
          x[n].m.simulate(t);
          w[n] <- h.w;
        }
        if !isfinite(w[n]) {
          a[n] <- global.ancestor(w0);  // try again
        }
      } while !isfinite(w[n]);
    }
    collect();

    /* discard a random particle to debias (random, rather than last, as
     * particles are not exchangeable for all resamplers) */
    w[simulate_uniform_int(1, nparticles)] <- -inf;

    npropagations <- sum(p);
    (ess, lsum) <- resample_reduce(w);
    lnormalize <- lnormalize + lsum - log(npropagations - 1);
  }
}
