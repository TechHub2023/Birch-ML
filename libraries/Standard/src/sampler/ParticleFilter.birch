/**
 * Particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 * ```
 */
class ParticleFilter {
  /**
   * Particles.
   */
  x:Particle[_];

  /**
   * Log weights.
   */
  w:Real[_];

  /**
   * Ancestor indices.
   */
  a:Integer[_];

  /**
   * Chosen particle index. This is used for drawing a single particle from
   * the filter in e.g. [ParticleSampler](../ParticleSampler).
   */
  b:Integer <- 0;

  /**
   * Logarithm of sum of weights.
   */
  lsum:Real <- 0.0;

  /**
   * Effective sample size.
   */
  ess:Real <- 0.0;

  /**
   * Log normalizing constant.
   */
  lnormalize:Real <- 0.0;

  /**
   * Number of propagations. This is not the same as the number of particles;
   * the number of propagations performed may, according to the filter type,
   * differ from the number of particles, such as for alive and rejection
   * control particle filters.
   */
  npropagations:Integer <- 0;

  /**
   * Accept rate of moves.
   */
  raccepts:Real <- 0.0;

  /**
   * Number of particles.
   */
  nparticles:Integer <- 1;

  /**
   * Threshold for resampling. Resampling is performed whenever the
   * effective sample size, as a proportion of `N`, drops below this
   * threshold.
   */
  trigger:Real <- 0.7;

  /**
   * Should delayed sampling be used?
   */
  delayed:Boolean <- true;

  /**
   * Should automatic differentiation be used?
   */
  autodiff:Boolean <- false;

  /**
   * Create a particle of the type required for this filter.
   */
  function particle(model:Model) -> Particle {
    return construct<Particle>(model, delayed, autodiff);
  }

  /**
   * Start filter.
   *
   * - model: Model.
   * - input: Input buffer.
   */
  function filter(model:Model, input:Buffer) {
    x <- global.copy(particle(model), nparticles);
    w <- vector(0.0, nparticles);
    a <- iota(1, nparticles);
    b <- 1;
    ess <- nparticles;
    lsum <- 0.0;
    lnormalize <- 0.0;
    npropagations <- nparticles;
    simulate(input);
    reduce();
  }

  /**
   * Step filter.
   *
   * - t: Step number, beginning at 1.
   * - input: Input buffer.
   */
  function filter(t:Integer, input:Buffer) {
    resample(t);
    simulate(t, input);
    reduce();
  }

  /**
   * Step filter.
   *
   * - t: Step number, beginning at 1.
   * - input: Input buffer.
   * - κ: Markov kernel.
   */
  function filter(t:Integer, input:Buffer, κ:Kernel) {
    resample(t);
    move(t, κ);
    simulate(t, input);
    reduce();
  }

  /**
   * Start particles.
   */
  function simulate(input:Buffer) {
    parallel for n in 1..nparticles {
      let m <- x[n].m;
      let h <- x[n].h;
      with h {
        h.w <- 0.0;
        m.read(input);
        m.simulate();
        w[n] <- w[n] + h.w;
      }
    }
  }

  /**
   * Step particles.
   */
  function simulate(t:Integer, input:Buffer) {
    parallel for n in 1..nparticles {
      let m <- x[n].m;
      let h <- x[n].h;
      with h {
        h.w <- 0.0;
        m.read(t, input);
        m.simulate(t);
        w[n] <- w[n] + h.w;
      }
    }
  }

  /**
   * Compute reductions, such as effective sample size and normalizing
   * constant estimate.
   */
  function reduce() {
    (ess, lsum) <- resample_reduce(w);
    lnormalize <- lnormalize + lsum - log(nparticles);
    b <- ancestor(w);
    if b == 0 {
      error("particle filter degenerated");
    }
  }

  /**
   * Resample particles.
   *
   * - t: The step number.
   */
  function resample(t:Integer) {
    if ess <= trigger*nparticles {
      a <- resample_systematic(w);
      w <- vector(0.0, nparticles);
      copy();
      collect();
    } else {
      /* normalize weights to sum to nparticles */
      a <- iota(1, nparticles);
      w <- w - vector(lsum - log(nparticles), nparticles);
    }
  }

  /**
   * Copy particles during resampling.
   */
  function copy() {
    /* apply bridge finding to any particle with at least two offspring, using
     * the fact that the ancestor vector is in ascending order */
    dynamic parallel for n in 2..nparticles {
      if a[n] == a[n - 1] && (n <= 2 || a[n] != a[n - 2]) {
        bridge(x[a[n]]);
      }
    }

    /* permute the ancestry vector so that it has the property a[n] == n where
     * n has at least one offspring */
    a <- permute_ancestors(a);

    /* copy particles where we have a[n] != n */
    dynamic parallel for n in 1..nparticles {
      if a[n] != n {
        x[n] <- global.copy(x[a[n]]);
      }
    }
  }

  /**
   * Move particles during resampling.
   *
   * - t: Step number.
   * - κ: Markov kernel.
   */
  function move(t:Integer, κ:Kernel) {
    let α <- vector(0.0, nparticles);  // acceptance rates for each particle
    parallel for n in 1..nparticles {
      α[n] <- κ.apply(t, x[n]);
    }
    raccepts <- sum(α)/nparticles;  // average acceptance rate
  }

  override function read(buffer:Buffer) {
    nparticles <-? buffer.get<Integer>("nparticles");
    trigger <-? buffer.get<Real>("trigger");
    delayed <-? buffer.get<Boolean>("delayed");
    autodiff <-? buffer.get<Boolean>("autodiff");
  }
}
