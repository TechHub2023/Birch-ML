/**
 * Particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 * ```
 */
class ParticleFilter {
  /**
   * Particles.
   */
  x:Array<Particle>;

  /**
   * Log weights.
   */
  w:Real[_];

  /**
   * Time of last resample.
   */
  r:Integer <- 0;

  /**
   * Logarithm of sum of weights.
   */
  lsum:Real <- 0.0;

  /**
   * Effective sample size.
   */
  ess:Real <- 0.0;

  /**
   * Log normalizing constant.
   */
  lnormalize:Real <- 0.0;

  /**
   * Number of propagations. This is not the same as the number of particles;
   * the number of propagations performed may, according to the filter type,
   * differ from the number of particles, such as for alive and rejection
   * control particle filters.
   */
  npropagations:Integer <- 0;

  /**
   * Accept rate of moves.
   */
  raccepts:Real <- 0.0/0.0;

  /**
   * Number of particles.
   */
  nparticles:Integer <- 1;

  /**
   * Threshold for resampling. Resampling is performed whenever the
   * effective sample size, as a proportion of `N`, drops below this
   * threshold.
   */
  trigger:Real <- 0.7;

  /**
   * Should delayed sampling be used?
   */
  delayed:Boolean <- true;

  /**
   * Should automatic differentiation be used?
   */
  autodiff:Boolean <- false;

  /**
   * Create a particle of the type required for this filter.
   */
  function particle(model:Model) -> Particle {
    return construct<Particle>(model);
  }

  /**
   * Start filter.
   *
   * - model: Model.
   * - input: Input buffer.
   */
  function filter(model:Model, input:Buffer) {
    x.clear();
    for n in 1..nparticles {
      x.pushBack(particle(global.copy(model)));
    }
    w <- vector(0.0, nparticles);
    r <- 0;
    ess <- nparticles;
    lsum <- 0.0;
    lnormalize <- 0.0;
    npropagations <- nparticles;
    simulate(input);
  }

  /**
   * Step filter.
   *
   * - t: Step number, beginning at 1.
   * - input: Input buffer.
   * - κ: Markov kernel.
   */
  function filter(t:Integer, input:Buffer, κ:Kernel?) {
    resample(t, κ);
    simulate(t, input);
  }

  /**
   * Step filter.
   *
   * - t: Step number, beginning at 1.
   * - input: Input buffer.
   */
  function filter(t:Integer, input:Buffer) {
    filter(t, input, nil);
  }

  /**
   * Start particles.
   *
   * - input: Input buffer.
   */
  function simulate(input:Buffer) {
    parallel for n in 1..nparticles {
      let h <- construct<Handler>(delayed, autodiff);
      with h {
        x[n].m.read(input);
        x[n].m.simulate();
      }
      if h.π? {
        if x[n].π? {
          x[n].π <- box(x[n].π! + h.π!);
        } else {
          x[n].π <- h.π!;
        }
      }
      w[n] <- w[n] + h.w;
    }
    (ess, lsum) <- resample_reduce(w);
    lnormalize <- lnormalize + lsum - log(nparticles);
    npropagations <- nparticles;
  }

  /**
   * Step particles.
   *
   * - t: Step number.
   * - input: Input buffer.
   */
  function simulate(t:Integer, input:Buffer) {
    parallel for n in 1..nparticles {
      let h <- construct<Handler>(delayed, autodiff);
      with h {
        x[n].m.read(t, input);
        x[n].m.simulate(t);
      }
      if h.π? {
        if x[n].π? {
          x[n].π <- box(x[n].π! + h.π!);
        } else {
          x[n].π <- h.π!;
        }
      }
      w[n] <- w[n] + h.w;
    }
    (ess, lsum) <- resample_reduce(w);
    lnormalize <- lnormalize + lsum - log(nparticles);
    npropagations <- nparticles;
  }

  /**
   * Resample particles.
   *
   * - t: Step number.
   * - κ: Markov kernel.
   */
  function resample(t:Integer, κ:Kernel?) {
    if r < t {
      r <- t;
      raccepts <- 0.0/0.0;
      if ess <= trigger*nparticles {
        let (a, o) <- resample_systematic(w);
        /* pre-compute and bridge-find */
        dynamic parallel for n in 1..nparticles {
          if κ? && x[n].π? && o[n] >= 1 {
            /* will survive, perform pre-computations */
            κ!.precompute(t, x[n].π!);
          }
          if o[n] >= 2 {
            /* will be copied at least once, perform bridge-finding */
            bridge(x[n]);
          }
        }

        /* copy */
        dynamic parallel for n in 1..nparticles {
          if a[n] != n {
            /* a[n] != n implies o[n] >= 2; see permute_ancestors() */
            x[n] <- copy(x[a[n]]);
          }
        }
        collect();

        /* move */
        if κ? {
          let α <- vector(0.0, nparticles);  // acceptance rate per particle
          parallel for n in 1..nparticles {
            if x[n].π? {
              α[n] <- κ!.move(t, x[n].π!);
            }
          }
          raccepts <- sum(α)/nparticles;
        }

        /* reset weights */
        w <- vector(0.0, nparticles);
      } else {
        /* normalize weights to sum to nparticles */
        w <- w - vector(lsum - log(nparticles), nparticles);
      }
    }
  }

  /**
   * Reconfigure particle filter.
   *
   * - delayed: Should delayed sampling be used?
   * - autodiff: Should automatic differentiation be used?
   */
  function reconfigure(delayed:Boolean, autodiff:Boolean) {
    this.delayed <- delayed;
    this.autodiff <- autodiff;
  }

  override function read(buffer:Buffer) {
    nparticles <-? buffer.get<Integer>("nparticles");
    trigger <-? buffer.get<Real>("trigger");
    delayed <-? buffer.get<Boolean>("delayed");
    autodiff <-? buffer.get<Boolean>("autodiff");
  }
}
