/*
 * Test the pmf of a univariate Boolean distribution.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - lazy: Use lazy version?
 */
function test_pdf(π:Distribution<Boolean>, N:Integer, lazy:Boolean) {
  /* simulate, counting the occurrence of each value */
  let k <- 0;
  for n in 1..N {
    if π.simulate() {
      k <- k + 1;
    }
  }

  /* compare pdf to count */
  let failed <- false;
  let ε <- 5.0/sqrt(N);
  
  p:Real;
  q:Real;
  if lazy && π.supportsLazy() {
    p <- exp(π.logpdfLazy(box(true))!.value());
    q <- exp(π.logpdfLazy(box(false))!.value());
  } else {
    p <- π.pdf(true);
    q <- π.pdf(false);
  }
  let δ <- abs(p - scalar<Real>(k)/N);
  if 10 < N && !(δ <= ε) {  // careful of nans
    failed <- true;
    stderr.print("***failed*** on true, " + δ + " > " + ε + "\n");
  }
  δ <- abs(q - scalar<Real>(N - k)/N);
  if 10 < N && !(δ <= ε) {  // careful of nans
    failed <- true;
    stderr.print("***failed*** on false, " + δ + " > " + ε + "\n");
  }
  if failed {
    exit(1);
  }
}

/*
 * Test the pmf of a univariate discrete distribution.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - lazy: Use lazy version?
 */
function test_pdf(π:Distribution<Integer>, N:Integer, lazy:Boolean) {  
  /* lower bound on interval */
  let from <- π.lower();
  if !from? {
    from <- π.quantile(1.0e-6);
    assert from?;
  }

  /* upper bound on interval */
  let to <- π.upper();
  if !to? {
    to <- π.quantile(1.0 - 1.0e-6);
    if !to? {
      /* search for a rough upper bound for the interval */
      let u <- 50;
      let p <- 0.0;
      do {
        u <- 2*u;
        if lazy && π.supportsLazy() {
          p <- exp(π.logpdfLazy(box(u))!.value());
        } else {
          p <- π.pdf(u);
        }
      } while p > 1.0e-6;
      to <- u;
    }
  }

  /* simulate, counting the occurrence of each value */
  let count <- vector(0, to! - from! + 1);
  for n in 1..N {
    j:Integer;
    if lazy && π.supportsLazy() {
      j <- π.simulateLazy()!;
    } else {
      j <- π.simulate();
    }
    let i <- j - from! + 1;
    if 1 <= i && i <= length(count) {
      count[i] <- count[i] + 1;
    }
  }

  /* compare sum of pdf to counts */
  let failed <- false;
  for x in from!..to! {
    p:Real;
    if lazy && π.supportsLazy() {
      p <- exp(π.logpdfLazy(box(x))!.value());
    } else {
      p <- π.pdf(x);
    }
    let δ <- abs(p - scalar<Real>(count[x - from! + 1])/N);
    let ε <- 5.0/sqrt(N);
    if 10 < N && !(δ <= ε) {  // careful of nans
      failed <- true;
      stderr.print("***failed*** on value " + x + ", " + δ + " > " + ε + "\n");
    }
  }
  if failed {
    exit(1);
  }
}

/*
 * Test a pdf.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - B: Number of samples in each batch for tuning Metropolis sampler.
 * - S: Metropolis sampler skip.
 * - lazy: Use lazy version?
 */
function test_pdf(π:Distribution<Real>, N:Integer, B:Integer, S:Integer,
    lazy:Boolean) {
  x1:Real[N];
  x2:Real[N];
  
  /* iid samples */
  for n in 1..N {
    x1[n] <- π.simulate();
  }
  
  /* compute the shape for a Gaussian proposal using the iid samples */
  let μ <- sum(x1)/N;
  let σ2 <- dot(x1)/N - μ*μ;
  
  /* scale this proposal to get a reasonable acceptance rate */
  let done <- false;
  do {
    let a <- 0.0;
    x:Real;
    if lazy && π.supportsLazy() {
      x <- π.simulateLazy()!;
    } else {
      x <- π.simulate();
    }
    l:Real;
    if lazy && π.supportsLazy() {
      l <- π.logpdfLazy(box(x))!.value();
    } else {
      l <- π.logpdf(x);
    }

    for n in 1..B {
      let x' <- simulate_gaussian(x, σ2);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/B;
      }
    }
    //stderr.print("trial acceptance rate: " + a + "\n");
    if a < 0.4 {
      σ2 <- 0.5*σ2;
    } else if a > 0.5 {
      σ2 <- 1.5*σ2;
    } else {
      done <- true;
    }
  } while !done;

  /* apply the Metropolis sampler */
  let a <- 0.0;
  x:Real;
  if lazy && π.supportsLazy() {
    x <- π.simulateLazy()!;
  } else {
    x <- π.simulate();
  }
  l:Real;
  if lazy && π.supportsLazy() {
    l <- π.logpdfLazy(box(x))!.value();
  } else {
    l <- π.logpdf(x);
  }
  for n in 1..N {
    for s in 1..S {
      let x' <- simulate_gaussian(x, σ2);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/(N*S);
      }
    }
    x2[n] <- x;
  }
  //stderr.print("final acceptance rate: " + a + "\n");
  
  /* test distance between the iid and Metropolis samples */
  if !pass(x1, x2) {
    exit(1);
  }
}

/*
 * Test a multivariate pdf.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - B: Number of samples in each batch for tuning Metropolis sampler.
 * - S: Metropolis sampler skip.
 * - lazy: Use lazy version?
 */
function test_pdf(π:Distribution<Real[_]>, N:Integer, B:Integer, S:Integer,
    lazy:Boolean) {  
  let D <- rows(π.simulate());

  X1:Real[N,D];
  X2:Real[N,D];
  
  /* iid samples */
  for n in 1..N {
    X1[n,1..D] <- π.simulate();
  }
  
  /* compute the shape for a Gaussian proposal using the iid samples */
  let μ <- vector(0.0, D);
  let Σ <- matrix<Real>(0.0, D, D);
  for n in 1..N {
    let x <- X1[n,1..D];
    μ <- μ + x;
    Σ <- Σ + outer(x);
  }
  μ <- μ/N;
  Σ <- Σ/N - outer(μ);
  
  /* scale this proposal to get a reasonable acceptance rate */
  let done <- false;
  do {
    let a <- 0.0;
    x:Real[_];
    if lazy && π.supportsLazy() {
      x <- π.simulateLazy()!;
    } else {
      x <- π.simulate();
    }
    l:Real;
    if lazy && π.supportsLazy() {
      l <- π.logpdfLazy(box(x))!.value();
    } else {
      l <- π.logpdf(x);
    }

    for n in 1..B {
      let x' <- simulate_multivariate_gaussian(x, Σ);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/B;
      }
    }
    //stderr.print("trial acceptance rate: " + a + "\n");
    if a < 0.2 {
      Σ <- 0.5*Σ;
    } else if a > 0.25 {
      Σ <- 1.5*Σ;
    } else {
      done <- true;
    }
  } while !done;

  /* apply the Metropolis sampler */
  let a <- 0.0;
  x:Real[_];
  if lazy && π.supportsLazy() {
    x <- π.simulateLazy()!;
  } else {
    x <- π.simulate();
  }
  l:Real;
  if lazy && π.supportsLazy() {
    l <- π.logpdfLazy(box(x))!.value();
  } else {
    l <- π.logpdf(x);
  }
  for n in 1..N {
    for s in 1..S {
      let x' <- simulate_multivariate_gaussian(x, Σ);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/(N*S);
      }
    }
    X2[n,1..D] <- x;
  }
  //stderr.print("final acceptance rate: " + a + "\n");
  
  /* test distance between the iid and Metropolis samples */
  if !pass(X1, X2) {
    exit(1);
  }
}

/*
 * Test a matrix pdf.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - B: Number of samples in each batch for tuning Metropolis sampler.
 * - S: Metropolis sampler skip.
 * - lazy: Use lazy version?
 */
function test_pdf(π:Distribution<Real[_,_]>, N:Integer, B:Integer, S:Integer,
    lazy:Boolean) {
  let R <- rows(π.simulate());
  let C <- columns(π.simulate());

  X1:Real[N,R*C];
  X2:Real[N,R*C];
  
  /* iid samples */
  for n in 1..N {
    X1[n,1..R*C] <- vec(π.simulate());
  }
  
  /* compute the shape for a Gaussian proposal using the iid samples */
  let μ <- vector(0.0, R*C);
  let Σ <- matrix<Real>(0.0, R*C, R*C);
  for n in 1..N {
    let x <- X1[n,1..R*C];
    μ <- μ + x;
    Σ <- Σ + outer(x);
  }
  μ <- μ/N;
  Σ <- Σ/N - outer(μ);
  
  /* scale this proposal to get a reasonable acceptance rate */
  let done <- false;
  do {
    let a <- 0.0;
    x:Real[_,_];
    l:Real;
    if lazy && π.supportsLazy() {
      x <- π.simulateLazy()!;
      l <- π.logpdfLazy(box(x))!.value();
    } else {
      x <- π.simulate();
      l <- π.logpdf(x);
    }
    for n in 1..B {
      let x' <- mat(simulate_multivariate_gaussian(vec(x), Σ), C);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/B;
      }
    }
    //stderr.print("trial acceptance rate: " + a + "\n");
    if a < 0.2 {
      Σ <- 0.5*Σ;
    } else if a > 0.25 {
      Σ <- 1.5*Σ;
    } else {
      done <- true;
    }
  } while !done;

  /* apply the Metropolis sampler */
  let a <- 0.0;
  x:Real[_,_];
  l:Real;
  if lazy && π.supportsLazy() {
    x <- π.simulateLazy()!;
    l <- π.logpdfLazy(box(x))!.value();
  } else {
    x <- π.simulate();
    l <- π.logpdf(x);
  }
  for n in 1..N {
    for s in 1..S {
      let x' <- mat(simulate_multivariate_gaussian(vec(x), Σ), C);
      l':Real;
      if lazy && π.supportsLazy() {
        l' <- π.logpdfLazy(box(x'))!.value();
      } else {
        l' <- π.logpdf(x');
      }
      if log(simulate_uniform(0.0, 1.0)) <= l' - l {
        /* accept */
        x <- x';
        l <- l';
        a <- a + 1.0/(N*S);
      }
    }
    X2[n,1..R*C] <- vec(x);
  }
  //stderr.print("final acceptance rate: " + a + "\n");
  
  /* test distance between the iid and Metropolis samples */
  if !pass(X1, X2) {
    exit(1);
  }
}
