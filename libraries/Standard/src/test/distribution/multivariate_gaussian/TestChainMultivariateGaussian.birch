class TestChainMultivariateGaussian < TestModel {
  x:Random<Real[_]>[5];
  μ:Real[3];
  Σ:Real[3,3];

  function initialize() {
    for i in 1..3 {
      μ[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..3 {
        Σ[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ <- outer(Σ) + diagonal(1.0e-2, 3);
  }

  function simulate() {
    x[1] ~ MultivariateGaussian(μ, Σ);
    x[2] ~ MultivariateGaussian(x[1], Σ);
    x[3] ~ MultivariateGaussian(x[2], Σ);
    x[4] ~ MultivariateGaussian(x[3], Σ);
    x[5] ~ MultivariateGaussian(x[4], Σ);
  }

  function forward() -> Real[_] {
    y:Real[15];
    for i in 1..5 {
      y[(i-1)*3+1..i*3] <- x[i].value();
    }
    return y;
  }

  function backward() -> Real[_] {
    y:Real[15];
    for i in 0..4 {
      assert !x[5-i].hasValue();
      y[(4-i)*3+1..(5-i)*3] <- x[5-i].value();
    }
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[15];
    for i in 1..5 {
      y[(i-1)*3+1..i*3] <- x[i].eval();
    }
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[15];
    for i in 0..4 {
      assert !x[5-i].hasValue();
      y[(4-i)*3+1..(5-i)*3] <- x[5-i].eval();
    }
    return y;
  }

  function size() -> Integer {
    return 15;
  }
}

program test_conjugacy_chain_multivariate_gaussian(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestChainMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}
