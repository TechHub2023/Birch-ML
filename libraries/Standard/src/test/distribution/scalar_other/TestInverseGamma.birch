class TestInverseGamma < TestModel {
  σ2:Random<Real>;
  α:Random<Real>;
  β:Random<Real>;

  override function initialize() {
    α ~ Uniform(2.1, 10.0);
    β ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
  }

  override function forward() -> Real[_] {
    return [σ2.eval()];
  }

  override function backward() -> Real[_] {
    return [σ2.eval()];
  }

  function marginal() -> Distribution<Real> {
    return σ2.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_inverse_gamma(N:Integer <- 10000, B:Integer <- 100,
    S:Integer <- 5, lazy:Boolean <- false) {
  m:TestInverseGamma;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_inverse_gamma(N:Integer <- 10000) {
  m:TestInverseGamma;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_inverse_gamma(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestInverseGamma;
  test_grad(m, N, backward);
}
