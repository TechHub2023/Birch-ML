class TestNormalInverseGammaGaussian < TestModel {
  σ2:Random<Real>;
  μ:Random<Real>;
  x:Random<Real>;

  μ_0:Real;
  a2:Real;
  α:Random<Real>;
  β:Random<Real>;

  override function initialize() {
    μ_0 <~ Uniform(-10.0, 10.0);
    a2 <~ Uniform(0.0, 2.0);
    α ~ Uniform(2.1, 10.0);
    β ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ Gaussian(μ_0, a2*σ2);
    x ~ Gaussian(μ, σ2);
  }

  override function forward() -> Real[_] {
    y:Real[3];
    y[1] <- σ2.eval();
    y[2] <- μ.eval();
    y[3] <- x.eval();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[3];
    assert !x.hasValue();
    y[3] <- x.eval();
    assert !μ.hasValue();
    y[2] <- μ.eval();
    assert !σ2.hasValue();
    y[1] <- σ2.eval();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 3;
  }
}

program test_conjugacy_normal_inverse_gamma_gaussian(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestNormalInverseGammaGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_normal_inverse_gamma_gaussian(N:Integer <- 10000,
    B:Integer <- 100, S:Integer <- 5, lazy:Boolean <- false) {
  m:TestNormalInverseGammaGaussian;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_normal_inverse_gamma_gaussian(N:Integer <- 10000) {
  m:TestNormalInverseGammaGaussian;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_normal_inverse_gamma_gaussian(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestNormalInverseGammaGaussian;
  test_grad(m, N, backward);
}
