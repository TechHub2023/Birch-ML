class TestInverseGamma < TestModel {
  σ2:Random<Real>;
  α:Real;
  β:Real;

  function initialize() {
    α <- simulate_uniform(2.1, 10.0);
    β <- simulate_uniform(0.1, 10.0);
  }

  function simulate() {
    σ2 ~ InverseGamma(α, β);
  }

  function forward() -> Real[_] {
    return [σ2.eval()];
  }

  function backward() -> Real[_] {
    return [σ2.eval()];
  }

  function marginal() -> Distribution<Real> {
    return σ2.getDistribution();
  }

  function size() -> Integer {
    return 1;
  }
}

program test_pdf_inverse_gamma(N:Integer <- 10000, B:Integer <- 100,
    S:Integer <- 5, lazy:Boolean <- false) {
  let α <- simulate_uniform(2.0, 10.0);
  let β <- simulate_uniform(0.1, 10.0);
  let q <- InverseGamma(α, β);  
  test_pdf(q, N, B, S, lazy);
}

program test_cdf_inverse_gamma(N:Integer <- 10000) {
  let α <- simulate_uniform(2.0, 10.0);
  let β <- simulate_uniform(0.1, 10.0);
  let q <- InverseGamma(α, β);  
  test_cdf(q, N);
}

program test_grad_inverse_gamma(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestInverseGamma;
  test_grad(m, N, backward);
}
