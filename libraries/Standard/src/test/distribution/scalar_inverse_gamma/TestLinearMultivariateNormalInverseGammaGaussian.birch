class TestLinearMultivariateNormalInverseGammaGaussian < TestModel {
  σ2:Random<Real>;
  μ:Random<Real[_]>;
  x:Random<Real>;

  n:Integer <- 6;

  a:Real[n];
  μ_0:Real[n];
  Σ:Real[n,n];
  α:Random<Real>;
  β:Random<Real>;
  c:Random<Real>;
  s2:Random<Real>;

  override function initialize() {
    α ~ Uniform(2.1, 10.0);
    β ~ Uniform(0.1, 10.0);
    for i in 1..n {
      a[i] <- simulate_uniform(-2.0, 2.0);
      μ_0[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..n {
        Σ[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ <- outer(Σ) + diagonal(1.0e-2, n);
    c ~ Uniform(-10.0, 10.0);
    s2 ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ MultivariateGaussian(μ_0, Σ*σ2);
    x ~ Gaussian(dot(a, μ) + c, s2*σ2);
  }

  override function forward() -> Real[_] {
    y:Real[n + 2];
    y[1] <- σ2.eval();
    y[2..(n + 1)] <- μ.eval();
    y[n + 2] <- x.eval();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[n + 2];
    assert !x.hasValue();
    y[n + 2] <- x.eval();
    assert !μ.hasValue();
    y[2..(n + 1)] <- μ.eval();
    assert !σ2.hasValue();
    y[1] <- σ2.eval();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return n + 2;
  }
}

program test_conjugacy_linear_multivariate_normal_inverse_gamma_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_linear_multivariate_normal_inverse_gamma_gaussian(
    N:Integer <- 10000, B:Integer <- 100, S:Integer <- 5,
    lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaGaussian;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_linear_multivariate_normal_inverse_gamma_gaussian(
    N:Integer <- 10000) {
  m:TestLinearMultivariateNormalInverseGammaGaussian;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_linear_multivariate_normal_inverse_gamma_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaGaussian;
  test_grad(m, N, backward);
}
