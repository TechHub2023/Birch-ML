class TestLinearMultivariateGaussianGaussian < TestModel {
  μ:Random<Real[_]>;
  x:Random<Real>;

  n:Integer <- 4;

  a:Real[n];
  μ_0:Real[n];
  Σ_0:Real[n,n];
  c:Real;
  σ2_1:Real;

  function initialize() {
    c <- simulate_uniform(-10.0, 10.0);
    for i in 1..n {
      a[i] <- simulate_uniform(-2.0, 2.0);
      μ_0[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..n {
        Σ_0[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ_0 <- outer(Σ_0) + diagonal(1.0e-2, n);
    σ2_1 <- simulate_uniform(0.1, 10.0);
  }

  function simulate() {
    μ ~ MultivariateGaussian(μ_0, Σ_0);
    x ~ Gaussian(dot(a, μ) + c, σ2_1);
  }

  function forward() -> Real[_] {
    y:Real[n + 1];
    y[1..n] <- μ.value();
    y[n + 1] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[n + 1];
    assert !x.hasValue();
    y[n + 1] <- x.value();
    assert !μ.hasValue();
    y[1..n] <- μ.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[n + 1];
    y[1..n] <- μ.eval();
    y[n + 1] <- x.eval();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[n + 1];
    assert !x.hasValue();
    y[n + 1] <- x.eval();
    assert !μ.hasValue();
    y[1..n] <- μ.eval();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  function size() -> Integer {
    return n + 1;
  }
}

program test_conjugacy_linear_multivariate_gaussian_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_linear_multivariate_gaussian_gaussian(N:Integer <- 10000,
    B:Integer <- 100, S:Integer <- 5, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_linear_multivariate_gaussian_gaussian(N:Integer <- 10000) {
  m:TestLinearMultivariateGaussianGaussian;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_linear_multivariate_gaussian_gaussian(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_grad(m, N, backward);
}
