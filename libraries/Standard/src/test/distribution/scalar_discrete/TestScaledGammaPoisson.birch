class TestScaledGammaPoisson < TestModel {
  λ:Random<Real>;
  x:Random<Integer>;

  a:Random<Real>;
  k:Random<Real>;
  θ:Random<Real>;

  override function initialize() {
    a <~ Uniform(0.0, 10.0);
    k <~ UniformInteger(1, 10);
    θ ~ Uniform(0.0, 10.0);
  }

  override function simulate() {
    λ ~ Gamma(k, θ);
    x ~ Poisson(a*λ);
  }

  override function forward() -> Real[_] {
    y:Real[2];
    y[1] <- λ.eval();
    y[2] <- x.eval();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.eval();
    assert !λ.hasValue();
    y[1] <- λ.eval();
    return y;
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2;
  }
}

program test_conjugacy_scaled_gamma_poisson(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestScaledGammaPoisson;
  test_conjugacy(m, N, lazy);
}

program test_pdf_scaled_gamma_poisson(N:Integer <- 10000, B:Integer <- 0,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestScaledGammaPoisson;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, lazy);
}

program test_cdf_scaled_gamma_poisson() {
  m:TestScaledGammaPoisson;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal());
}

program test_grad_scaled_gamma_poisson(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestScaledGammaPoisson;
  test_grad(m, N, backward);
}
