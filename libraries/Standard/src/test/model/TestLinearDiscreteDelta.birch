class TestLinearDiscreteDelta < Model {
  ρ:Random<Real>;
  x:Random<Integer>;
  y:Random<Integer>;

  n:Integer;
  α:Real;
  β:Real;
  c:Integer;
  flag1:Boolean;
  flag2:Boolean;

  function initialize() {
    n <- simulate_uniform_int(1, 100);
    α <- simulate_uniform(0.0, 10.0);
    β <- simulate_uniform(0.0, 10.0);
    c <- simulate_uniform_int(0, 100);
    flag1 <- simulate_bernoulli(0.5);
    flag2 <- simulate_bernoulli(0.5);
  }

  function simulate() {
    ρ ~ Beta(α, β);
    x ~ Binomial(n, ρ);
    if flag1 {
      if flag2 {
        y ~ Delta(x + c);
      } else {
        y ~ Delta(x - c);
      }
    } else {
      if flag2 {
        y ~ Delta(c + x);
      } else {
        y ~ Delta(c - x);
      }
    }
  }

  function forward() -> Real[_] {
    z:Real[2];
    z[1] <- ρ.value();
    z[2] <- x.value();
    return z;
  }

  function backward() -> Real[_] {
    z:Real[2];
    assert !x.hasValue();
    z[2] <- x.value();
    assert !ρ.hasValue();
    z[1] <- ρ.value();
    return z;
  }

  function forwardLazy() -> Real[_] {
    z:Real[2];
    z[1] <- ρ.eval();
    z[2] <- x.eval();
    return z;
  }

  function backwardLazy() -> Real[_] {
    z:Real[2];
    assert !x.hasValue();
    z[2] <- x.eval();
    assert !ρ.hasValue();
    z[1] <- ρ.eval();
    return z;
  }

  function marginal() -> Distribution<Integer> {
    return y.getDistribution();
  }

  function size() -> Integer {
    return 2;
  }
}
