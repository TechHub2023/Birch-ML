class TestLinearNormalInverseGammaGaussian < Model {
  σ2:Random<Real>;
  μ:Random<Real>;
  x:Random<Real>;

  a:Real;
  μ_0:Real;
  a2:Real;
  c:Real;
  α:Real;
  β:Real;
  neg:Boolean;

  function initialize() {
    a <- simulate_uniform(-2.0, 2.0);
    μ_0 <- simulate_uniform(-10.0, 10.0);
    a2 <- simulate_uniform(0.1, 2.0);
    c <- simulate_uniform(-10.0, 10.0);
    α <- simulate_uniform(2.0, 10.0);
    β <- simulate_uniform(0.1, 10.0);
    neg <- simulate_bernoulli(0.5);
  }

  function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ Gaussian(μ_0, a2, σ2);
    if neg {
      x ~ Gaussian(μ/a - c, σ2);
    } else {
      x ~ Gaussian(a*μ + c, σ2);
    }
  }

  function forward() -> Real[_] {
    y:Real[3];
    assert !σ2.hasValue();
    y[1] <- σ2.value();
    assert !μ.hasValue();
    y[2] <- μ.value();
    assert !x.hasValue();
    y[3] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[3];
    assert !x.hasValue();
    y[3] <- x.value();
    assert !μ.hasValue();
    y[2] <- μ.value();
    assert !σ2.hasValue();
    y[1] <- σ2.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[3];
    assert !σ2.hasValue();
    y[1] <- σ2.get();
    assert !μ.hasValue();
    y[2] <- μ.get();
    assert !x.hasValue();
    y[3] <- x.get();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[3];
    assert !x.hasValue();
    y[3] <- x.get();
    assert !μ.hasValue();
    y[2] <- μ.get();
    assert !σ2.hasValue();
    y[1] <- σ2.get();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.distribution()!.graft();
  }
}
