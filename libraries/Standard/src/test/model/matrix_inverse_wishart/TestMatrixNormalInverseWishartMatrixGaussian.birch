class TestMatrixNormalInverseWishartMatrixGaussian < TestModel {
  Σ:Random<Real[_,_]>;
  X:Random<Real[_,_]>;
  Y:Random<Real[_,_]>;

  n:Integer <- 5;
  p:Integer <- 4;

  k:Real;
  Ψ:Real[p,p];
  M:Real[n,p];
  U:Real[n,n];
  V:Real[n,n];

  function initialize() {
    k <- simulate_uniform(2.0, 10.0);
    Ψ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, p, p);
    M <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, p);
    U <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    V <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);

    Ψ <- outer(Ψ) + diagonal(1.0e-2, p);
    U <- outer(U) + diagonal(1.0e-2, n);
    V <- outer(V) + diagonal(1.0e-2, n);
  }

  function simulate() {
    Σ ~ InverseWishart(Ψ, k);
    X ~ MatrixGaussian(M, U, Σ);
    Y ~ MatrixGaussian(X, V, Σ);
  }

  function forward() -> Real[_] {
    Σ.value();
    X.value();
    Y.value();
    return vectorize();
  }

  function backward() -> Real[_] {
    assert !Y.hasValue();
    Y.value();
    assert !X.hasValue();
    X.value();
    assert !Σ.hasValue();
    Σ.value();
    return vectorize();
  }

  function forwardLazy() -> Real[_] {
    Σ.eval();
    X.eval();
    Y.eval();
    return vectorize();
  }

  function backwardLazy() -> Real[_] {
    assert !Y.hasValue();
    Y.eval();
    assert !X.hasValue();
    X.eval();
    assert !Σ.hasValue();
    Σ.eval();
    return vectorize();
  }

  function marginal() -> Distribution<Real[_,_]> {
    return Y.getDistribution();
  }

  function vectorize() -> Real[_] {
    z:Real[size()];
    let k <- 0;
    z[k + 1.. k + p*p] <- vec(Σ.eval());
    k <- k + p*p;
    z[k + 1.. k + n*p] <- vec(X.eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y.eval());
    return z;
  }

  function size() -> Integer {
    return p*p + 2*n*p;
  }
}
