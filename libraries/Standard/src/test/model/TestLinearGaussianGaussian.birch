class TestLinearGaussianGaussian < Model {
  μ_1:Random<Real>;
  x:Random<Real>;
  a:Real;
  c:Real;
  μ_0:Real;
  σ2_0:Real;
  σ2_1:Real;
  neg:Boolean;

  function initialize() {
    a <- simulate_uniform(-2.0, 2.0);
    c <- simulate_uniform(-10.0, 10.0);
    μ_0 <- simulate_uniform(-10.0, 10.0);
    σ2_0 <- simulate_uniform(0.1, 2.0);
    σ2_1 <- simulate_uniform(0.1, 2.0);
    neg <- simulate_bernoulli(0.5);
  }

  function simulate() {
    μ_1 ~ Gaussian(μ_0, σ2_0);
    if neg {
      x ~ Gaussian(μ_1/a - c, σ2_1);
    } else {
      x ~ Gaussian(a*μ_1 + c, σ2_1);
    }
  }

  function forward() -> Real[_] {
    y:Real[2];
    y[1] <- μ_1.value();
    y[2] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.value();
    assert !μ_1.hasValue();
    y[1] <- μ_1.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[2];
    y[1] <- μ_1.get();
    y[2] <- x.get();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.get();
    assert !μ_1.hasValue();
    y[1] <- μ_1.get();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.distribution()!;
  }
}
