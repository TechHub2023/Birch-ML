class TestMultivariateNormalInverseGamma < TestModel {
  σ2:Random<Real>;
  μ:Random<Real[_]>;

  n:Integer <- 4;

  α:Real;
  β:Real;
  μ_0:Real[n];
  Σ:Real[n,n];

  function initialize() {
    α <- simulate_uniform(2.0, 10.0);
    β <- simulate_uniform(0.1, 10.0);
    μ_0 <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
    Σ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    
    Σ <- outer(Σ) + diagonal(1.0e-2, n);
  }

  function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ MultivariateGaussian(μ_0, Σ*σ2);
  }

  function forward() -> Real[_] {
    y:Real[size()];
    y[1] <- σ2.value();
    y[2..(n + 1)] <- μ.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[size()];
    assert !μ.hasValue();
    y[2..(n + 1)] <- μ.value();
    assert !σ2.hasValue();
    y[1] <- σ2.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[size()];
    y[1] <- σ2.eval();
    y[2..(n + 1)] <- μ.eval();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[size()];
    assert !μ.hasValue();
    y[2..(n + 1)] <- μ.eval();
    assert !σ2.hasValue();
    y[1] <- σ2.eval();
    return y;
  }

  function marginal() -> Distribution<Real[_]> {
    return μ.getDistribution();
  }

  function size() -> Integer {
    return n + 1;
  }
}
