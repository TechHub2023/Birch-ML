class TestFanMultivariateNormalInverseGammaMultivariateGaussian < Model {
  σ2:Random<Real>;
  μ:Random<Real[_]>;
  x1:Random<Real[_]>;
  x2:Random<Real[_]>;
  x3:Random<Real[_]>;
  x4:Random<Real[_]>;
  x5:Random<Real[_]>;

  n:Integer <- 4;

  α:Real;
  β:Real;
  μ_0:Real[n];
  Σ:Real[n,n];
  Ψ:Real[n,n];

  function initialize() {
    α <- simulate_uniform(2.0, 10.0);
    β <- simulate_uniform(0.1, 10.0);
    μ_0 <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
    Σ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    Ψ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    
    Σ <- outer(Σ) + diagonal(1.0e-2, n);
    Ψ <- outer(Ψ) + diagonal(1.0e-2, n);
  }

  function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ MultivariateGaussian(μ_0, Σ*σ2);
    x1 ~ MultivariateGaussian(μ, Ψ*σ2);
    x2 ~ MultivariateGaussian(μ, Ψ*σ2);
    x3 ~ MultivariateGaussian(μ, Ψ*σ2);
    x4 ~ MultivariateGaussian(μ, Ψ*σ2);
    x5 ~ MultivariateGaussian(μ, Ψ*σ2);
  }

  function forward() -> Real[_] {
    σ2.value();
		μ.value();
		x1.value();
		x2.value();
		x3.value();
		x4.value();
		x5.value();
    return vectorize();
  }

  function backward() -> Real[_] {
    assert !x5.hasValue();
    x5.value();
		x4.value();
		x3.value();
		x2.value();
		x1.value();
    assert !μ.hasValue();
    μ.value();
    assert !σ2.hasValue();
    σ2.value();
    return vectorize();
  }

  function forwardLazy() -> Real[_] {
    σ2.eval();
		μ.eval();
		x1.eval();
		x2.eval();
		x3.eval();
		x4.eval();
		x5.eval();
    return vectorize();
  }

  function backwardLazy() -> Real[_] {
    assert !x5.hasValue();
    x5.eval();
		x4.eval();
		x3.eval();
		x2.eval();
		x1.eval();
    assert !μ.hasValue();
    μ.eval();
    assert !σ2.hasValue();
    σ2.eval();
    return vectorize();
  }

  function vectorize() -> Real[_] {
    y:Real[size()];
		let k <- 1;
    y[k] <- σ2.value();
		k <- k + 1;
    y[k..(k + n - 1)] <- μ.value();
		k <- k + n;
    y[k..(k + n - 1)] <- x1.value();
		k <- k + n;
    y[k..(k + n - 1)] <- x2.value();
		k <- k + n;
    y[k..(k + n - 1)] <- x3.value();
		k <- k + n;
    y[k..(k + n - 1)] <- x4.value();
		k <- k + n;
    y[k..(k + n - 1)] <- x5.value();
    return y;
  }

  function size() -> Integer {
    return 6*n + 1;
  }
}
