class TestChainGaussian < Model {
  x:Random<Real>[5];
  μ:Real;
  σ2:Real[_];

  function initialize() {
    μ <- simulate_uniform(-10.0, 10.0);
    σ2 <- [
      simulate_uniform(0.1, 10.0),
      simulate_uniform(0.1, 10.0),
      simulate_uniform(0.1, 10.0),
      simulate_uniform(0.1, 10.0),
      simulate_uniform(0.1, 10.0)
    ];
  }

  function simulate() {
    x[1] ~ Gaussian(μ, σ2[1]);
    x[2] ~ Gaussian(x[1], σ2[2]);
    x[3] ~ Gaussian(x[2], σ2[3]);
    x[4] ~ Gaussian(x[3], σ2[4]);
    x[5] ~ Gaussian(x[4], σ2[5]);
  }

  function forward() -> Real[_] {
    y:Real[5];
    for i in 1..5 {
      y[i] <- x[i].value();
    }
    return y;
  }

  function backward() -> Real[_] {
    y:Real[5];
    for i in 0..4 {
      assert !x[5 - i].hasValue();
      y[5 - i] <- x[5 - i].value();
    }
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[5];
    for i in 1..5 {
      y[i] <- x[i].eval();
    }
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[5];
    for i in 0..4 {
      assert !x[5 - i].hasValue();
      y[5 - i] <- x[5 - i].eval();
    }
    return y;
  }
}
