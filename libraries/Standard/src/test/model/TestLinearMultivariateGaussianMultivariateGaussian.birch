class TestLinearMultivariateGaussianMultivariateGaussian < Model {
  μ:Random<Real[_]>;
  x:Random<Real[_]>;

  A:Real[5,5];
  μ_0:Real[5];
  Σ_0:Real[5,5];
  c:Real[5];
  Σ_1:Real[5,5];
  neg:Boolean;

  function initialize() {
    for i in 1..5 {
      μ_0[i] <- simulate_uniform(-10.0, 10.0);
      c[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..5 {
        Σ_0[i,j] <- simulate_uniform(-2.0, 2.0);
        Σ_1[i,j] <- simulate_uniform(-2.0, 2.0);
        A[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ_0 <- Σ_0*transpose(Σ_0) + diagonal(1.0e-2, 5);
    Σ_1 <- Σ_1*transpose(Σ_1) + diagonal(1.0e-2, 5);
    neg <- simulate_bernoulli(0.5);
  }

  function simulate() {
    μ ~ MultivariateGaussian(μ_0, Σ_0);
    if neg {
      x ~ MultivariateGaussian(A*μ - c, Σ_1);
    } else {
      x ~ MultivariateGaussian(A*μ + c, Σ_1);
    }
  }

  function forward() -> Real[_] {
    y:Real[10];
    y[1..5] <- μ.value();
    y[6..10] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[10];
    assert !x.hasValue();
    y[6..10] <- x.value();
    assert !μ.hasValue();
    y[1..5] <- μ.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[10];
    y[1..5] <- μ.eval();
    y[6..10] <- x.eval();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[10];
    assert !x.hasValue();
    y[6..10] <- x.eval();
    assert !μ.hasValue();
    y[1..5] <- μ.eval();
    return y;
  }

  function marginal() -> Distribution<Real[_]> {
    return x.getDistribution();
  }
}
