class TestGammaPoisson < Model {
  λ:Random<Real>;
  x:Random<Integer>;
  k:Real;
  θ:Real;

  function initialize() {
    k <- simulate_uniform_int(1, 10);
    θ <- simulate_uniform(0.1, 10.0);
  }

  function simulate() {
    λ ~ Gamma(k, θ);
    x ~ Poisson(λ);
  }

  function forward() -> Real[_] {
    y:Real[2];
    y[1] <- λ.value();
    y[2] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.value();
    assert !λ.hasValue();
    y[1] <- λ.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[2];
    y[1] <- λ.eval();
    y[2] <- x.eval();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.eval();
    assert !λ.hasValue();
    y[1] <- λ.eval();
    return y;
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  function size() -> Integer {
    return 2;
  }
}
