class TestMultivariateGaussianMultivariateGaussian < Model {
  μ_1:Random<Real[_]>;
  x:Random<Real[_]>;

  μ_0:Real[5];
  Σ_0:Real[5,5];
  Σ_1:Real[5,5];

  function initialize() {
    for i in 1..5 {
      μ_0[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..5 {
        Σ_0[i,j] <- simulate_uniform(-2.0, 2.0);
        Σ_1[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ_0 <- Σ_0*transpose(Σ_0) + diagonal(1.0e-2, 5);
    Σ_1 <- Σ_1*transpose(Σ_1) + diagonal(1.0e-2, 5);
  }

  function simulate() {
    μ_1 ~ Gaussian(μ_0, Σ_0);
    x ~ Gaussian(μ_1, Σ_1);
  }

  function forward() -> Real[_] {
    y:Real[10];
    y[1..5] <- μ_1.value();
    assert !x.hasValue();
    y[6..10] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[10];
    y[6..10] <- x.value();
    assert !μ_1.hasValue();
    y[1..5] <- μ_1.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[10];
    y[1..5] <- μ_1.get();
    assert !x.hasValue();
    y[6..10] <- x.get();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[10];
    y[6..10] <- x.get();
    assert !μ_1.hasValue();
    y[1..5] <- μ_1.get();
    return y;
  }

  function marginal() -> Distribution<Real[_]> {
    return x.distribution()!.graft();
  }
}
