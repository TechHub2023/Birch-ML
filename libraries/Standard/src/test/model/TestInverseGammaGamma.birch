class TestInverseGammaGamma < Model {
  θ:Random<Real>;
  x:Random<Real>;
  k:Real;
  α:Real;
  β:Real;

  function initialize() {
    k <- simulate_uniform(1.0, 10.0);
    α <- simulate_uniform(2.0, 10.0);
    β <- simulate_uniform(0.1, 10.0);
  }

  function simulate() {
    θ ~ InverseGamma(α, β);
    x ~ Gamma(k, θ);
  }

  function forward() -> Real[_] {
    y:Real[2];
    y[1] <- θ.value();
    y[2] <- x.value();
    return y;
  }

  function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.value();
    assert !θ.hasValue();
    y[1] <- θ.value();
    return y;
  }

  function forwardLazy() -> Real[_] {
    y:Real[2];
    y[1] <- θ.eval();
    y[2] <- x.eval();
    return y;
  }

  function backwardLazy() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.eval();
    assert !θ.hasValue();
    y[1] <- θ.eval();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }
}
