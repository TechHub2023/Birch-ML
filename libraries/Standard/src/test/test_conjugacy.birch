/*
 * Test a particular conjugacy.
 *
 * - m: Model.
 * - N: Number of samples.
 * - D: Number of dimensions.
 * - lazy: Use lazy version?
 */
function test_conjugacy<Conjugate>(m:Conjugate, N:Integer, D:Integer, lazy:Boolean) {  
  let forward <- PlayHandler(false);
  let backward <- PlayHandler(true);
  m.initialize();
  
  /* simulate forward */
  X1:Real[N,D];
  for n in 1..N {
    let m' <- copy(m);
    with forward {
      m'.simulate();
    }
    if lazy {
      X1[n,1..D] <- m'.forwardLazy();
    } else {
      X1[n,1..D] <- m'.forward();
    }
    if mod(n, 10000) == 0 {
      collect();
    }
  }

  /* simulate backward */
  X2:Real[N,D];
  for n in 1..N {
    let m' <- copy(m);
    with backward {
      m'.simulate();
    }
    if lazy {
      X2[n,1..D] <- m'.backwardLazy();
    } else {
      X2[n,1..D] <- m'.backward();
    }
    if mod(n, 10000) == 0 {
      collect();
    }
  }
  
  /* test result */
  if !pass(X1, X2) {
    exit(1);
  }
}
