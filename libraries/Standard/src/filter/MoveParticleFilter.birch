/**
 * Resample-move particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    ParticleFilter <|-- MoveParticleFilter
 *    ParticleFilter <|-- ConditionalParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 *    link MoveParticleFilter "../MoveParticleFilter/"
 *    link ConditionalParticleFilter "../ConditionalParticleFilter/"
 * ```
 */
class MoveParticleFilter < ParticleFilter {
  /**
   * Number of moves accepted for each particle.
   */
  naccepts:Integer[_];

  /**
   * Scale of moves.
   */
  scale:Real <- 0.1;
  
  /**
   * Number of moves at each step.
   */
  nmoves:Integer <- 1;
  
  /**
   * Number of lag steps for each move.
   */
  nlags:Integer <- 1;

  function particle(model:Model) -> Particle {
    return MoveParticle(model);
  }

  override function filter(t:Integer, input:Buffer?) {
    resample();
    move(t);
    simulate(t, input);
    reduce();
  }

  override function simulate(input:Buffer?) {
    parallel for n in 1..nparticles {
      let x <- MoveParticle?(this.x[n])!;
      let handler <- MoveHandler(delayed);
      with (handler) {
        if input? {
          x.m.read(input!);
        }
        x.m.simulate();
        w[n] <- w[n] + handler.w;
      }
      w[n] <- w[n] + x.augment(0, handler.z);
      while x.size() > nlags {
        x.truncate();
      }
    }
  }

  override function simulate(t:Integer, input:Buffer?) {
    parallel for n in 1..nparticles {
      let x <- MoveParticle?(this.x[n])!;
      let handler <- MoveHandler(delayed);
      with (handler) {
        if input? {
          x.m.read(t, input!);
        }
        x.m.simulate(t);
        w[n] <- w[n] + handler.w;
      }
      w[n] <- w[n] + x.augment(t, handler.z);
      while x.size() > nlags {
        x.truncate();
      }
    }
  }

  function move(t:Integer) {
    naccepts <- vector(0, nparticles);
    if ess <= trigger*nparticles && nlags > 0 && nmoves > 0 {
      κ:LangevinKernel;
      κ.scale <- scale/pow(t, 2);
      parallel for n in 1..nparticles {
        let x <- MoveParticle?(clone(this.x[n]))!;
        x.grad(t - nlags);
        for m in 1..nmoves {
          let x' <- clone(x);
          x'.move(t - nlags, κ);
          x'.grad(t - nlags);
          let α <- x'.π - x.π + x'.compare(t - nlags, x, κ);
          if log(simulate_uniform(0.0, 1.0)) <= α {  // accept?
            x <- x';
            naccepts[n] <- naccepts[n] + 1;
          }
        }
        this.x[n] <- x;
      }
      collect();
    }
  }

  override function reduce() {
    super.reduce();
    raccepts <- Real(sum(naccepts))/(nparticles*nmoves);
  }

  override function read(buffer:Buffer) {
    super.read(buffer);
    scale <-? buffer.get("scale", scale);
    nmoves <-? buffer.get("nmoves", nmoves);
    nlags <-? buffer.get("nlags", nlags);
  }
}
