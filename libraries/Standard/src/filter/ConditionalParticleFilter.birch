/**
 * Conditional particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    ParticleFilter <|-- MoveParticleFilter
 *    ParticleFilter <|-- ConditionalParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 *    link MoveParticleFilter "../MoveParticleFilter/"
 *    link ConditionalParticleFilter "../ConditionalParticleFilter/"
 * ```
 */
class ConditionalParticleFilter < ParticleFilter {
  /**
   * Trace of the reference particle. This will have no value for the first
   * iteration of the filter. Subsequent iterations will draw a particle from
   * the previous iteration to condition the new iteration, setting this
   * variable.
   */
  r:Tape<Record>?;

  function particle(model:Model) -> Particle {
    return ConditionalParticle(model);
  }

  override function simulate(input:Buffer) {
    parallel for n in 1..nparticles {
      let x <- ConditionalParticle?(this.x[n])!;
      let handler <- PlayHandler(delayed);
      if r? && n == b {
        handler.input <- r!;
      }
      handler.output <- x.trace;
      with (handler) {
        x.m.read(input);
        x.m.simulate();
      }
      w[n] <- handler.w;
    }
  }

  override function simulate(t:Integer, input:Buffer) {
    parallel for n in 1..nparticles {
      let x <- ConditionalParticle?(this.x[n])!;
      let handler <- PlayHandler(delayed);
      if r? && n == b {
        handler.input <- r!;
      }
      handler.output <- x.trace;
      with (handler) {
        x.m.read(t, input);
        x.m.simulate(t);
      }
      w[n] <- w[n] + handler.w;
    }
  }


  override function resample() {
    if ess <= trigger*nparticles {
      if r? {
        (a, b) <- conditional_resample_multinomial(w, b);
      } else {
        a <- resample_multinomial(w);
      }
      w <- vector(0.0, nparticles);
      dynamic parallel for n in 1..nparticles {
        if a[n] != n {
          x[n] <- clone(x[a[n]]);
        }
      }
      collect();
    } else {
      /* normalize weights to sum to nparticles */
      w <- w - vector(lsum - log(Real(nparticles)), nparticles);
    }
  }
}
