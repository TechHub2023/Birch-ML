/**
 * Alive particle filter. When propagating and weighting particles, the
 * alive particle filter maintains $N$ particles with non-zero weight, rather
 * than $N$ particles in total as with the standard particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    ParticleFilter <|-- MoveParticleFilter
 *    ParticleFilter <|-- ConditionalParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 *    link MoveParticleFilter "../MoveParticleFilter/"
 *    link ConditionalParticleFilter "../ConditionalParticleFilter/"
 * ```
 */
class AliveParticleFilter < ParticleFilter {
  /**
   * Number of propagations for each particle, along with the extra particle
   * to be discarded.
   */
  p:Integer[_];

  override function simulate(t:Integer, input:Buffer) {
    let play <- PlayHandler(delayed);
    let x0 <- x;
    let w0 <- w;
    p <- vector(0, nparticles + 1);
    parallel for n in 1..nparticles + 1 {
      if n <= nparticles {
        x[n] <- clone(x0[a[n]]);
        let handler <- PlayHandler(delayed);
        with (handler) {
          x[n].m.read(t, input);
          x[n].m.simulate(t);
          w[n] <- handler.w;
        }
        p[n] <- 1;
        while w[n] == -inf {  // repeat until weight is positive
          a[n] <- global.ancestor(w0);
          x[n] <- clone(x0[a[n]]);
          p[n] <- p[n] + 1;
          let handler <- PlayHandler(delayed);
          with (handler) {
            x[n].m.read(t, input);
            x[n].m.simulate(t);
            w[n] <- handler.w;
          }
        }
      } else {
        /* propagate and weight until one further acceptance, which is
         * discarded for unbiasedness in the normalizing constant
         * estimate */
        let w' <- 0.0;
        p[n] <- 0;
        do {
          let a' <- global.ancestor(w0);
          let x' <- clone(x0[a']);
          p[n] <- p[n] + 1;
          let handler <- PlayHandler(delayed);
          with (handler) {
            x'.m.read(t, input);
            x'.m.simulate(t);
            w' <- handler.w;
          }
        } while w' == -inf;  // repeat until weight is positive
      }
    }
    collect();
  }
  
  override function resample() {
    if ess <= trigger*nparticles {
      /* compute ancestor indices, but don't copy, propagate() handles this */
      a <- resample_systematic(w);
      w <- vector(0.0, nparticles);
    } else {
      /* normalize weights to sum to nparticles */
      w <- w - vector(lsum - log(Real(nparticles)), nparticles);
    }
  }
  
  override function reduce() {
    super.reduce();
    npropagations <- sum(p);
  }
}
