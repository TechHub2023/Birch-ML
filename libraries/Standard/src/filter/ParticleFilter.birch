/**
 * Particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleFilter <|-- AliveParticleFilter
 *    ParticleFilter <|-- MoveParticleFilter
 *    ParticleFilter <|-- ConditionalParticleFilter
 *    link ParticleFilter "../ParticleFilter/"
 *    link AliveParticleFilter "../AliveParticleFilter/"
 *    link MoveParticleFilter "../MoveParticleFilter/"
 *    link ConditionalParticleFilter "../ConditionalParticleFilter/"
 * ```
 */
class ParticleFilter {
  /**
   * Particles.
   */
  x:Particle[_];

  /**
   * Log weights.
   */
  w:Real[_];

  /**
   * Ancestor indices.
   */
  a:Integer[_];

  /**
   * Chosen particle index. This is used for drawing a single particle from
   * the filter in e.g. [ParticleSampler](../ParticleSampler), and for the
   * reference particle in e.g.
   * [ConditionalParticleFilter](../ConditionalParticleFilter).
   */
  b:Integer <- 0;

  /**
   * Logarithm of sum of weights.
   */
  lsum:Real <- 0.0;

  /**
   * Effective sample size.
   */
  ess:Real <- 0.0;

  /**
   * Log normalizing constant.
   */
  lnormalize:Real <- 0.0;

  /**
   * Number of propagations. This is not the same as the number of particles;
   * the number of propagations performed may, according to the filter type,
   * differ from the number of particles, such as for alive and rejection
   * control particle filters.
   */
  npropagations:Integer <- 0;

  /**
   * Accept rate of moves.
   */
  raccepts:Real <- 0.0;

  /**
   * Number of particles.
   */
  nparticles:Integer <- 1;

  /**
   * Threshold for resampling. Resampling is performed whenever the
   * effective sample size, as a proportion of `N`, drops below this
   * threshold.
   */
  trigger:Real <- 0.7;

  /**
   * Should delayed sampling be used?
   */
  delayed:Boolean <- true;

  /**
   * Create a particle of the type required for this filter.
   */
  function particle(model:Model) -> Particle {
    return Particle(model);
  }

  /**
   * Start filter.
   *
   * - model: Model.
   * - input: Optional input buffer.
   */
  function filter(model:Model, input:Buffer?) {
    x <- clone(particle(model), nparticles);
    w <- vector(0.0, nparticles);
    a <- iota(1, nparticles);
    b <- 1;
    ess <- nparticles;
    lsum <- 0.0;
    lnormalize <- 0.0;
    npropagations <- nparticles;
    simulate(input);
    reduce();
  }

  /**
   * Step filter.
   *
   * - t: The step number, beginning at 1.
   * - input: Optional input buffer.
   */
  function filter(t:Integer, input:Buffer?) {
    resample();
    simulate(t, input);
    reduce();
  }

  /**
   * Start particles.
   */
  function simulate(input:Buffer?) {
    parallel for n in 1..nparticles {
      let handler <- PlayHandler(delayed);
      with (handler) {
        if input? {
          x[n].m.read(input!);
        }
        x[n].m.simulate();
        w[n] <- w[n] + handler.w;
      }
    }
  }

  /**
   * Step particles.
   */
  function simulate(t:Integer, input:Buffer?) {
    parallel for n in 1..nparticles {
      let handler <- PlayHandler(delayed);
      with (handler) {
        if input? {
          x[n].m.read(t, input!);
        }
        x[n].m.simulate(t);
        w[n] <- w[n] + handler.w;
      }
    }
  }

  /**
   * Compute reductions, such as effective sample size and normalizing
   * constant estimate.
   */
  function reduce() {
    (ess, lsum) <- resample_reduce(w);
    lnormalize <- lnormalize + lsum - log(Real(nparticles));
    b <- ancestor(w);
    if b == 0 {
      error("particle filter degenerated");
    }
  }

  /**
   * Resample particles.
   */
  function resample() {
    if ess <= trigger*nparticles {
      a <- resample_systematic(w);
      w <- vector(0.0, nparticles);
      dynamic parallel for n in 1..nparticles {
        if a[n] != n {
          x[n] <- clone(x[a[n]]);
        }
      }
      collect();
    } else {
      /* normalize weights to sum to nparticles */
      w <- w - vector(lsum - log(Real(nparticles)), nparticles);
    }
  }

  override function read(buffer:Buffer) {
    nparticles <-? buffer.get<Integer>("nparticles");
    trigger <-? buffer.get<Real>("trigger");
    delayed <-? buffer.get<Boolean>("delayed");
  }
}
