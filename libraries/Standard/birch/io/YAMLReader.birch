/**
 * Reader for YAML files.
 *
 * ```mermaid
 * classDiagram
 *   class Iterator~Buffer~ {
 *     hasNext() Boolean
 *     next() Buffer
 *   }
 *   Iterator~Buffer~ <|-- Reader
 *   Reader <|-- YAMLReader
 *   Reader <|-- JSONReader
 *   YAMLReader -- JSONReader
 *   link Iterator "../Iterator/"
 *   link Reader "../Reader/"
 *   link YAMLReader "../YAMLReader/"
 *   link JSONReader "../JSONReader/"
 * ```
 */
class YAMLReader < Reader {
  /**
   * The file.
   */
  file:File;

  /**
   * Is the file being read sequentially, with a sequence at the root?
   */
  sequential:Boolean <- false;

  hpp{{
  yaml_parser_t parser;
  yaml_event_t event;
  }}

  override function open(path:String) {
    file <- fopen(path, READ);
    cpp{{
    yaml_parser_initialize(&parser);
    yaml_parser_set_input_file(&parser, file);
    if (!yaml_parser_parse(&parser, &event)) {
      error("parse error");
    }
    }}
  }

  override function close() {
    cpp{{
    yaml_event_delete(&event);
    yaml_parser_delete(&parser);
    fclose(file);
    }}
  }

  override function slurp() -> Buffer {
    assert !sequential;
    buffer:Buffer;
    cpp{{
    while (event.type != YAML_STREAM_END_EVENT) {
      if (event.type == YAML_SEQUENCE_START_EVENT) {
        parseSequence(buffer);
      } else if (event.type == YAML_MAPPING_START_EVENT) {
        parseMapping(buffer);
      } else if (event.type == YAML_SCALAR_EVENT) {
        parseValue(buffer);
      }
      nextEvent();
    }
    }}
    return buffer;
  }

  override function hasNext() -> Boolean {
    cpp{{
    while (event.type != YAML_MAPPING_START_EVENT &&
        event.type != YAML_SEQUENCE_START_EVENT &&
        event.type != YAML_SCALAR_EVENT &&
        event.type != YAML_STREAM_END_EVENT) {
      nextEvent();
    }
    if (!sequential && event.type == YAML_SEQUENCE_START_EVENT) {
      /* root is a sequence to iterate through, go one level deeper to find
       * its first element, if any */
      nextEvent();
      while (event.type != YAML_MAPPING_START_EVENT &&
          event.type != YAML_SEQUENCE_START_EVENT &&
          event.type != YAML_SCALAR_EVENT &&
          event.type != YAML_STREAM_END_EVENT) {
        nextEvent();
      }
    }
    sequential = true;
    return event.type != YAML_STREAM_END_EVENT;
    }}
    return false;
  }

  override function next() -> Buffer {
    if !sequential {
      hasNext();
    }
    buffer:Buffer;
    cpp{{
    if (event.type == YAML_SCALAR_EVENT) {
      parseValue(buffer);
    } else if (event.type == YAML_SEQUENCE_START_EVENT) {
      parseSequence(buffer);
    } else if (event.type == YAML_MAPPING_START_EVENT) {
      parseMapping(buffer);
    } else {
      /* shouldn't get here if hasNext() was called before next() */
      assert(false);
    }
    nextEvent();
    }}
    return buffer;
  }

  /*
   * Parse a mapping (object).
   */  
  function parseMapping(buffer:Buffer) {
    buffer.setEmptyObject();
    cpp{{
    nextEvent();
    while (event.type != YAML_MAPPING_END_EVENT) {
      if (event.type == YAML_SCALAR_EVENT) {
        /* key */
        char* data = (char*)event.data.scalar.value;
        size_t length = event.data.scalar.length;
        std::string key(data, length);
      
        /* value */
        nextEvent();
        auto value = make_buffer();
        if (event.type == YAML_SCALAR_EVENT) {
          parseValue(value);
        } else if (event.type == YAML_SEQUENCE_START_EVENT) {
          parseSequence(value);
        } else if (event.type == YAML_MAPPING_START_EVENT) {
          parseMapping(value);
        }

        /* set key/value entry */
        buffer->set(key, value);
      }
      nextEvent();
    }
    }}
  }

  /*
   * Parse a sequence (array).
   */
  function parseSequence(buffer:Buffer) {
    cpp{{
    nextEvent();
    while (event.type != YAML_SEQUENCE_END_EVENT) {
      if (event.type == YAML_SCALAR_EVENT) {
        parseElement(buffer);
      } else if (event.type == YAML_SEQUENCE_START_EVENT) {
        auto element = make_buffer();
        parseSequence(element);
        buffer->push(element);
      } else if (event.type == YAML_MAPPING_START_EVENT) {
        auto element = make_buffer();
        parseMapping(element);
        buffer->push(element);
      }
      nextEvent();
    }
    }}
  }

  /*
   * Parse value of an entry in an object.
   */  
  function parseValue(buffer:Buffer) {
    cpp{{
    auto data = (char*)event.data.scalar.value;
    auto length = event.data.scalar.length;
    auto endptr = data;
    auto intValue = Integer(std::strtol(data, &endptr, 10));
    if (endptr == data + length) {
      buffer->set(intValue);
    } else {
      auto realValue = Real(std::strtod(data, &endptr));
      if (endptr == data + length) {
        buffer->set(Real(realValue));
      } else if (std::strcmp(data, "true") == 0) {
        buffer->set(true);
      } else if (std::strcmp(data, "false") == 0) {
        buffer->set(false);
      } else if (std::strcmp(data, "null") == 0) {
        buffer->setNil();
      } else if (std::strcmp(data, "Infinity") == 0) {
        buffer->set(std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "-Infinity") == 0) {
        buffer->set(-std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "NaN") == 0) {
        buffer->set(std::numeric_limits<Real>::quiet_NaN());
      } else {
        buffer->set(std::string(data, length));
      }
    }
    }}
  }

  /*
   * Parse element of a sequence.
   */
  function parseElement(buffer:Buffer) {
    cpp{{
    auto data = (char*)event.data.scalar.value;
    auto length = event.data.scalar.length;
    auto endptr = data;
    auto intValue = Integer(std::strtol(data, &endptr, 10));
    if (endptr == data + length) {
      buffer->push(intValue);
    } else {
      auto realValue = Real(std::strtod(data, &endptr));
      if (endptr == data + length) {
        buffer->push(realValue);
      } else if (std::strcmp(data, "true") == 0) {
        buffer->push(true);
      } else if (std::strcmp(data, "false") == 0) {
        buffer->push(false);
      } else if (std::strcmp(data, "null") == 0) {
        buffer->pushNil();
      } else if (std::strcmp(data, "Infinity") == 0) {
        buffer->push(std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "-Infinity") == 0) {
        buffer->push(-std::numeric_limits<Real>::infinity());
      } else if (std::strcmp(data, "NaN") == 0) {
        buffer->push(std::numeric_limits<Real>::quiet_NaN());
      } else {
        buffer->push(std::string(data, length));
      }
    }
    }}
  }

  /*
   * Parse the next event.
   */
  function nextEvent() {
    cpp{{
    yaml_event_delete(&event);
    if (!yaml_parser_parse(&parser, &event)) {
      error("parse error");
    }
    }}
  }
}
