/*
 * Iterator over the elements of a vector, that wraps each element in a
 * [Buffer](../Buffer) object.
 *
 * @param values Values.
 */
final class VectorBufferIterator<Type>(values:Type[_]) < Iterator<Buffer> {
  /**
   * Values.
   */
  values:Type[_] <- values;
  
  /**
   * Current index into the vector.
   */
  i:Integer <- 0;

  /**
   * Is there a next element?
   */
  override function hasNext() -> Boolean {
    return i < length(values);
  }

  /**
   * Get the next element.
   */
  override function next() -> Buffer {
    this.i <- this.i + 1;
    return make_buffer(this.values[this.i]);
  }
}
