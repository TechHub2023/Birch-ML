/**
 * Markov kernel.
 *
 * ```mermaid
 * classDiagram
 *    Kernel <|-- LangevinKernel
 *    link Kernel "../Kernel/"
 *    link LangevinKernel "../LangevinKernel/"
 * ```
 *
 * A Kernel is applied to a Particle. It applies an invariant update to the
 * Random objects encountered in the execution of that particle, as though
 * probabilistic events had always been handled this way. Mathematically,
 * these Random objects constitute a sample from some target distribution. A
 * Kernel object represents a Markov kernel that is applied to the sample to
 * update it in a manner invariant to that target distribution.
 */
abstract class Kernel {
  /**
   * Number of lags.
   */
  nlags:Integer <- 0;

  /**
   * Number of moves.
   */
  nmoves:Integer <- 1;

  /**
   * Scale of each move.
   */
  scale:Real <- 1.0;

  /**
   * Target acceptance rate for PID controller.
   */
  raccepts:Real <- 0.574;

  /*
   * Hyperparameters for PID controller on scale.
   */
  Ki:Real <- 1.2;
  Kp:Real <- 0.6;
  Kd:Real <- 0.3;

  /*
   * Last three errors for PID controller on scale.
   */
  e1:Real <- 0.0;
  e2:Real <- 0.0;
  e3:Real <- 0.0;

  /**
   * Move a particle.
   *
   * @param x Particle.
   *
   * @return Acceptance rate of moves on this particle.
   */
  abstract function move(x:Model) -> Real;

  /**
   * Adapt the scale using a PID controller.
   *
   * @param raccepts Acceptance rate of last move step.
   */
  function adapt(raccepts:Real) {
    e3 <- e2;
    e2 <- e1;
    e1 <- raccepts - this.raccepts;
    scale <- exp(log(scale) + (Ki + Kp + Kd)*e1 - (Kp + 2.0*Kd)*e2 + Kd*e3);
  }

  override function read(buffer:Buffer) {
    super.read(buffer);
    nlags <-? buffer.get<Integer>("nlags");
    nmoves <-? buffer.get<Integer>("nmoves");
    scale <-? buffer.get<Real>("scale");
    raccepts <-? buffer.get<Real>("raccepts");
    Ki <-? buffer.get<Real>("Ki");
    Kp <-? buffer.get<Real>("Kp");
    Kd <-? buffer.get<Real>("Kd");
  }
  
  override function write(buffer:Buffer) {
    super.write(buffer);
    buffer.set("nlags", nlags);
    buffer.set("nmoves", nmoves);
    buffer.set("scale", scale);
    buffer.set("raccepts", raccepts);
    buffer.set("Ki", Ki);
    buffer.set("Kp", Kp);
    buffer.set("Kd", Kd);
  }
}
