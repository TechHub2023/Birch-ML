/**
 * Particle sampler.
 */
class ParticleSampler {
  /**
   * Start a sample.
   *
   * @param filter Particle filter.
   * @param model Model.
   * @param input Input buffer.
   */
  function sample(filter:ParticleFilter, model:Model, input:Buffer) {
    filter.filter(model, input);
  }

  /**
   * Step a sample.
   *
   * @param filter Particle filter.
   * @param input Input buffer.
   * @param t The step number, beginning at 1.
   */
  function sample(filter:ParticleFilter, t:Integer, input:Buffer) {
    filter.filter(t, input);
  }

  /**
   * Step a sample.
   *
   * @param filter Particle filter.
   * @param t The step number, beginning at 1.
   * @param input Input buffer.
   * @param κ Markov kernel.
   */
  function sample(filter:ParticleFilter, t:Integer, input:Buffer, κ:Kernel) {
    filter.filter(t, input, κ);
  }

  /**
   * Draw a sample from the particle filter.
   */
  function draw(filter:ParticleFilter) -> (Model, Real) {
    let b <- ancestor(filter.w);
    if b == 0 {
      error("particle filter degenerated");
    }
    return (filter.x[b], filter.lnormalize);
  }
}
