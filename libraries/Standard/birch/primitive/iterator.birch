/**
 * Reduction.
 *
 * @param iter Iterator.
 * @param init Initial value.
 * @param op Operator.
 */
function reduce<Type,Lambda>(iter:Iterator<Type>, init:Type, op:Lambda) ->
    Type {
  let result <- init;
  while iter.hasNext() {
    result <- op(result, iter.next());
  }
  return result;
}

/**
 * Maximum reduction.
 */
function max<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Real, y:Real) -> Real {
        return max(x, y);
      });
}

/**
 * Minimum reduction.
 */
function min<Type>(iter:Iterator<Type>) -> Type {
  assert iter.hasNext();
  return reduce(iter, iter.next(), \(x:Type, y:Type) -> Type {
        return min(x, y);
      });
}
