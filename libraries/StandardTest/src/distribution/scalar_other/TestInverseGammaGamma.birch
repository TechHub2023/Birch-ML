class TestInverseGammaGamma < TestModel {
  θ:Random<Real>;
  x:Random<Real>;
  k:Random<Real>;
  α:Random<Real>;
  β:Random<Real>;

  override function initialize() {
    k ~ Uniform(1.0, 10.0);
    α ~ Uniform(2.0, 10.0);
    β ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    θ ~ InverseGamma(α, β);
    x ~ Gamma(k, θ);
  }

  override function forward() -> Real[_] {
    y:Real[2];
    y[1] <- θ.peek();
    y[2] <- x.peek();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.peek();
    assert !θ.hasValue();
    y[1] <- θ.peek();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2;
  }
}

program test_conjugacy_inverse_gamma_gamma(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestInverseGammaGamma;
  test_conjugacy(m, N, lazy);
}

program test_pdf_inverse_gamma_gamma(N:Integer <- 10000, B:Integer <- 1000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestInverseGammaGamma;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_inverse_gamma_gamma(N:Integer <- 10000) {
  m:TestInverseGammaGamma;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_inverse_gamma_gamma(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestInverseGammaGamma;
  test_grad(m, N, backward);
}
