class TestBernoulli < TestModel {
  x:Random<Boolean>;
  ρ:Random<Real>;

  override function initialize() {
    //
  }

  override function simulate() {
    ρ ~ Uniform(0.0, 1.0);
    x ~ Bernoulli(ρ);
  }

  override function forward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  override function backward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  function marginal() -> Distribution<Boolean> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_bernoulli(N:Integer <- 10000, B:Integer <- 0,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestBernoulli;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, lazy);
}

program test_grad_bernoulli(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestBernoulli;
  test_grad(m, N, backward);
}
