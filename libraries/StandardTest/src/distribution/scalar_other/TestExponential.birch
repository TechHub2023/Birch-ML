class TestExponential < TestModel {
  x:Random<Real>;
  λ:Random<Real>;

  override function initialize() {
    λ ~ Uniform(1.0, 10.0);
  }

  override function simulate() {
    x ~ Exponential(λ);
  }

  override function forward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  override function backward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_conjugacy_exponential(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestExponential;
  test_conjugacy(m, N, lazy);
}

program test_pdf_exponential(N:Integer <- 10000, B:Integer <- 100,
    S:Integer <- 5, lazy:Boolean <- false) {
  m:TestExponential;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, B, S, lazy);
}

program test_cdf_exponential(N:Integer <- 10000) {
  m:TestExponential;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_exponential(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestExponential;
  test_grad(m, N, backward);
}
