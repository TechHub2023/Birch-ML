class TestLongDiscreteDelta < TestModel {
  x:Array<Random<Integer>>;
  s:Random<Integer>;

  override function initialize() {
    //
  }

  override function simulate() {
    x[1] ~ Binomial(10, 0.5);
    x[2] ~ Binomial(10, 0.5);
    x[3] ~ Binomial(10, 0.5);
    x[4] ~ Binomial(10, 0.5);
    x[5] ~ Binomial(10, 0.5);
    s ~ Delta(-x[1] - (x[2] + x[3]) - (x[4] - x[5]));
  }

  override function forward() -> Real[_] {
    y:Real[size()];
    y[1] <- x[1].peek();
    y[2] <- x[2].peek();
    y[3] <- x[3].peek();
    y[4] <- x[4].peek();
    y[5] <- x[5].peek();
    y[6] <- s.peek();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[size()];
    y[6] <- s.peek();
    assert !x[1].hasValue();
    assert !x[2].hasValue();
    assert !x[3].hasValue();
    assert !x[4].hasValue();
    assert !x[5].hasValue();
    y[5] <- x[5].peek();
    y[4] <- x[4].peek();
    y[3] <- x[3].peek();
    y[2] <- x[2].peek();
    y[1] <- x[1].peek();
    return y;
  }

  function marginal() -> Distribution<Integer> {
    return s.getDistribution();
  }

  override function size() -> Integer {
    return 6;
  }
}

program test_conjugacy_long_discrete_delta(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestLongDiscreteDelta;
  test_conjugacy(m, N, lazy);
}

program test_pdf_long_discrete_delta(N:Integer <- 10000, B:Integer <- 0,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestLongDiscreteDelta;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, lazy);
}
