class TestConwayMaxwellPoisson < TestModel {
  x:Random<Integer>;
  λ:Random<Real>;
  ν:Random<Real>;
  n:Integer;

  override function initialize() {
    λ ~ Uniform(0.5, 100.0);
    ν ~ Uniform(0.5, 2.0);
    let P <- simulate_uniform(0.5, 0.95);
    n <- quantile_conway_maxwell_poisson(P, peek(λ), peek(ν), 10000) + 1;
  }

  override function simulate() {
    x ~ ConwayMaxwellPoisson(λ, ν, n);
  }

  override function forward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  override function backward() -> Real[_] {
    return vector(x.peek(), 1);
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_conway_maxwell_poisson(N:Integer <- 10000, B:Integer <- 0,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestConwayMaxwellPoisson;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, lazy);
}

program test_cdf_conway_maxwell_poisson() {
  m:TestConwayMaxwellPoisson;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal());
}

program test_grad_conway_maxwell_poisson(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestConwayMaxwellPoisson;
  test_grad(m, N, backward);
}
