class TestLinearMultivariateNormalInverseWishartMultivariateGaussian < TestModel {
  Σ:Random<Real[_,_]>;
  x:Random<Real[_]>;
  y:Random<Real[_]>;

  n:Integer <- 5;

  k:Real;
  Ψ:Real[n,n];
  a:Real;
  μ:Real[n];
  c:Real[n];

  override function initialize() {
    k <- simulate_uniform(3.0, 10.0);
    Ψ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    a <- simulate_uniform(-2.0, 2.0);
    μ <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
    c <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);

    Ψ <- outer(Ψ) + diagonal(1.0e-1, n);
  }

  override function simulate() {
    Σ ~ InverseWishart(Ψ, k);
    x ~ MultivariateGaussian(μ, Σ);
    y ~ MultivariateGaussian(a*x + c, Σ);
  }

  override function forward() -> Real[_] {
    Σ.eval();
    x.eval();
    y.eval();
    return vectorize();
  }

  override function backward() -> Real[_] {
    assert !y.hasValue();
    y.eval();
    assert !x.hasValue();
    x.eval();
    assert !Σ.hasValue();
    Σ.eval();
    return vectorize();
  }

  override function backwardGrad() {
    assert !y.hasValue();
    y.eval();
    assert !x.hasValue();
    x.eval();
    assert !Σ.hasValue();
    // ^ currently can't do finite difference gradient estimates on symmetric
    //   matrices
  }

  function marginal() -> Distribution<Real[_]> {
    return y.getDistribution();
  }

  function vectorize() -> Real[_] {
    return stack(stack(vec(eval(Σ)), eval(x)), eval(y));
  }

  override function size() -> Integer {
    return n*n + 2*n;
  }
}

program test_conjugacy_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseWishartMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseWishartMultivariateGaussian;
  m.initialize();
  m.simulate();
  test_pdf(m.marginal(), N, S, lazy);
}

program test_grad_linear_multivariate_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseWishartMultivariateGaussian;
  test_grad(m, N, backward);
}
