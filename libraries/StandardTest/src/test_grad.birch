/*
 * Test the gradient of a pdf.
 *
 * - π: The target distribution. 
 * - N: Number of samples.
 * - backward: Test joint distributions in backward mode? (Otherwise forward
 *   mode.)
 */
function test_grad(m:TestModel, N:Integer, backward:Boolean) {
  let failed <- vector(0.0, N);  // failure rate in each test

  let h <- 1.0e-4;    // maximum width for finite difference estimate
  let ntrials <- 10;  // number of trials
  // ^ the interval width adapts by starting at h, halving until either
  //   success or ntrials trials, after which the test is considered failed

  let γ <- 1.0e-3;  // acceptable failure rate
  let ε <- 1.0e-3;  // relative error threshold for fail
  // ^ the pass criterion is that 100*(1 - γ) percent of gradients computed
  //   are within 100.0*ε percent of the finite difference approximation; e.g.
  //   with γ = 1.0e-3 and ε = 1.0e-3, that "99.9% of gradients computed are
  //   within 0.1% of the finite difference approximation"

  parallel for n in 1..N {
    let handler <- construct<Handler>(backward, true);
    let m' <- copy(m);
    with handler {
      m'.initialize();
      m'.simulate();
      if backward {
        m'.backwardGrad();
      } else {
        m'.forwardGrad();
      }
    }

    /* compute gradient */
    let x <- handler.args();
    assert length(x) > 0;
    let d <- handler.grad();
    assert length(d) == length(x);

    /* compare with finite difference estimates */
    for i in 1..rows(x) {
      let h' <- h;  // initial interval size for finite difference
      let t <- 1;
      let pass <- false;
      while t <= ntrials {
        let y <- x;
        let z <- x;
        y[i] <- y[i] - 0.5*h';
        z[i] <- z[i] + 0.5*h';
        let q <- handler.move(y);
        let r <- handler.move(z);
        let fd <- (r - q)/h';
        let δ <- abs(d[i] - fd);

        pass <- 100 <= N || δ <= ε*abs(fd);  // if N <= 100, smoke test only
        if pass {
          /* success */
          t <- ntrials + 1;
        } else if t < ntrials {
          /* shrink interval for finite difference and try again */
          t <- t + 1;
          h' <- 0.5*h';
        } else {
          /* fail */
          t <- ntrials + 1;
          warn("on component " + i + ", d=" + d[i] + ", fd=" + fd + ", "  +
              δ + " > " + ε*abs(fd));
          failed[n] <- failed[n] + 1.0/rows(x);
        }
      }
    }
  }

  /* check that failure rate within bounds */
  let rfail <- sum(failed)/N;
  if !(rfail <= γ) {
    error("***failed*** in aggregate, rate " + rfail + " > " + γ + "\n");
  }
}
