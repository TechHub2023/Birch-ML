/*
 * Test the normalizing constant of a pdf.
 *
 * - π: The target distribution. 
 * - N: Number of importance samples.
 * - lazy: Use lazy expressions?
 */
function test_z(π:Distribution<Real>, N:Integer, lazy:Boolean) {  
  /* compute the shape for a t-distribution proposal using the iid samples */
  let k <- 3;  // degrees of freedom
  let μ <- 0.0;
  let σ2 <- 0.0;
  for n in 1..N {
    let x <- π.simulate();
    μ <- μ + x;
    σ2 <- σ2 + x*x;
  }
  μ <- μ/N;                  // sample mean and location for Student's t
  σ2 <- σ2/N - μ*μ;          // sample variance
  σ2 <- σ2/(k/(k - 2));  // spread for Student's t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_student_t(k, μ, σ2);
    let q <- logpdf_student_t(x, k, μ, σ2);
    let p <- 0.0;
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(x)!;
    } else {
      p <- π.logpdf(x);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let Z <- exp(lsum - log(N));
  let δ <- abs(Z - 1.0);
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }
}

/*
 * Test the normalizing constant of a pdf.
 *
 * - π: The target distribution. 
 * - N: Number of importance samples.
 * - lazy: Use lazy expressions?
 */
function test_z(π:Distribution<Real[_]>, N:Integer, lazy:Boolean) {
  let D <- rows(π.simulate());
  
  /* compute the shape for a t-distribution proposal using iid samples */
  let k <- 3 + D;  // degrees of freedom
  let μ <- vector(0.0, D);
  let Σ <- matrix(0.0, D, D);
  for n in 1..N {
    let x <- π.simulate();
    μ <- μ + x;
    Σ <- Σ + outer(x);
  }
  μ <- μ/N;            // sample mean and location for multivariate t
  Σ <- Σ/N - outer(μ); // sample covariance
  Σ <- Σ*(k - 2);      // spread for multivariate t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_multivariate_t(k, μ, Σ);
    let q <- logpdf_multivariate_t(x, k, μ, Σ);
    let p <- 0.0;
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(x)!;
    } else {
      p <- π.logpdf(x);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let Z <- exp(lsum - log(N));
  let δ <- abs(Z - 1.0);
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }
}

/*
 * Test the normalizing constant of a pdf.
 *
 * - π: The target distribution. 
 * - N: Number of importance samples.
 * - lazy: Use lazy expressions?
 */
function test_z(π:Distribution<Real[_,_]>, N:Integer, lazy:Boolean) {
  let R <- rows(π.simulate());
  let C <- columns(π.simulate());
  
  /* compute the shape for a t-distribution proposal using iid samples */
  let k <- 3 + R*C;  // degrees of freedom
  let μ <- vector(0.0, R*C);
  let Σ <- matrix(0.0, R*C, R*C);
  for n in 1..N {
    let x <- vec(π.simulate());
    μ <- μ + x;
    Σ <- Σ + outer(x);
  }
  μ <- μ/N;             // sample mean and location for matrix-t
  Σ <- Σ/N - outer(μ);  // sample covariance
  Σ <- Σ*(k - 2);       // spread for matrix-t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_multivariate_t(k, μ, Σ);
    let q <- logpdf_multivariate_t(x, k, μ, Σ);
    let p <- 0.0;
    let X <- mat(x, C);
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(X)!;
    } else {
      p <- π.logpdf(X);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let Z <- exp(lsum - log(N));
  let δ <- abs(Z - 1.0);
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }
}
