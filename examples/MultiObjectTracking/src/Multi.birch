/**
 * Multiple object model.
 */
class Multi < Model {
  /**
   * Global parameters.
   */
  θ:Global;

  /**
   * Current tracks.
   */
  x:Tape<Track>;

  /**
   * Current observations.
   */
  y:Tape<Real[_]>;

  /**
   * All tracks up to current time.
   */
  xAll:Tape<Track>;

  /**
   * All clutter observations up to current time.
   */
  yAll:Tape<Tape<Real[_]>>;

  override function simulate(t:Integer) {
    /* move current objects */
    x':Tape<Track>;  // new current set of tracks
    let iter <- x.walk();
    while iter.hasNext() {
      let track <- iter.next();
      let ρ <- exp(logpdf_poisson(t - track.s - 1, θ.τ));
      let R <- 1.0 - cdf_poisson(t - track.s - 1, θ.τ) + ρ;
      s:Boolean;
      s <~ Bernoulli(1.0 - ρ/R);  // does the object survive?
      if s {
        track.simulate(t - track.s + 1);
        x'.pushBack(track);
      }
    }
    
    /* birth new objects */
    N:Integer;
    N <~ Poisson(θ.λ);
    for n in 1..N {
      track:Track(t, θ);
      track.simulate();   // up to parameters
      track.simulate(1);  // up to initial time
      x'.pushBack(track);
      xAll.pushBack(track);
    }

    /* new current set of tracks */
    x <- x';

    if !y.empty() {
      /* associate observations */
      associate(t);
    } else {
      /* generate observations */
      generate(t);
    }
    yAll.pushBack(y);
  }

  function associate(t:Integer) {
    let iter <- x.walk();
    while iter.hasNext() {
      let track <- iter.next();
      let o <- track.y[t - track.s + 1];  // observation random variable
      if o.hasDistribution() {
        let p <- o.getDistribution();
      
        /* propose an association */
        q:Real[y.size()];
        for n in 1..y.size() {
          q[n] <- p.pdf(y[n]);
        }
        let Q <- sum(q);
        if Q > 0.0 {
          q <- q/Q;
          n:Integer;
          n <~ Categorical(q);  // propose an observation to associate with
          let w <- p.observe(y[n]);  // likelihood
          w <- w - log(Real(y.size()));  // prior correction (uniform prior)
          w <- w - log(q[n]);  // proposal correction
          y.erase(n);  // remove the observation for future associations
          factor w;
        } else {
          factor -inf;  // detected, but all likelihoods (numerically) zero
        }
      }
    }
    
    /* remaining observations are clutter */
    N:Integer <- y.size() - 1;
    N ~> Poisson(θ.μ);
    for n in 1..(N + 1) {
      y[n] ~> Uniform(θ.l, θ.u);
    }
  }

  function generate(t:Integer) {
    N:Integer;
    N <~ Poisson(θ.μ);
    for n in 1..(N + 1) {
      y[n] <~ Uniform(θ.l, θ.u);
    }
  }

  override function read(t:Integer, buffer:Buffer) {
    buffer.get(y);
  }

  override function read(buffer:Buffer) {
    buffer.get(θ);
  }

  override function write(buffer:Buffer) {
    buffer.set("θ", θ);
    buffer.set("z", xAll);
    buffer.set("y", yAll);
  }
}
