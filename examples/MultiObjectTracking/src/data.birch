/**
 * Create a simulated data set from simulation output.
 *
 * `--input`: path of an output file from a simulation run, containing the
 * ground truth.
 * `--output`: path to an output file to which to write the simulated data
 * set.
 */
program data(input:String <- "output/simulate.json",
    output:String <- "input/filter.json") {
  /* input */
  let reader <- make_reader(input);
  let inputBuffer <- reader.slurp();
  reader.close();
  
  /* read in the simulated observations from the track */
  let iter1 <- inputBuffer.walk();
  let sample <- iter1.next().get("sample");
  let l <- sample!.get<Real>("l")!;
  let u <- sample!.get<Real>("u")!;
  let d <- sample!.get<Real>("d")!;
  let M <- sample!.get<Real[_,_]>("M")!;
  let A <- sample!.get<Real[_,_]>("A")!;
  let Q <- sample!.get<Real[_,_]>("Q")!;
  let B <- sample!.get<Real[_,_]>("B")!;
  let R <- sample!.get<Real[_,_]>("R")!;
  let λ <- sample!.get<Real>("λ")!;
  let μ <- sample!.get<Real>("μ")!;
  let τ <- sample!.get<Real>("τ")!;
  let y <- sample!.get<RaggedArray<Real[_]>>("y")!;

  let iter2 <- sample!.walk("z");
  while iter2.hasNext() {
    let z <- iter2.next();
    let s <- z.get<Integer>("s")!;
    let iter3 <- z.walk("y");
    while iter3.hasNext() {
      let u <- iter3.next();
      let v <- u.get<Real[_]>();
      if v? {
        y.pushBack(s, v![1..2]);
      }
      s <- s + 1;
    }
  }
  
  /* save the observations to the output file */
  θ:Buffer;
  θ.set("l", l);
  θ.set("u", u);
  θ.set("d", d);
  θ.set("M", M);
  θ.set("A", A);
  θ.set("Q", Q);
  θ.set("B", B);
  θ.set("R", R);
  θ.set("λ", λ);
  θ.set("μ", μ);
  θ.set("τ", τ);

  outputBuffer:Buffer;
  outputBuffer.push(θ);
  let iter3 <- y.walk();
  while iter3.hasNext() {
    outputBuffer.push(iter3.next());
  }

  let writer <- make_writer(output);
  writer.dump(outputBuffer);
  writer.close();
}
