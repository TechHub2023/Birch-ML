/**
 * Global parameters.
 */
class Global {
  /**
   * Lower bound of domain of interest.
   */
  l:Real;

  /**
   * Upper bound of domain of interest.
   */
  u:Real;

  /**
   * Probability of detection.
   */
  d:Real;

  /**
   * Initial value covariance.
   */
  M:Random<Real[_,_]>;
  
  /**
   * Transition matrix.
   */
  A:Random<Real[_,_]>;

  /**
   * State noise covariance matrix.
   */
  Q:Random<Real[_,_]>;

  /**
   * Observation matrix.
   */
  B:Random<Real[_,_]>;

  /**
   * Observation noise covariance matrix.
   */
  R:Random<Real[_,_]>;

  /**
   * Birth rate.
   */
  λ:Real;

  /**
   * Clutter rate.
   */
  μ:Real;

  /**
   * Track length rate.
   */
  τ:Real;
  
  function read(buffer:Buffer) {
    l <-? buffer.get<Real>("l");
    u <-? buffer.get<Real>("u");
    d <-? buffer.get<Real>("d");
    M <-? buffer.get<Real[_,_]>("M");
    A <-? buffer.get<Real[_,_]>("A");
    Q <-? buffer.get<Real[_,_]>("Q");
    B <-? buffer.get<Real[_,_]>("B");
    R <-? buffer.get<Real[_,_]>("R");
    λ <-? buffer.get<Real>("λ");
    μ <-? buffer.get<Real>("μ");
    τ <-? buffer.get<Real>("τ");
  }
  
  function write(buffer:Buffer) {
    buffer.set("l", l);
    buffer.set("u", u);
    buffer.set("d", d);
    buffer.set("M", M);
    buffer.set("A", A);
    buffer.set("Q", Q);
    buffer.set("B", B);
    buffer.set("R", R);
    buffer.set("λ", λ);
    buffer.set("μ", μ);
    buffer.set("τ", τ);
  }
}