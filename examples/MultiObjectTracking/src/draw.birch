/**
 * Draw a figure of simulate or filter results.
 *
 */
program draw(input:String <- "output/simulate.json",
    output:String <- "figs/simulate.pdf",
    width:Integer <- 1024,
    height:Integer <- 1024) {
  /* input file */
  let reader <- Reader(input);
  let inputBuffer <- reader.slurp();
  reader.close();
  
  /* output file and drawing surface */
  let surface <- createPDF(output, width, height);
  let cr <- create(surface);

  /* background */
  cr.setSourceRGB(0.95, 0.95, 0.95);
  cr.rectangle(0, 0, width, height);
  cr.fill();

  /* config */
  //let col <- [0.3373, 0.7059, 0.9137]; // blue
  let col <- [0.8353, 0.3686, 0.0000];  // red

  let iter <- inputBuffer.walk();
  if iter.hasNext() {
    let array <- iter.next();
    let sample <- array.get("sample");
    if sample? {
      let θ <- sample!.get("θ")!;
      let l <- θ.get<Real>("l")!;
      let u <- θ.get<Real>("u")!;

      let scaleX <- width/(u - l);
      let scaleY <- height/(u - l);
      let scale <- max(scaleX, scaleY);
      let fat <- 2.0;
  
      /* border */
      cr.setSourceRGB(0.8, 0.8, 0.8);
      cr.rectangle(0, 0, width - 1, height - 1);
      cr.stroke();

      /* set scale for tracking domain */
      cr.scale(scaleX, scaleY);
      cr.translate(-l, -l);

      /* solid points marking clutter */
      cr.setSourceRGB(0.8, 0.8, 0.8);
      iter <- sample!.walk("y");
      while iter.hasNext() {
        let y <- iter.next().get<Real[_,_]>()!;
        for i in 1..rows(y) {
          cr.arc(y[i,1], y[i,2], 4.0*fat/scale, 0.0, 2.0*π);
          cr.fill();
        }
      }

      /* circled points marking associated observations */
      cr.setLineWidth(2.0*fat/scale);
      iter <- sample!.walk("z");
      while iter.hasNext() {
        let iter2 <- iter.next().walk("y");
        while iter2.hasNext() {
          let ys <- iter2.next();
          let y <- ys.get<Real[_]>();  // may be null
          if y? {
            cr.arc(y![1], y![2], 4.0*fat/scale, 0.0, 2.0*π);
            cr.setSourceRGB(0.8, 0.8, 0.8);
            cr.fillPreserve();
            cr.setSourceRGB(col[1], col[2], col[3]);
            cr.stroke();
          }
        }
      }
    
      /* lines marking latent tracks */
      cr.setSourceRGB(col[1], col[2], col[3]);
      iter <- sample!.walk("z");
      while iter.hasNext() {
        let z <- iter.next();
        let x <- z.get<Real[_,_]>("x");
        if x? {
          cr.setLineWidth(4.0*fat/scale);
          cr.moveTo(x![1,1], x![1,2]);
          for i in 2..rows(x!) {
            cr.lineTo(x![i,1], x![i,2]);
          }
          cr.stroke();
        }
      }
    
      /* start time labels for latent tracks */
      iter <- sample!.walk("z");
      while iter.hasNext() {
        let z <- iter.next();
        let s <- z.get<Integer>("s");
        let x <- z.get<Real[_,_]>("x");
    
        if s? && x? {
          cr.setLineWidth(2.0*fat/scale);
          cr.setSourceRGB(col[1], col[2], col[3]);
          cr.arc(x![1,1], x![1,2], 10.0*fat/scale, 0.0, 2.0*π);
          cr.fill();

          cr.setSourceRGB(1.0, 1.0, 1.0);
          cr.setFontSize(0.5);
          cr.moveTo(x![1,1] - 0.26, x![1,2] + 0.15);
          cr.showText(to_string(s!));
        }
      }
    }
  }
  
  /* destroy the surface (triggers save) */
  cr.destroy();
  surface.destroy();
}
