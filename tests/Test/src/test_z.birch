/*
 * Test the normalizing constant of a model.
 *
 * @param m The model.
 * @param N Number of importance samples.
 * @param lazy Use lazy expressions?
 */
function test_z<TestModelType>(m:TestModelType, N:Integer, lazy:Boolean) {
  with construct<Handler>(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_z(m.marginal(), N, lazy);
}

/*
 * Test the normalizing constant of a pdf.
 *
 * @param π The target distribution. 
 * @param N Number of importance samples.
 * @param lazy Use lazy expressions?
 */
function test_z(π:Distribution<Real>, N:Integer, lazy:Boolean) {  
  /* compute the shape for a t-distribution proposal using the mean
   * and sample variance of iid samples, calculated with Welford's online
   * algorithm */
  let k <- 3;  // degrees of freedom
  let μ <- 0.0; // running mean
  let S <- 0.0; // running sum of squares of differences from mean
  for n in 1..N {
    let x <- π.simulate();
    let dμ <- x - μ;
    μ <- μ + dμ/n;
    S <- S + dμ*(x - μ);
  }
  let σ2 <- (S/N)/k; // spread for Student's t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_student_t(k, μ, σ2);
    let q <- logpdf_student_t(x, k, μ, σ2);
    let p <- 0.0;
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(x)!;
    } else {
      p <- π.logpdf(x);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let δ <- abs(expm1(lsum - log(N)));
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    let Z <- exp(lsum - log(N));
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }

  /* smoke test for constant */
  π.constant();
}

/*
 * Test the normalizing constant of a pdf.
 *
 * @param π The target distribution. 
 * @param N Number of importance samples.
 * @param lazy Use lazy expressions?
 */
function test_z(π:Distribution<Real[_]>, N:Integer, lazy:Boolean) {
  let D <- rows(π.simulate());
  
  /* compute the shape for a t-distribution proposal using the mean and
   * sample variance of iid samples, calculated with Welford's online
   * algorithm */
  let k <- 3 + D; // degrees of freedom
  μ:Real[D]; // running mean
  M:Real[D,D]; // running matrix of co-moments
  do {
    μ <- 0.0;
    M <- 0.0;
    for n in 1..N {
      let x <- π.simulate();
      let dμ <- x - μ;
      μ <- μ + dμ/n;
      M <- M + outer(dμ, x - μ);
    }
  } while N >= 10 && sum(isfinite(chol(M))) == 0;
  let Σ <- M/N*(k-2); // spread for multivariate t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_multivariate_t(k, μ, Σ);
    let q <- logpdf_multivariate_t(x, k, μ, Σ);
    let p <- 0.0;
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(x)!;
    } else {
      p <- π.logpdf(x);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let δ <- abs(expm1(lsum - log(N)));
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    let Z <- exp(lsum - log(N));
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }

  /* smoke test for constant */
  π.constant();
}

/*
 * Test the normalizing constant of a pdf.
 *
 * @param π The target distribution. 
 * @param N Number of importance samples.
 * @param lazy Use lazy expressions?
 */
function test_z(π:Distribution<Real[_,_]>, N:Integer, lazy:Boolean) {
  let R <- rows(π.simulate());
  let C <- columns(π.simulate());
  let D <- R*C;

  /* compute the shape for a t-distribution proposal using the mean and
   * sample variance of iid samples, calculated with Welford's online
   * algorithm */
  let k <- 3 + D; // degrees of freedom
  μ:Real[D]; // running mean
  M:Real[D,D]; // running matrix of co-moments
  do {
    μ <- 0.0;
    M <- 0.0;
    for n in 1..N {
      let x <- vec(π.simulate());
      let dμ <- x - μ;
      μ <- μ + dμ/n;
      M <- M + outer(dμ, x - μ);
    }
  } while N >= 10 && sum(isfinite(chol(M))) == 0;
  let Σ <- M/N*(k-2); // spread for matrix-t proposal

  /* draw importance samples */
  z:Real[N];
  parallel for n in 1..N {
    let x <- simulate_multivariate_t(k, μ, Σ);
    let q <- logpdf_multivariate_t(x, k, μ, Σ);
    let p <- 0.0;
    let X <- mat(x, C);
    if lazy && π.supportsLazy() {
      p <- π.logpdfLazy(X)!;
    } else {
      p <- π.logpdf(X);
    }
    z[n] <- p - q;
  }
  
  /* test distance between the iid and Metropolis samples */
  let (ess, lsum) <- resample_reduce(z);
  let δ <- abs(expm1(lsum - log(N)));
  let ε <- 10.0/sqrt(N);
  if !(N < 10 || δ < ε) {
    let Z <- exp(lsum - log(N));
    stderr.print("***failed*** Z=" + Z + ", ess=" + ess + "\n");
    exit(1);
  }

  /* smoke test for constant */
  π.constant();
}
