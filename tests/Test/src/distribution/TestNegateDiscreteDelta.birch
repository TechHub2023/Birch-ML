class TestNegateDiscreteDelta < TestModel {
  ρ:Random<Real>;
  x:Random<Integer>;
  y:Random<Integer>;

  α:Real;
  β:Real;
  n:Integer;

  override function initialize() {
    α <- simulate_uniform(0.0, 10.0);
    β <- simulate_uniform(0.0, 10.0);
    n <- simulate_uniform_int(1, 100);
  }

  override function simulate() {
    ρ ~ Beta(α, β);
    x ~ Binomial(n, ρ);
    y ~ Delta(-x);
  }

  override function forward() -> Real[_] {
    z:Real[size()];
    z[1] <- ρ.eval();
    z[2] <- x.eval();
    z[3] <- y.eval();
    return z;
  }

  override function backward() -> Real[_] {
    z:Real[size()];
    assert !y.hasValue();
    z[3] <- y.eval();
    assert !x.hasValue();
    z[2] <- x.eval();
    assert !ρ.hasValue();
    z[1] <- ρ.eval();
    return z;
  }

  function marginal() -> Distribution<Integer> {
    return y.getDistribution();
  }

  override function size() -> Integer {
    return 3;
  }
}

program test_conjugacy_negate_discrete_delta(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestNegateDiscreteDelta;
  test_conjugacy(m, N, lazy);
}

program test_pdf_negate_discrete_delta(N:Integer <- 10000,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestNegateDiscreteDelta;
  with construct<Handler>(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_pdf(m.marginal(), N, lazy);
}
