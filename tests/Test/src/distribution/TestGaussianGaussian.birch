class TestLinearGaussianGaussian < TestModel {
  μ_1:Random<Real>;
  x:Random<Real>;
  a:Random<Real>;
  c:Random<Real>;
  μ_0:Random<Real>;
  σ2_0:Random<Real>;
  σ2_1:Random<Real>;

  override function initialize() {
    a ~ Uniform(-2.0, 2.0);
    c ~ Uniform(-10.0, 10.0);
    μ_0 ~ Uniform(-10.0, 10.0);
    σ2_0 ~ Uniform(0.1, 2.0);
    σ2_1 ~ Uniform(0.1, 2.0);
  }

  override function simulate() {
    μ_1 ~ Gaussian(μ_0, σ2_0);
    x ~ Gaussian(a*μ_1 + c, σ2_1);
  }

  override function forward() -> Real[_] {
    y:Real[2];
    y[1] <- μ_1.eval();
    y[2] <- x.eval();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- x.eval();
    assert !μ_1.hasValue();
    y[1] <- μ_1.eval();
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2;
  }
}

program test_conjugacy_gaussian_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestLinearGaussianGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_gaussian_gaussian(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearGaussianGaussian;
  with construct<Handler>(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_pdf(m.marginal(), N, S, lazy);
}

program test_z_gaussian_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestLinearGaussianGaussian;
  with construct<Handler>(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_z(m.marginal(), N, lazy);
}

program test_cdf_gaussian_gaussian(N:Integer <- 10000) {
  m:TestLinearGaussianGaussian;
  m.initialize();
  m.simulate();
  test_cdf(m.marginal(), N);
}

program test_grad_gaussian_gaussian(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestLinearGaussianGaussian;
  test_grad(m, N, backward);
}
