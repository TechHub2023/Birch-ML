class TestDirichletCategorical < TestModel {
  ρ:Random<Real[_]>;
  x:Random<Integer>;
  α:Real[5];

  override function initialize() {
    for n in 1..5 {
      α[n] <- simulate_uniform(1.0, 10.0);
    }
  }

  override function simulate() {
    ρ ~ Dirichlet(α);
    x ~ Categorical(ρ);
  }

  override function forward() -> Real[_] {
    y:Real[6];
    y[1..5] <- ρ.eval();
    y[6] <- x.eval();
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[6];
    assert !x.hasValue();
    y[6] <- x.eval();
    assert !ρ.hasValue();
    y[1..5] <- ρ.eval();
    return y;
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 6;
  }
}

program test_conjugacy_dirichlet_categorical(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestDirichletCategorical;
  test_conjugacy(m, N, lazy);
}

program test_pdf_dirichlet_categorical(N:Integer <- 10000,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestDirichletCategorical;
  with construct<Handler>(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_pdf(m.marginal(), N, lazy);
}
